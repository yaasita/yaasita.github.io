<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/post/index.xml</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 May 2017 04:55:23 +0900</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>テーマを簡素にしてtumblrを見たいとき</title>
      <link>https://yaasita.github.io/2017/05/06/noneblr</link>
      <pubDate>Sat, 06 May 2017 04:55:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/06/noneblr</guid>
      <description>noneblrというサービスが良いかもしれない
これでどんなBlogも一定のUIで見れる
http://noneblr.com/
こんな感じになる
login押すと権限求められるけど怖いからそれはやってない</description>
    </item>
    
    <item>
      <title>Vue.jsのちょっとしたこと</title>
      <link>https://yaasita.github.io/2017/04/14/vuejs-tips</link>
      <pubDate>Fri, 14 Apr 2017 15:57:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/14/vuejs-tips</guid>
      <description> v-on=&amp;ldquo;click&amp;rdquo;とmodelは一緒に使えない  watchで監視する
 https://github.com/vuejs/vue/issues/1146
   ある要素だけが繰り返すわけじゃないときはtemplateで挟むとよい &amp;lt;template v-for=&amp;quot;item in items&amp;quot;&amp;gt; &amp;lt;a&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;/template&amp;gt;  https://jp.vuejs.org/v2/guide/list.html
hash操作はリアクティブにならない https://jp.vuejs.org/v2/guide/reactivity.html
vm.b = 2 // NG Vue.set(object, key, value) // OK  </description>
    </item>
    
    <item>
      <title>gpg鍵を変えた</title>
      <link>https://yaasita.github.io/2017/04/09/update-gpg-key</link>
      <pubDate>Sun, 09 Apr 2017 23:28:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/09/update-gpg-key</guid>
      <description>https://keybase.io/yaasita
有効期限を付けて1年毎に交換するのは止めよう
keybase.ioの更新がめんどくさすぎる
失効証明書だけ取っておいてどっか保存しておけば十分な気がしてきた
ちなみに一回鍵消してもう一回連携やりなおしたら、Invitations が 24 まで増えたんだけどこれ無限増殖できるのでは・・・</description>
    </item>
    
    <item>
      <title>Google Cloud Shellのディレクトリ削除</title>
      <link>https://yaasita.github.io/2017/04/06/gcp-shell-homedata</link>
      <pubDate>Thu, 06 Apr 2017 00:21:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/06/gcp-shell-homedata</guid>
      <description>120日で削除されるらしい
It&#39;s been over 120 days since you opened Cloud Shell from the Google Cloud Platform console. In 7 days, your Cloud Shell home directory will be automatically scheduled for deletion.  </description>
    </item>
    
    <item>
      <title>ginを使ってechoをLiveReload</title>
      <link>https://yaasita.github.io/2017/04/03/gin-live-reload</link>
      <pubDate>Mon, 03 Apr 2017 00:05:20 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/03/gin-live-reload</guid>
      <description> Golangのweb frame workの Echo のライブリロード
ginがproxyしてくれるのでechoサーバのポートを教えてくれればよろしくリコンパイルしてくれる
gin --appPort 8080 r go run server.go  CompileDaemonだとこんな感じか
go get github.com/githubnemo/CompileDaemon CompileDaemon -command=&amp;quot;./run.sh&amp;quot; -include=&amp;quot;*.go&amp;quot;   参考リンク  https://github.com/codegangsta/gin
 https://github.com/githubnemo/CompileDaemon
 https://goo.gl/gp6L9z
  </description>
    </item>
    
    <item>
      <title>複数ファイルアップロードの実装</title>
      <link>https://yaasita.github.io/2017/04/02/multiple-upload</link>
      <pubDate>Sun, 02 Apr 2017 04:18:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/02/multiple-upload</guid>
      <description>multiple指定してuploadフォーム作るときの話
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;files&amp;quot; multiple /&amp;gt;  で複数ファイル選択できるが
Perl CGIで受けるときに↓みたいにすると
my @files = $q-&amp;gt;param(&#39;files&#39;); for my $filename (@files) { my $fn = decode(&amp;quot;UTF-8&amp;quot;, $filename); move($q-&amp;gt;tmpFileName($filename), &amp;quot;/path/to/dir&amp;quot;); }  iOSで選択するとfilenameが全部image.jpgでPOSTされてしまう可能性があるのでダメ
(AndroidとかはOK)
なのでこんな感じにする
my @fhs = $q-&amp;gt;upload(&#39;files&#39;); my %fname_count; for my $fh (@fhs){ my $out_filename = non_overlapping_filenames(&amp;quot;$fh&amp;quot;); my $io_handle = $fh-&amp;gt;handle; open (my $wr,&amp;quot;&amp;gt;&amp;quot;, $out_filename) or die $!; while (&amp;lt;$io_handle&amp;gt;){ print $wr $_; } close $wr; push(@result, decode(&amp;quot;UTF-8&amp;quot;,&amp;quot;$fh&amp;quot;)); }  あと古めのアンドロイドはmultiple指定しても複数ファイル選択ができない</description>
    </item>
    
    <item>
      <title>Vimの副ファイル</title>
      <link>https://yaasita.github.io/2017/03/30/vim-alternate-file</link>
      <pubDate>Thu, 30 Mar 2017 01:46:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/30/vim-alternate-file</guid>
      <description>なんか検索に引っかからないのでメモ
英語で the alternate file ってやつを取るときは Ctrl-^コマンドでやる
日本語配列だとCtrl-6かな
日本語ヘルプだと代替ファイルって訳になってるけど
E23: 副ファイルはありません  のエラーになるんだよな
というわけで
alternate file = 代替ファイル = 副ファイル
という認識で</description>
    </item>
    
    <item>
      <title>DockerでAUFSを使わない</title>
      <link>https://yaasita.github.io/2017/03/21/do-not-use-aufs</link>
      <pubDate>Tue, 21 Mar 2017 23:06:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/21/do-not-use-aufs</guid>
      <description>AUFSっていうか/var/lib/dockerに置きたくないとかそういう話
Dockerでもsystemd-nspawnよろしくそのディレクトリで即座にコンテナ上げたいとき
 要するに /proc, /dev, /sys, /net あたりを外して全部bindしちゃえばよかった</description>
    </item>
    
    <item>
      <title>AWSソリューションアーキテクト</title>
      <link>https://yaasita.github.io/2017/03/18/aws-test</link>
      <pubDate>Sat, 18 Mar 2017 23:56:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/18/aws-test</guid>
      <description>なんか必要になったということで取ってきた
総合スコア: 74% トピックレベルのスコア: 1.0 高可用性、コスト効率、耐障害性、スケーラブルなシステムの設計: 72% 2.0 実装/デプロイ: 83% 3.0 セキュリティ: 72% 4.0 トラブルシューティング: 80%  勉強につかったサイト
https://aws.koiwaclub.com/
細かい数字とか覚えるよりもどんなサービスなのかなーくらいが頭に入ってれば良さげ
かかる費用は
模擬試験＋本試験=2160+16200=18360円
だった</description>
    </item>
    
    <item>
      <title>Vue.jsとモーダルウィンドウ</title>
      <link>https://yaasita.github.io/2017/03/04/vuejs-modal</link>
      <pubDate>Sat, 04 Mar 2017 02:29:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/04/vuejs-modal</guid>
      <description> 参考実装 slotで後から要素を上書きすればOK
 https://github.com/yaasita/vuejs-modal
参考リンク  https://jp.vuejs.org/v2/examples/modal.html
  </description>
    </item>
    
    <item>
      <title>Vue.jsでドラッグ＆ドロップリスト</title>
      <link>https://yaasita.github.io/2017/02/20/draggable-list</link>
      <pubDate>Mon, 20 Feb 2017 23:17:28 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/20/draggable-list</guid>
      <description> Vue.js 2.1.10でやってみる
https://github.com/yaasita/vuejs-dad-box
 並び変え終わったらdragendで
var request_url = &amp;quot;https://hogehogehoge&amp;quot; var req = new XMLHttpRequest(); req.open(&#39;POST&#39;, request_url, false); req.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;); req.send(JSON.stringify(this.boxes));  とかやってどっかに飛ばす
んで後ろ側で
$sort_json = json_decode(file_get_contents(&amp;quot;php://input&amp;quot;),true);  とかやって受けた
実際は毎回更新させるのは重いだろうし、交換したDOM二つだけをjsonに乗せるとか工夫の余地あり
参考リンク  多分Vue.js 1 時代のやつ
 Vue.jsのリストレンダリングとhtml5のドラッグ＆ドロップの実装
  ネイティブ HTML5 ドラッグ＆ドロップ
  </description>
    </item>
    
    <item>
      <title>Vimのエンコード周り</title>
      <link>https://yaasita.github.io/2017/02/17/vim-encodeing</link>
      <pubDate>Fri, 17 Feb 2017 23:56:59 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/17/vim-encodeing</guid>
      <description>下図参照
https://yaasita.tumblr.com/post/157354717792
      var tumblr_api = new Vue({ el: &#39;#tumblr-api&#39;, data: { tumblr_api_url: &#34;https://api.tumblr.com/v2/blog/yaasita.tumblr.com/posts/photo?id=157354717792&amp;api_key=jbUOCHVG82yLvRKfRsyLwTTIyYQAhNiF2WZ1v9DJQn0aNuswQg&amp;jsonp=img.callback&#34;, } }); var img = new Vue({ el: &#39;#tumblr-image&#39;, data: { images: [ ], }, methods: { callback: function(data){ var photos = data.response.posts[0].photos; hoge = photos; for(var i=0;i</description>
    </item>
    
    <item>
      <title>Vue.js内のメソッドはコロン省略しない方が良い</title>
      <link>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs</link>
      <pubDate>Fri, 17 Feb 2017 02:06:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs</guid>
      <description>InternetExplorer11で
SCRIPT1003: &#39;:&#39; がありません。  というエラーになるから
// OK var ok = new Vue({ el: &#39;#example1&#39;, data: { }, methods: { HogeMethod: function(){ } } }); // NG var ng = new Vue({ el: &#39;#example2&#39;, data: { }, methods: { HogeMethod(){ } } });  chromeとかMicrosoft Edgeとかなら良いんだけどね</description>
    </item>
    
    <item>
      <title>relをtumblrテーマに加える</title>
      <link>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr</link>
      <pubDate>Tue, 14 Feb 2017 01:05:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr</guid>
      <description>tumblrのテーマをDefaultにしてみた
一点気になったのは
リンクがこんな感じでrel属性が指定されてない
&amp;lt;a href=&amp;quot;{PreviousPage}&amp;quot; class=&amp;quot;left&amp;quot;&amp;gt; &amp;lt;a rel=&amp;quot;next&amp;quot; href=&amp;quot;{NextPage}&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;  これだとvimiumの[[, ]]コマンドで辿れないのでそこだけ修正した
 修正後のテーマ
 https://gist.github.com/yaasita/40831000ea20c85f20eeccaa7de5c9c3
  参考リンク
 rel=”next”とrel=”prev” の使い方
   </description>
    </item>
    
    <item>
      <title>閉じるボタンとVue.js</title>
      <link>https://yaasita.github.io/2017/02/07/close-button-with-vuejs</link>
      <pubDate>Tue, 07 Feb 2017 23:59:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/07/close-button-with-vuejs</guid>
      <description>box並べて閉じるボタンつけて、押されたらDOM消して何かするみたいなよくあるインターフェイス
Vue.js使って書いてみた
すごい便利
 https://github.com/yaasita/vuejs-close-button</description>
    </item>
    
    <item>
      <title>FreenomのドメインはWebサイトないと消えちゃう</title>
      <link>https://yaasita.github.io/2017/02/03/freenom-deletes-freely</link>
      <pubDate>Fri, 03 Feb 2017 02:46:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/03/freenom-deletes-freely</guid>
      <description>だそうです
Dear yamasita yamasita, The Freenom Review Team has visited your website today. Unfortunately we have to say that today we cancelled your domain YAASITA.ML. The reason for the cancellation is that the website address you used for your free domain name was not accessible or did not follow the guidelines set in our terms and conditions. At this stage, anyone, including yourself, is able to (re)register the cancelled domain YAASITA.</description>
    </item>
    
    <item>
      <title>hostとdigコマンドの挙動が違う時</title>
      <link>https://yaasita.github.io/2017/01/27/host_and_dig_commands_are_different</link>
      <pubDate>Fri, 27 Jan 2017 01:52:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/27/host_and_dig_commands_are_different</guid>
      <description>名前を引くときにhostコマンドでは返ってくるがdigだとおかしくなるときがある
こんな感じにすれば同じになる
host example.net. dig +nodnssec +noedns +noadflag example.net. a  WN-G300GRはadビット立ててると応答すらしないらしい</description>
    </item>
    
    <item>
      <title>GMOのConoha VPS使ってみた</title>
      <link>https://yaasita.github.io/2017/01/22/conoha-vps</link>
      <pubDate>Sun, 22 Jan 2017 23:51:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/22/conoha-vps</guid>
      <description>非常に良い
さくらVPSより良いかもしれない
 DNSサーバ無料
 OP25B無し
 SSD 20GB
 初期費用なし
 転送量無制限
 時間課金方式と月額方式のハイブリット
  今はコンテナ技術でサクッと移動できちゃうので、
安いクラウドサービス渡り歩くのも良いと思った</description>
    </item>
    
    <item>
      <title>BCCヘッダを落とすのは誰か</title>
      <link>https://yaasita.github.io/2017/01/22/who_drops_bccheader</link>
      <pubDate>Sun, 22 Jan 2017 00:48:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/22/who_drops_bccheader</guid>
      <description>BCCヘッダは転送しないで、MTA側で消されるというのは有名な話だけど
実際どんな感じなのか
まずメーラーでBCCを指定して送ったとする
この時BCCヘッダはどのタイミングで消えるか？という問題
MUA(thunderbird等) -&amp;gt; 送信側MTA(postfix等) -&amp;gt; 受信側MTA(postfix等)  thunderbird まずthunderbirdからBCCで送信した場合はそもそもBccヘッダはつけない(Icedove/45.6.0で検証)
envelope toには存在するがそもそもBccヘッダなんてものを書かない
postfix postfixもデフォルトではBccヘッダは落とすようになっている
しかしこの設定を変更すればBccヘッダを落とさないでそのまま配送される
message_drop_headers = bcc, content-length, resent-bcc, return-path   参考
 http://www.postfix.org/postconf.5.html#message_drop_headers
   まとめ 本来見られちゃいけないヘッダをMTAに渡して、多分消してくれるだろうと期待するのはあまりよくないと思う
具体的にはBccヘッダまで綺麗に書いて sendmail -t で送るよりはちゃんとenvelope to を指定して送った方が安全度高い
要するにthunderbirdみたいに送るべき</description>
    </item>
    
    <item>
      <title>新旧リダイレクト</title>
      <link>https://yaasita.github.io/2017/01/16/redirect-githubpage</link>
      <pubDate>Mon, 16 Jan 2017 23:36:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/16/redirect-githubpage</guid>
      <description> middlemanからの移行に際してリンクが壊れまくった
GoogleのSearch Console
https://yaasita.tumblr.com/post/155945715637 
とりあえずJavaScriptで新URL案内すればいいか
 こんな感じ
https://yaasita.tumblr.com/post/155945774152 
旧ページ  記事ページ
 https://yaasita.github.io/2010/08/30/5917.html
  タグページ
 https://yaasita.github.io/tags/soft.html
  年ページ
 https://yaasita.github.io/2008.html
   </description>
    </item>
    
  </channel>
</rss>
