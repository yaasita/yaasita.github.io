<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on # cd ~yaasita</title>
    <link>https://yaasita.github.io/post/</link>
    <description>Recent content in Posts on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 05 Nov 2020 02:58:38 +0900</lastBuildDate>
    
	<atom:link href="https://yaasita.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWSのt4gインスタンスを試す</title>
      <link>https://yaasita.github.io/2020/11/05/t4g-instance/</link>
      <pubDate>Thu, 05 Nov 2020 02:58:38 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/11/05/t4g-instance/</guid>
      <description>新しくt4gインスタンスが出たみたいなので試してみた
cpuminer アルゴリズム=lyra2rev2 で測定
   name cpu memory hashrate(kH/s)     自宅PC Core i5-4460 3.20GHz 4コア 16G 384   ノートPC LB-C110B Celeron 1037U 1.80GHz 2コア 8G 79   t4g.micro (CPUクレジットあり) ARM CPU 2コア 1G 233   t4g.micro (CPUクレジットなし) ARM CPU 2コア 1G 24   aws lightsail (t2.nano) Xeon E5-2676 v3 2.40GHz 1コア 512M 81    前回記事
まとめ t4g良いかもしれない</description>
    </item>
    
    <item>
      <title>hettyはmitmproxyの代わりになる？</title>
      <link>https://yaasita.github.io/2020/10/04/hetty/</link>
      <pubDate>Sun, 04 Oct 2020 00:50:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/10/04/hetty/</guid>
      <description>mitmproxyみたいにhttpsのリクエストを覗くツール
https://github.com/dstotijn/hetty
使い方は, CAの鍵と証明書を用意して
hetty -cert cacert.pem -key cakey.pem  でOK
8080でlistenするのでhttp proxyとして指定する
管理画面はproxyとて設定したブラウザで以下のURLから見れる
http://hetty.proxy/
感想
 mitmproxyより重い気がする GUIでリクエストを見れるのは便利 mitmdumpとかしないでも簡単に見れるのはとても嬉しい 検索機能は今後追加予定？ リクエストをreplyする機能も追加予定みたい  まとめ
今後に期待
今はmitmweb使う方が良いと思う</description>
    </item>
    
    <item>
      <title>Microsoft IDのOpenID connect</title>
      <link>https://yaasita.github.io/2020/09/28/oidc/</link>
      <pubDate>Mon, 28 Sep 2020 02:55:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/09/28/oidc/</guid>
      <description>Microsoft ID プラットフォームと OpenID Connect プロトコル
これを見ると response_mode = form_post
に対応してるが, これはid_token(と指定した場合はstate)がPOSTで渡ってくるのだが、chrome80で導入された サードパーティCookieの規制により
Cookieが渡ってこない
そのためセッションと紐付けるのに面倒になりそう
まあnonceからセッションを紐付けられる値を入れておけば何とかなりそうではあるが・・・
jwt等をCookieに入れて、サーバー側でセッション用のストレージを持たない場合は厳しい気がする
なので、response_mode = fragment を指定するか、SameSite=None; SecureをCookieの属性に付与するかだけど、fragmentが良いんじゃないかなぁ・・・・
参考リンク  OpenID Connect 全フロー解説  </description>
    </item>
    
    <item>
      <title>maildir形式のファイルをgmailに移す</title>
      <link>https://yaasita.github.io/2020/08/31/maildir-to-gmail/</link>
      <pubDate>Mon, 31 Aug 2020 03:36:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/08/31/maildir-to-gmail/</guid>
      <description>IMAPのAPPENDコマンドでmaildir形式のファイルをGmailに送る
#!/usr/bin/env node &amp;quot;use strict&amp;quot;; const simpleParser = require(&amp;quot;mailparser&amp;quot;).simpleParser; const { ImapFlow } = require(&amp;quot;imapflow&amp;quot;); const client = new ImapFlow({ host: &amp;quot;imap.gmail.com&amp;quot;, port: 993, secure: true, auth: { user: &amp;quot;hoge@gmail.com&amp;quot;, pass: &amp;quot;password&amp;quot;, }, }); const fs = require(&amp;quot;fs&amp;quot;); (async () =&amp;gt; { const mail = fs.readFileSync( process.argv[2], &amp;quot;utf8&amp;quot; ); const parsed = await simpleParser(mail); await client.connect(); await client.append(&amp;quot;INBOX&amp;quot;, mail, [&amp;quot;\\Seen&amp;quot;], parsed.date); await client.logout(); })().catch((e) =&amp;gt; { console.log(e); process.exit(1); });  </description>
    </item>
    
    <item>
      <title>chromebookのLinuxが新しくなってた</title>
      <link>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</link>
      <pubDate>Sun, 30 Aug 2020 04:28:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</guid>
      <description>Linuxを消して、また入れたら良くなってた
 Debianが10になった 日本語が打てる(ただ表示はバグる) 絵文字が見れる ターミナルがタブに対応した  </description>
    </item>
    
    <item>
      <title>authorized_keysを適当に更新しない</title>
      <link>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</link>
      <pubDate>Wed, 08 Jul 2020 15:14:42 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</guid>
      <description>概要 sshの公開鍵認証で複数人が使うシステムのauthorized_keysを場当たり的に更新してしまうと、誰の鍵が入ってるか分からなくなる
誰の鍵が入ってるか分かるようにした方が良いと思う
スクリプト こんなスクリプトを書いた
使い方はREADME.md参照
https://github.com/yaasita/ssh-keys-manager
その他  使えるならsshの証明書認証も検討した方が良いかも ssh -F でconfig指定できるけど、~/.ssh/configに置いたときと挙動が違うのでスクリプト内にconfig入れる場合は注意  </description>
    </item>
    
    <item>
      <title>Google Domainsを使ってみた</title>
      <link>https://yaasita.github.io/2020/06/03/google-domains/</link>
      <pubDate>Wed, 03 Jun 2020 02:59:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/06/03/google-domains/</guid>
      <description>自分のドメインを
Value Domainから Google Domains へ移管してみた
感想
 .net, .com 等は安い .jp は高い whois 代行は標準サービス 標準の権威DNSサーバーは微妙  GCPのGoogle Cloud DNSが使えるわけではない APIでの更新も難しそう HTTPリダイレクトの機能がついてるのは嬉しい ダイナミックDNSはある DNSSECは簡単にできそう SSHFPレコードを設定できる    まとめ
みんな使うと良いと思います
 </description>
    </item>
    
    <item>
      <title>DoHを試す</title>
      <link>https://yaasita.github.io/2020/05/10/doh/</link>
      <pubDate>Sun, 10 May 2020 03:22:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/10/doh/</guid>
      <description>DNS over HTTPSを試す
こんな構成で作る
Nginx -&amp;gt; doh-httpproxy -&amp;gt; systemd-resolved  インストール
doh-proxy pip3でインストールすればOK
pip3 install doh-proxy  以下のような設定でserviceを作る
/etc/systemd/system/doh-httpproxy.service
[Unit] Description=doh-httpproxy After=nginx.service [Install] WantedBy=multi-user.target [Service] ExecStart=/usr/local/bin/doh-httpproxy --upstream-resolver=127.0.0.53 --port 8080 --listen-address 127.0.0.1 Nginx側設定例
server { listen 443 ssl http2; server_name doh.example.net; ssl_certificate /etc/letsencrypt/live/doh.example.net/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/doh.example.net/privkey.pem; location /dns-query { proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } }  確認
curl --doh-url https://doh.example.net/dns-query google.co.jp   </description>
    </item>
    
    <item>
      <title>BigQueryのカラムタイプ変更</title>
      <link>https://yaasita.github.io/2020/05/09/bigquery-type-change/</link>
      <pubDate>Sat, 09 May 2020 04:42:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/09/bigquery-type-change/</guid>
      <description>BigQueryのカラム変更はREQUIREDをNULLABLEにする以外は出来ません
テーブル スキーマの手動変更
作り直すしかないんですが、分割テーブルだともう一手間必要ですよという話
例えば以下のように分割テーブルを作るとします
bq mk --dataset test bq mk --table \ --time_partitioning_type DAY \ test.first  データを投入
echo -e &amp;quot;1\thoge&amp;quot; &amp;gt; /tmp/data.tsv echo -e &amp;quot;2\thuga&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv echo -e &amp;quot;3\tabcd&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200501&#39; /tmp/data.tsv id:NUMERIC,description:STRING bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200502&#39; /tmp/data.tsv id:NUMERIC,description:STRING  取り込み時間別に分割されているのが分かります
echo &amp;quot;#standardSQL&amp;quot; &amp;gt; /tmp/query.sql echo &#39;select _PARTITIONTIME as pt, count(*) as count from test.first group by _PARTITIONTIME order by pt;&#39; &amp;gt;&amp;gt; /tmp/query.</description>
    </item>
    
    <item>
      <title>express.jsでpostのrawBodyを取得</title>
      <link>https://yaasita.github.io/2020/04/28/rawpostdata/</link>
      <pubDate>Tue, 28 Apr 2020 01:00:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/04/28/rawpostdata/</guid>
      <description>multipart/form-dataでPOSTされた奴を、処理するCloud functionsを書いてて必要になったので
 呼び出し側はこんな感じでやってる
  </description>
    </item>
    
    <item>
      <title>microk8sとskaffold</title>
      <link>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</link>
      <pubDate>Sun, 29 Mar 2020 03:24:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</guid>
      <description>microk8sとskaffoldをこんな感じで使う

インストール
snap install microk8s --class microk8s.kubectl config view --raw &amp;gt; ~/.kube/config  必要サービスの起動
microk8s.enable dns registry storage skaffold dev --no-prune=false --cache-artifacts=false --default-repo localhost:32000 -f skaffold.yaml  こんな感じにやると、リポジトリ部分を読み替えてくれるので便利
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }    </description>
    </item>
    
    <item>
      <title>GKEでCloud SQL Proxyをsocketで使う</title>
      <link>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</link>
      <pubDate>Fri, 28 Feb 2020 04:08:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</guid>
      <description>GKEでもGAEみたいにCloud SQLに繋げたい場合の話
公式ドキュメントのサンプルだとこんな感じにport接続にしてる
https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/master/cloudsql/mysql_wordpress_deployment.yaml
socket接続の場合はこんな感じ
 参考
k8s サイドカーコンテナについて
 </description>
    </item>
    
    <item>
      <title>続 chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/17/backslash-with-vim/</link>
      <pubDate>Fri, 17 Jan 2020 17:22:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/17/backslash-with-vim/</guid>
      <description>前回 の続き
以下をvimrcに追記して事なきを得た
inoremapって非ASCII文字でも行けるみたい
inoremap ¥ \ cnoremap ¥ \  </description>
    </item>
    
    <item>
      <title>chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/11/chromebook-backslash/</link>
      <pubDate>Sat, 11 Jan 2020 15:47:07 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/11/chromebook-backslash/</guid>
      <description>今持ってるchromebookだとバックスラッシュ(0x5C)が入らない
半角モードにして￥キーを押すとU+00A5が入力されてしまう
入力には全角モードにして、￥キー押した後に変換して、バックスラッシュを選択する必要がある
もしくは、Linux内なら、fcitx経由で入力すれば半角￥キーでバックスラッシュになった
WindowsとかMacなら一発だけど、これは不便かも・・・プログラミングの時にも困るし・・・

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }    </description>
    </item>
    
    <item>
      <title>Github Pagesになってるリポジトリをチェック</title>
      <link>https://yaasita.github.io/2020/01/07/check-github-pages/</link>
      <pubDate>Tue, 07 Jan 2020 18:55:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/07/check-github-pages/</guid>
      <description>どのリポジトリがGithub Pagesの設定がされているか？
調べたくなったので・・・
Github pagesの設定されてるリポジトリ一覧を簡単に確認できればいいのに・・・
  </description>
    </item>
    
    <item>
      <title>GCPの外部IPアドレスが有料になる件</title>
      <link>https://yaasita.github.io/2020/01/06/gcp-ex-ip/</link>
      <pubDate>Mon, 06 Jan 2020 23:06:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/06/gcp-ex-ip/</guid>
      <description>外部IPが有料になりそうだからどうしようかという話
一部では無料範囲内なら課金されないみたいな書き方もされてるけど、今月の請求には不穏な項目がある
Credit External IPs will not be charged until April 1, 2020.  
んで、外部IPを無しにして、gcloud compute ssh で繋げるのは良いんだけど、外部IPが無いと外と通信できないからapt installもできない。。。。
あと、上記コマンドはsshポートを解放してないと駄目ぽい（正確にはIAPからのアクセスを許可すれば良いだけぽいが）
とりあえず課金されてから考えるか・・・
参考リンク  外部IPを持たないGCEインスタンスでweb開発 GCP/GCE の固定グローバルIPアドレス、2020年より有料化   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }    </description>
    </item>
    
    <item>
      <title>chromebookの日本語入力</title>
      <link>https://yaasita.github.io/2020/01/01/chromebook-japanese/</link>
      <pubDate>Wed, 01 Jan 2020 13:27:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/01/chromebook-japanese/</guid>
      <description>明けましておめでとうございます。
chromebookで日本語入力する場合はローカルの場合はfcitx-mozcを使って入力
リモートに接続する場合は、一旦踏み台サーバーを経由して、X転送したqterminalを使っている
ssh humidai-server -XC export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx fcitx qterminal  自分の環境では-Cオプションを付けない場合は800kbpsくらい通信するが、つけると100kbpsになるので外でやる時にはつけた方が良さそう
回線が細いテザリング環境では ttyd を立てて、ポートフォワーディングでつないだ方が良いかも
Ctrl-wがchromeのタブ閉じになってしまうので微妙かなと思ったんだけど、「その他のツール(L)」 =&amp;gt; 「ショートカットを作成」からアプリとして作れば、Ctrl-wも使えた
こっちなら日本語入力も出来るのでこっちの方が良いかもしれない
通信量も1kbps位だし
 </description>
    </item>
    
    <item>
      <title>再度hugoアップデート</title>
      <link>https://yaasita.github.io/2019/12/24/hugo-update2/</link>
      <pubDate>Tue, 24 Dec 2019 17:58:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/24/hugo-update2/</guid>
      <description>前回からまたアップデート
hugoのバージョンを 0.56.3 =&amp;gt; v0.62.0 まで上げた
注意点としては, v0.58.0 から .Pagesの挙動が変わっているので
以下の通り、.Site.RegularPages に変更する必要がある
Building sites … WARN 2019/12/23 17:34:34 In the next Hugo version (0.58.0) we will change how $home.Pages behaves. If you want to list all regular pages, replace .Pages or .Data.Pages with .Site.RegularPages in your home page template. あとインラインのHTMLがデフォルトで削除されるので使ってたらコレもconfig.tomlへ追記
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true hardWraps = true 最近非互換のバージョンアップ多くない？
アップデートがめんどくさくなってきたな。。。</description>
    </item>
    
    <item>
      <title>chromebookが最高だった</title>
      <link>https://yaasita.github.io/2019/12/23/chromebook/</link>
      <pubDate>Mon, 23 Dec 2019 05:58:32 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/23/chromebook/</guid>
      <description>ASUS の C434TA-AI0084 を買ったのでレビュー
chromeOS  起動もアプリの動作も全体的に速くてとても良い smartlockが失敗する時がある  解除がちょっと遅い10秒くらい待たされる   chromeの複数ユーザー機能が使えない  多重ログイン機能はあるけどちょっと微妙  別ユーザーへスイッチする場合はsmartlockで解除できない 別ユーザー側のAndroidアプリ、Linux環境は使えない(chromeだけ) 後述のLinux環境でchromium入れてそこでアカウント切り替えする手もある 同時にログインできないだけなので、別ユーザを追加してスイッチすることは可能      ディスプレイ  タブレットには少し重い 解像度は 2194x1234 ～ 1182x665の範囲で調整可能 起動毎にバックライトの明るさがリセットされてしまう(音量は記憶してるのに。。。) グレア液晶は問題なし綺麗  テザリング  Moto E5 とbluetoothでのテザリングが出来なかった  とりあえずUSBテザリングは刺すだけで使えたので良しとしてます    キーボード  Deleteキーが無いけど、Alt + Backspaceで問題なし かな/英語キーと, 半角全角切り替えキーがあるのでMac派でもWindows派でも大丈夫かも キーボードのバックライトは消せない ←Alt + 明るさキーで消せました  Androidアプリ  ほとんどのアプリは問題なかった 大画面でAndroidアプリ使うのは割と快適(例 tumblr) Android版Excelでとりあえず見るのはOKそう タウンWifiみたいなWifiを制御するアプリは上手く動かないかもしれない(要検証) パズドラは動かない  Linux環境 OS  Debian9なのでDebian10にアップデートされるのを期待 使い始めるのはすごく簡単、設定から有効ボタンを押すだけ 丸ごとLinux環境バックアップ機能あり  バックアップは丸ごとtarで固めて1ファイルにしてくれるのでハンドリングはしやすい   USB共有機能あり /opt/google/cros-containers/bin/.</description>
    </item>
    
    <item>
      <title>GCP Cloud Functions内からサービスアカウントのtoken取る</title>
      <link>https://yaasita.github.io/2019/12/08/service-account-in-cf/</link>
      <pubDate>Sun, 08 Dec 2019 05:12:12 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/08/service-account-in-cf/</guid>
      <description>Cloud Functionsからサービスアカウントのアクセストークンをどうやって取るの？と疑問に思ったので調べた
Google Compute Engineと同じ取り方でOK
&amp;quot;use strict&amp;quot;; const fetch = require(&amp;quot;node-fetch&amp;quot;); exports.handler = async (req, res) =&amp;gt; { const url = &amp;quot;http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/&amp;quot; + &amp;quot;[サービスアカウント名]/token&amp;quot;; const result = await fetch(url, { method: &amp;quot;GET&amp;quot;, headers: { &amp;quot;Metadata-Flavor&amp;quot;: &amp;quot;Google&amp;quot; } }); const token = await result.text(); console.log(token); res.status(200).send(&amp;quot;OK&amp;quot;); };  なんでドキュメントにも書いてある今更な事を書くかというと日本語ドキュメントには見出しが無いんですよね。。。。

まだ翻訳終わってないならまだしも（本当は英文のままで良いからタイトルくらいは残してほしいが) &amp;ldquo;Function Identity&amp;quot;とかクリックするとちゃんと日本語版あるんですよね
なんかメニューがバグってるのかな・・・
とりあえず英語版から探すのをオススメします&amp;hellip;
参考リンク
 関数ID Compute Metadata Server   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].</description>
    </item>
    
  </channel>
</rss>