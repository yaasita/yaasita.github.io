<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/post/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 14 Aug 2019 10:20:33 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>各種サーバの中間証明書の扱い</title>
      <link>https://yaasita.github.io/2019/08/14/ssl-capath/</link>
      <pubDate>Wed, 14 Aug 2019 10:20:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/14/ssl-capath/</guid>
      <description>中間証明書をどう設定するか問題
postfix smtpd_tls_cert_file = /etc/letsencrypt/live/example.net/cert.pem smtpd_tls_key_file = /etc/letsencrypt/live/example.net/privkey.pem smtpd_tls_CAfile = /etc/letsencrypt/live/example.net/chain.pem  Let&amp;rsquo;s Encryptの場合こんな感じ
smtpd_tls_CAfileに中間証明書を指定する
smtpd_tls_cert_fileにfullchain.pemを指定するやり方はNG
dovecot 10-ssl.conf
ssl_ca = &amp;lt;/etc/letsencrypt/live/example.net/chain.pem  これはダメ
この設定はクライアント証明書用ですので
正しくは、こんな感じに、まとめたやつを指定すればOK
ssl_cert = &amp;lt;/etc/letsencrypt/live/example.net/fullchain.pem  apache SSLCACertificateFileという設定はクライアント証明書用なのでここに入れない
SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem  dovecot同様に中間証明書もまとめて指定する
まとめ この問題はスマホのK-9 Mailでメール読もうとしたときに判明した
(突然CertPathValidatorExceptionって怒られた)
thunderbirdでメール読んでた時には発生しなかったのでなんだろなーと思ったんだけどこっちは多めにroot証明書入ってるみたいね

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   サーバー設定後はこんな感じで中間証明書まで確認したほうが良いかも
openssl s_client -connect example.org:465 -showcerts  thunderbirdだけで確認すると痛い目を見るよと言うお話でした</description>
    </item>
    
    <item>
      <title>虫よけスプレー</title>
      <link>https://yaasita.github.io/2019/07/29/musiyoke/</link>
      <pubDate>Mon, 29 Jul 2019 03:42:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/07/29/musiyoke/</guid>
      <description>虫除けスプレーで最近買ったこれが良かった
ベタベタしないので気にならない
フマキラー SKIN VAPEってやつかな
商品名はスキンベープミスト　200mlかも

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   そういや虫よけ剤に入ってるDEETって薬はなぜ虫が寄り付かないか謎らしい</description>
    </item>
    
    <item>
      <title>例のS3署名バージョン2について</title>
      <link>https://yaasita.github.io/2019/06/25/s3v2/</link>
      <pubDate>Tue, 25 Jun 2019 00:31:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/06/25/s3v2/</guid>
      <description>AWS S3の署名バージョン騒動
大丈夫ぽいけど一応調べた時につかったスクリプト
CloudTrailでログを有効化してからお使いください
 </description>
    </item>
    
    <item>
      <title>Cloud Runがすごく良い</title>
      <link>https://yaasita.github.io/2019/05/29/cloud-run/</link>
      <pubDate>Wed, 29 May 2019 21:42:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/05/29/cloud-run/</guid>
      <description>GCPのCloud Runがめっちゃ便利
覚えなきゃいけないルールは2つ
 Dockerにする事
 環境変数 $PORT のポート番号でlistenしてレスポンスを返す事
  これだけ
コマンドとかはこの辺見ればすぐできると思います
あと、Chunked Transferみたいな仕組みで進捗を返すみたいなAPIは難しいかもしれない
以下のようなプログラムでちょっとずつレスポンス返しても、バッファリングされてるみたいで、最後ドバっと返ってきた
 </description>
    </item>
    
    <item>
      <title>PKCEをJavaScriptで実装する</title>
      <link>https://yaasita.github.io/2019/04/29/pkce/</link>
      <pubDate>Mon, 29 Apr 2019 01:23:20 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/29/pkce/</guid>
      <description>code_verifier から code_challenge の生成方法について調べた
code_challenge_method=S256の場合は以下のような実装ロジックになる
node.jsで書いた
Oauth2のPKCE
base64エンコードじゃなくてbase64urlエンコードなのが注意点
 </description>
    </item>
    
    <item>
      <title>令和の対応に際して</title>
      <link>https://yaasita.github.io/2019/04/25/reiwa/</link>
      <pubDate>Thu, 25 Apr 2019 02:08:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/25/reiwa/</guid>
      <description>techrachoの記事
perlも追加でお願いします</description>
    </item>
    
    <item>
      <title>tarの差分バックアップ</title>
      <link>https://yaasita.github.io/2019/04/01/tar-backup/</link>
      <pubDate>Mon, 01 Apr 2019 16:12:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/01/tar-backup/</guid>
      <description>前回の続き
でctime変化しちゃってどうしたか？
ファイルサイズとファイル名を取っておいて差分を作ることにした
 こんな感じのスクリプトで、ファイル名 + tab + ファイルサイズで保存する
(厳密にやる場合はsha256とかで)
そんで現在のファイルリストも取って、差分をとる
diff -u previous.txt now.txt | egrep &amp;quot;^\+[^\+]&amp;quot; | perl -ple &#39;s/^\+//;s/\t.+//&#39; &amp;gt; tar.txt  あとは-Tオプションで差分のファイルだけをtarで固める
tar -cvaf hoge.tgz -T tar.txt  </description>
    </item>
    
    <item>
      <title>tarの-gオプションについて</title>
      <link>https://yaasita.github.io/2019/03/30/tar-g-option/</link>
      <pubDate>Sat, 30 Mar 2019 02:32:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/30/tar-g-option/</guid>
      <description>-g, &amp;ndash;listed-incremental
という増分バックアップに使われるオプションについてどうやって判定してるか？
それはctimeの変化を見ている
ctimeの変化で気をつけなければいけないことはハードリンクによるバックアップ
(rsync &amp;ndash;link-dest等)
例えば、以下のようなファイルが存在し
work/ `-- 1.txt  以下のコマンドを発行した場合
tar -g resume -cvf work.tar work/  初回なので当然全部がバックアップされる
このまま以下のコマンドを打てばディレクトリだけのバックアップになる(差分がないため)
tar -g resume -cvf work.tar work/  しかし、以下のようにハードリンクをするとctimeが変わってしまいバックアップ対象にリストされてしまう
stat work/1.txt # ctime確認 cp -al work work2 # linksを増やす stat work/1.txt # ctime更新されている tar -g resume -cvf work.tar work/ # 1.txtは対象になる rm -rf work2 # linksを減らす tar -g resume -cvf work.tar work/ # 1.txtは対象になる  なので、rsyncの差分バックアップの対象ディレクトリだったり、cp -alでのバックアップを取っている際はこれに注意する
うまく増分バックアップができなくなる
続き</description>
    </item>
    
    <item>
      <title>hugoアップデート</title>
      <link>https://yaasita.github.io/2019/03/12/hugo-update/</link>
      <pubDate>Tue, 12 Mar 2019 23:00:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/12/hugo-update/</guid>
      <description>久々にhugoをアップデート v0.41 =&amp;gt; v0.54まで上げた
ワーニング潰し アップデートに伴い
.Prev と .Nextが非推奨になったぽい マニュアル, コミット
なのでこれはそれぞれ以下のように修正すればOK(意味が逆なので分かりにくいけど)
 .Prev =&amp;gt; .NextPage
 .Next =&amp;gt; .PrevPage
  OGP設定 某会社でこのブログのRSSフィードをSlackに流していると聞いたので設定してみました
上手く表示できてますか？
修正箇所
themes/hugo-theme-geppaku/layouts/partials/header.html
 {{ if .IsHome }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;website&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}&amp;quot; /&amp;gt; {{ else }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}{{ .Page.Dir }}&amp;quot; /&amp;gt; {{ end }} &amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;{{ .</description>
    </item>
    
    <item>
      <title>Windows10のクリップボード履歴機能</title>
      <link>https://yaasita.github.io/2019/03/10/clipboard/</link>
      <pubDate>Sun, 10 Mar 2019 22:47:52 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/10/clipboard/</guid>
      <description>Windows10に標準でクリップボード履歴機能が付いたらしい
 https://www.atmarkit.co.jp/ait/articles/1903/08/news028.html
  Windows キー + Vで使えるようになる
cliborの方が使いやすそうな気がするけど、しばらくこっち使ってみる</description>
    </item>
    
    <item>
      <title>AlwaysOnSSL終了のお知らせ</title>
      <link>https://yaasita.github.io/2019/02/28/alwaysonssl/</link>
      <pubDate>Thu, 28 Feb 2019 01:44:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/02/28/alwaysonssl/</guid>
      <description>無料のSSL証明書AlwaysOnSSLがセキュリティ問題を指摘されてシャットダウンしたぽい
AlwaysOnSSL web security issues
S/MIME手に入るので良かったんだけどなぁ・・・
前回</description>
    </item>
    
    <item>
      <title>最近使ってる集中アプリ</title>
      <link>https://yaasita.github.io/2019/02/08/concentration/</link>
      <pubDate>Fri, 08 Feb 2019 00:52:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/02/08/concentration/</guid>
      <description>いろいろ試してみた
 Forest: 広告が邪魔
 Focus To-Do: 複雑でよく分からなかった
 ブロックタイマー: なんか画面が付きっぱなしになる
 FLIP: 勉強用かな操作がむずい
 Studyplus: なんかポモドーロぽいの使えなかった
  で結局Focus To-DoのWindowsアプリ版を使ってる</description>
    </item>
    
    <item>
      <title>ELB配下のどれか生きてるインスタンスのAPIを叩く</title>
      <link>https://yaasita.github.io/2019/01/21/post-under-elb/</link>
      <pubDate>Mon, 21 Jan 2019 03:24:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/01/21/post-under-elb/</guid>
      <description>構想

コード

ELBからインスタンス一覧引っ張る所はまだ書いてない
明けましておめでとうございます
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>スマホ変えた</title>
      <link>https://yaasita.github.io/2018/12/19/sumaho/</link>
      <pubDate>Wed, 19 Dec 2018 01:06:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/sumaho/</guid>
      <description>Moto E5 2GB/16GBってやつに変更した
Android8まで上がった
ついでにSIMもIIJ mioからLINEモバイルに変えた</description>
    </item>
    
    <item>
      <title>dynamodbオンデマンド</title>
      <link>https://yaasita.github.io/2018/12/19/dynamodb/</link>
      <pubDate>Wed, 19 Dec 2018 00:53:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/dynamodb/</guid>
      <description> re:Invent 2018で言われたアレ
DynamoDBオンデマンド
のベンチを取ってみた
 ベンチマークに使ったスクリプト
  結論  ほとんどDynamoDB ondemand でOKだと思うj
 オートスケールぽい挙動なのでちょっとずつスケールしてるぽい
 200とかそんくらいのスパイクアクセスがある場合はあらかじめ、プロビジョニングキャパシティにしておいた方が良いと思う
 ただし、オンデマンドの有効化は一日一回だけなので注意
  </description>
    </item>
    
    <item>
      <title>電源を変えた</title>
      <link>https://yaasita.github.io/2018/12/17/power-supply/</link>
      <pubDate>Mon, 17 Dec 2018 00:02:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/17/power-supply/</guid>
      <description>寒いせいでPCの調子が悪くなった
ANTEC(アンテック) NeoECO Classicシリーズ 650Wモデル NE650C
って3年くらい使った電源が、寒い日にうまくついてくれない。
（電源つけて2,3秒で再起動を繰り返す)
なので
KRPW-AK750W/88+ という玄人志向のやつに変更した
8000円くらいのやつ</description>
    </item>
    
    <item>
      <title>skypeのログフォーマットが変わってた</title>
      <link>https://yaasita.github.io/2018/12/02/skype2json/</link>
      <pubDate>Sun, 02 Dec 2018 01:28:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/02/skype2json/</guid>
      <description>のでちょっとスクリプト修正した
https://github.com/yaasita/skype2json
修正点  yarnじゃなくても良いと聞いたのでnpmにだけにした
 フォーマットが歴代合わせて3つあったので、3つスクリプト書いた(年代は適当)
 libに共通関数をまとめた
  なんか新しいフォーマットだと
nsp_dataってカラムにjsonで突っ込んでるみたいね。json型が無いSQLiteのツライところ
まとめ ころころフォーマットが変わるけどSQLiteになってるからSkypeは簡単にバックアップ出来て良い
LINEはどうしたもんか</description>
    </item>
    
    <item>
      <title>vimとtranslate-shellを連携する</title>
      <link>https://yaasita.github.io/2018/11/23/translate/</link>
      <pubDate>Fri, 23 Nov 2018 00:54:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/23/translate/</guid>
      <description>translate-shellが便利だ
vimrcにこんな感じに書く

英単語の意味をちょっと調べる  翻訳  なんか微妙に画面がバグってるけど、本当はちゃんと表示されてる
まとめ こういうちょっとした改善大事</description>
    </item>
    
    <item>
      <title>githubのwebhook受け取ってjenkins走らせる</title>
      <link>https://yaasita.github.io/2018/11/14/github2jenkins/</link>
      <pubDate>Wed, 14 Nov 2018 01:41:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/14/github2jenkins/</guid>
      <description>無かったので作りました
Github -&amp;gt; Mojolicious -&amp;gt; jenkins   </description>
    </item>
    
    <item>
      <title>HSTSの説明資料</title>
      <link>https://yaasita.github.io/2018/11/12/hsts/</link>
      <pubDate>Mon, 12 Nov 2018 01:24:39 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/12/hsts/</guid>
      <description>なんかで作ったので
HSTSとは HTTPでの通信を減らしよりセキュアなHTTPSを使うように促す仕組み
通常 通常HTTPリクエストをして、301、302等のリダイレクトによってHTTPSにアクセスし直す
が、HTTPでのやりとり部分に中間者攻撃のリスクが存在する

※厳密には301リダイレクトはブラウザがキャッシュするので2回目以降はサーバー側にリクエストしない
HSTS ヘッダ HSTSヘッダを受け取ると、ブラウザ側でHTTPをHTTPSに読み替えてリクエストする
通常のリダイレクトは違い、一旦 HSTSヘッダを受け取ると有効期間中は決してhttpによるリクエストをしない
(http:// ~ というリンクはブラウザ側で読み換える)

付与するヘッダーは以下のようなもの
strict-transport-security: max-age=31536000; includeSubDomains; preload   max-age: 有効時間（秒単位）
 includeSubDomains: サブドメインも含めるかどうか alis.to なら hoge.alis.to も有効になる
 preload: preloadに登録しても良いかどうか（後述）
  HSTS preload HSTS preloadは予め hstspreload.org に自分のサイトを登録しておいて
初回リクエスト時からHTTPSを有効にしておく仕組み

メリット・デメリット  メリット
 observatory の点数アップ (対外アピール）
 盗聴・中間者攻撃リスクを軽減しよりセキュアになる
  デメリット
 証明書の運用を失敗できない
 サブドメインを含め、HTTPでの運用を一切できなくなる
 ローカルでのテスト時に偽の証明書を無視しにくくなる
   通常だと出てくる証明書エラー無視のリンクが・・・</description>
    </item>
    
  </channel>
</rss>
