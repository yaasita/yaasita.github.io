<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/post/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 12 Mar 2019 23:00:51 +0900</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hugoアップデート</title>
      <link>https://yaasita.github.io/2019/03/12/hugo-update/</link>
      <pubDate>Tue, 12 Mar 2019 23:00:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/12/hugo-update/</guid>
      <description>久々にhugoをアップデート v0.41 =&amp;gt; v0.54まで上げた
ワーニング潰し アップデートに伴い
.Prev と .Nextが非推奨になったぽい マニュアル, コミット
なのでこれはそれぞれ以下のように修正すればOK(意味が逆なので分かりにくいけど)
 .Prev =&amp;gt; .NextPage
 .Next =&amp;gt; .PrevPage
  OGP設定 某会社でこのブログのRSSフィードをSlackに流していると聞いたので設定してみました
上手く表示できてますか？
修正箇所
themes/hugo-theme-geppaku/layouts/partials/header.html
 {{ if .IsHome }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;website&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}&amp;quot; /&amp;gt; {{ else }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}{{ .Page.Dir }}&amp;quot; /&amp;gt; {{ end }} &amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;{{ .</description>
    </item>
    
    <item>
      <title>Windows10のクリップボード履歴機能</title>
      <link>https://yaasita.github.io/2019/03/10/clipboard/</link>
      <pubDate>Sun, 10 Mar 2019 22:47:52 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/10/clipboard/</guid>
      <description>Windows10に標準でクリップボード履歴機能が付いたらしい
 https://www.atmarkit.co.jp/ait/articles/1903/08/news028.html
  Windows キー + Vで使えるようになる
cliborの方が使いやすそうな気がするけど、しばらくこっち使ってみる</description>
    </item>
    
    <item>
      <title>AlwaysOnSSL終了のお知らせ</title>
      <link>https://yaasita.github.io/2019/02/28/alwaysonssl/</link>
      <pubDate>Thu, 28 Feb 2019 01:44:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/02/28/alwaysonssl/</guid>
      <description>無料のSSL証明書AlwaysOnSSLがセキュリティ問題を指摘されてシャットダウンしたぽい
AlwaysOnSSL web security issues
S/MIME手に入るので良かったんだけどなぁ・・・
前回</description>
    </item>
    
    <item>
      <title>最近使ってる集中アプリ</title>
      <link>https://yaasita.github.io/2019/02/08/concentration/</link>
      <pubDate>Fri, 08 Feb 2019 00:52:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/02/08/concentration/</guid>
      <description>いろいろ試してみた
 Forest: 広告が邪魔
 Focus To-Do: 複雑でよく分からなかった
 ブロックタイマー: なんか画面が付きっぱなしになる
 FLIP: 勉強用かな操作がむずい
 Studyplus: なんかポモドーロぽいの使えなかった
  で結局Focus To-DoのWindowsアプリ版を使ってる</description>
    </item>
    
    <item>
      <title>ELB配下のどれか生きてるインスタンスのAPIを叩く</title>
      <link>https://yaasita.github.io/2019/01/21/post-under-elb/</link>
      <pubDate>Mon, 21 Jan 2019 03:24:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/01/21/post-under-elb/</guid>
      <description>構想

コード

ELBからインスタンス一覧引っ張る所はまだ書いてない
明けましておめでとうございます
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>スマホ変えた</title>
      <link>https://yaasita.github.io/2018/12/19/sumaho/</link>
      <pubDate>Wed, 19 Dec 2018 01:06:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/sumaho/</guid>
      <description>Moto E5 2GB/16GBってやつに変更した
Android8まで上がった
ついでにSIMもIIJ mioからLINEモバイルに変えた</description>
    </item>
    
    <item>
      <title>dynamodbオンデマンド</title>
      <link>https://yaasita.github.io/2018/12/19/dynamodb/</link>
      <pubDate>Wed, 19 Dec 2018 00:53:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/dynamodb/</guid>
      <description> re:Invent 2018で言われたアレ
DynamoDBオンデマンド
のベンチを取ってみた
 ベンチマークに使ったスクリプト
  結論  ほとんどDynamoDB ondemand でOKだと思うj
 オートスケールぽい挙動なのでちょっとずつスケールしてるぽい
 200とかそんくらいのスパイクアクセスがある場合はあらかじめ、プロビジョニングキャパシティにしておいた方が良いと思う
 ただし、オンデマンドの有効化は一日一回だけなので注意
  </description>
    </item>
    
    <item>
      <title>電源を変えた</title>
      <link>https://yaasita.github.io/2018/12/17/power-supply/</link>
      <pubDate>Mon, 17 Dec 2018 00:02:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/17/power-supply/</guid>
      <description>寒いせいでPCの調子が悪くなった
ANTEC(アンテック) NeoECO Classicシリーズ 650Wモデル NE650C
って3年くらい使った電源が、寒い日にうまくついてくれない。
（電源つけて2,3秒で再起動を繰り返す)
なので
KRPW-AK750W/88+ という玄人志向のやつに変更した
8000円くらいのやつ</description>
    </item>
    
    <item>
      <title>skypeのログフォーマットが変わってた</title>
      <link>https://yaasita.github.io/2018/12/02/skype2json/</link>
      <pubDate>Sun, 02 Dec 2018 01:28:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/02/skype2json/</guid>
      <description>のでちょっとスクリプト修正した
https://github.com/yaasita/skype2json
修正点  yarnじゃなくても良いと聞いたのでnpmにだけにした
 フォーマットが歴代合わせて3つあったので、3つスクリプト書いた(年代は適当)
 libに共通関数をまとめた
  なんか新しいフォーマットだと
nsp_dataってカラムにjsonで突っ込んでるみたいね。json型が無いSQLiteのツライところ
まとめ ころころフォーマットが変わるけどSQLiteになってるからSkypeは簡単にバックアップ出来て良い
LINEはどうしたもんか</description>
    </item>
    
    <item>
      <title>vimとtranslate-shellを連携する</title>
      <link>https://yaasita.github.io/2018/11/23/translate/</link>
      <pubDate>Fri, 23 Nov 2018 00:54:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/23/translate/</guid>
      <description>translate-shellが便利だ
vimrcにこんな感じに書く

英単語の意味をちょっと調べる  翻訳  なんか微妙に画面がバグってるけど、本当はちゃんと表示されてる
まとめ こういうちょっとした改善大事</description>
    </item>
    
    <item>
      <title>githubのwebhook受け取ってjenkins走らせる</title>
      <link>https://yaasita.github.io/2018/11/14/github2jenkins/</link>
      <pubDate>Wed, 14 Nov 2018 01:41:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/14/github2jenkins/</guid>
      <description>無かったので作りました
Github -&amp;gt; Mojolicious -&amp;gt; jenkins   </description>
    </item>
    
    <item>
      <title>HSTSの説明資料</title>
      <link>https://yaasita.github.io/2018/11/12/hsts/</link>
      <pubDate>Mon, 12 Nov 2018 01:24:39 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/12/hsts/</guid>
      <description>なんかで作ったので
HSTSとは HTTPでの通信を減らしよりセキュアなHTTPSを使うように促す仕組み
通常 通常HTTPリクエストをして、301、302等のリダイレクトによってHTTPSにアクセスし直す
が、HTTPでのやりとり部分に中間者攻撃のリスクが存在する

※厳密には301リダイレクトはブラウザがキャッシュするので2回目以降はサーバー側にリクエストしない
HSTS ヘッダ HSTSヘッダを受け取ると、ブラウザ側でHTTPをHTTPSに読み替えてリクエストする
通常のリダイレクトは違い、一旦 HSTSヘッダを受け取ると有効期間中は決してhttpによるリクエストをしない
(http:// ~ というリンクはブラウザ側で読み換える)

付与するヘッダーは以下のようなもの
strict-transport-security: max-age=31536000; includeSubDomains; preload   max-age: 有効時間（秒単位）
 includeSubDomains: サブドメインも含めるかどうか alis.to なら hoge.alis.to も有効になる
 preload: preloadに登録しても良いかどうか（後述）
  HSTS preload HSTS preloadは予め hstspreload.org に自分のサイトを登録しておいて
初回リクエスト時からHTTPSを有効にしておく仕組み

メリット・デメリット  メリット
 observatory の点数アップ (対外アピール）
 盗聴・中間者攻撃リスクを軽減しよりセキュアになる
  デメリット
 証明書の運用を失敗できない
 サブドメインを含め、HTTPでの運用を一切できなくなる
 ローカルでのテスト時に偽の証明書を無視しにくくなる
   通常だと出てくる証明書エラー無視のリンクが・・・</description>
    </item>
    
    <item>
      <title>徳丸さんのセキュリティ問題(CSRF)</title>
      <link>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</link>
      <pubDate>Sun, 11 Nov 2018 01:33:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</guid>
      <description>徳丸さんがCSRFの問題を出していたので考えてみる
問題：間違ったCSRF対策～初級編～
解答
https://github.com/yaasita/tokumaru-csrf-20181110
なんか最初はXMLHttpRequestとか駆使して、chgmailform.phpからtoken引っこ抜こうと思ったんだけど
CORSとかCORBで無理なんすよね
でよく見るとtokenが無いときの考慮がないよってやつでした
まとめ 最近のブラウザは良く出来てる</description>
    </item>
    
    <item>
      <title>mitmproxyが便利</title>
      <link>https://yaasita.github.io/2018/11/10/mitmproxy/</link>
      <pubDate>Sat, 10 Nov 2018 03:22:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/10/mitmproxy/</guid>
      <description>とっても便利なmitmproxyを使ってみた
概要 こんな感じでHTTPSなサイトも中間に入りこんでくれる
（root証明証を予め信頼しておく必要がある)
browser &amp;lt;---(指定のCA鍵で再署名)---- mitmproxy &amp;lt;---(HTTPSを一旦解く)----- web server  インストール apt install mitmproxy  設定 プライベートCAをやってるなら
 /etc/ssl/demoCA/private/cakey.pem
 /etc/ssl/demoCA/cacert.pem
  この２ファイルを結合する
こんな感じで mitmproxy-ca.pem って名前でどっかのディレクトリに置く
-----BEGIN ENCRYPTED PRIVATE KEY----- ... -----END ENCRYPTED PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----  実行 こんな感じで実行できる &amp;ndash;view-filter で表示させたいURLを絞れる
(hogedirの中にmitmproxy-ca.pemが入ってる)
mitmproxy --set confdir=/path/to/hogedir --view-filter m3u  画面中ではVimぽいキーバインドで色々操作できる
リクエストを選んで、wでストリームを保存できる
dump mitmproxyだけだと長いURLとかは省略されちゃったりするので、完全なものを見る場合にmitmdumpを使う
# getだけ抽出 mitmdump -nr /tmp/save -w outfile &amp;quot;~m get&amp;quot; # リクエスト一覧 mitmdump -nr /tmp/save  まとめ HTTPSのデバッグ時にめっちゃ便利</description>
    </item>
    
    <item>
      <title>CircleCIのキャッシュについて</title>
      <link>https://yaasita.github.io/2018/10/19/circleci/</link>
      <pubDate>Fri, 19 Oct 2018 03:03:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/10/19/circleci/</guid>
      <description>先に結論だけ
 キャッシュは一度書き込むとupdate出来ない
 キャッシュクリアは名前を変えて対応する
  以下具体例
以下のようなキャッシュをした際に
古いバージョンのライブラリが入ってしまった場合
- restore_cache: keys: - v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }} - v2-dependencies- - run: name: install dependencies command: | python3 -m venv venv . venv/bin/activate pip install -r requirements.txt - save_cache: paths: - ./venv key: v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }}  これを解消しようとして、以下のようにしてもcacheはupdateされない
- restore_cache: keys: - v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }} - v2-dependencies- - run: name: install dependencies command: | python3 -m venv venv .</description>
    </item>
    
    <item>
      <title>全文検索n-gram</title>
      <link>https://yaasita.github.io/2018/09/29/n-gram/</link>
      <pubDate>Sat, 29 Sep 2018 04:25:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/29/n-gram/</guid>
      <description>N-gramについて
検索とインデックスについて作った
検討資料用にどうぞ
https://gist.github.com/yaasita/ea31d7bbfc839fc859fd7d713800088b</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書のchain検証</title>
      <link>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</link>
      <pubDate>Sun, 23 Sep 2018 01:02:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</guid>
      <description>以下のようなチェインを検証したい時
AddTrust |_ ca1 |_ ca2 |_ hoge  こんな感じにコマンドを打つ
openssl verify -trusted /etc/ssl/certs/AddTrust_External_Root.pem \ -untrusted ca/ca1.pem \ -untrusted ca/ca2.pem \ hoge.pem*  verify -CAfileを指定して検証する例を見るけど、
インストールされてるデフォルトのrootCAも見ちゃうから
-no-CAfile, -no-CApathで無効化しなきゃだったりするのでこっちの方が良さそう</description>
    </item>
    
    <item>
      <title>Hugoをアップデート</title>
      <link>https://yaasita.github.io/2018/09/16/hugo-new-version/</link>
      <pubDate>Sun, 16 Sep 2018 15:48:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/16/hugo-new-version/</guid>
      <description>なんかこんなプルリクも来てたのでthemeもちょいと修正
たまにはhugoのbuild logみてwarning潰してかないとだな</description>
    </item>
    
    <item>
      <title>perlのクロージャ</title>
      <link>https://yaasita.github.io/2018/09/06/perl-closure/</link>
      <pubDate>Thu, 06 Sep 2018 02:43:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/06/perl-closure/</guid>
      <description>これでも良いけど
{ my $count; sub func { return ++$count; } }  最近ならこうstate使って
use feature qw(:5.10); sub func { state $count; return ++$count; }  ただstateって配列とかには使えない</description>
    </item>
    
  </channel>
</rss>
