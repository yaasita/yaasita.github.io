<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>life on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/life/</link>
    <description>Recent content in life on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 01 Apr 2023 01:54:35 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/categories/life/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二項分布の計算について</title>
      <link>https://yaasita.github.io/2023/04/01/binomial-distribution/</link>
      <pubDate>Sat, 01 Apr 2023 01:54:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/04/01/binomial-distribution/</guid>
      <description>100回コインを投げて80回以上表が出る確率
bingに聞いてみると
こんにちは、こちらはBingです。😊
コインを100回投げて、表が80回以上出る確率は、二項分布という統計学の分布を使って計算できます。1
二項分布の確率は、以下の式で求められます。
P(X=k) = nCk * p^k * (1-p)^(n-k)
ここで、nは試行回数、kは成功回数、pは成功確率、nCkはn個からk個を選ぶ組み合わせの数です。
コインの場合、表が出る確率はp=0.5です。2
コインを100回投げて、表が80回出る確率は、
P(X=80) = 100C80 * 0.5^80 * 0.5^20 ≒ 0.000000000000000000000000000000000000000000000001
となります。
表が80回以上出る確率は、表が80回から100回出る確率の合計です。
P(X≧80) = P(X=80) + P(X=81) + … + P(X=100)
これを計算すると、
P(X≧80) ≒ 0.000000000000000000000000000000000000000000000002
となります。
つまり、コインを100回投げて、表が80回以上出る確率は非常に低いと言えます。
式はあってそうですが計算が間違っていそうです
まず正確に計算してみます
&amp;#x2211; i = 80 100 { 100 C 80 &amp;#x22C5; ( 1 2 ) i &amp;#x22C5; ( 1 2 ) 100 &amp;#x2212; i } Rで書くならこう
sum &amp;lt;- 0 for (i in 80:100) { sum &amp;lt;- choose(100, i) * (1 / 2) ^ 100 + sum print(paste(i, &amp;quot;= &amp;quot;, sum)) } 結果は 5.</description>
    </item>
    
    <item>
      <title>金価格に連動するETF</title>
      <link>https://yaasita.github.io/2023/03/22/etf-gold/</link>
      <pubDate>Wed, 22 Mar 2023 03:26:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/03/22/etf-gold/</guid>
      <description>金価格が上がってるので買おうかなと
ここで探した
https://money-bu-jpx.com/
銘柄検索 =&amp;gt; ETF・ETNの種類から探す =&amp;gt; 商品ETF =&amp;gt; 検索結果へ =&amp;gt; 信託報酬が低い順で並べ替え
ＳＰＤＲゴールド・シェア（1326） 純金上場信託（現物国内保管型）（1540） この辺かな</description>
    </item>
    
    <item>
      <title>楽天証券の手数料ゼロETF</title>
      <link>https://yaasita.github.io/2023/01/04/etf/</link>
      <pubDate>Wed, 04 Jan 2023 23:24:59 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/01/04/etf/</guid>
      <description>手数料0円ETF
(このページなぜかログイン状態だと空っぽになる)
https://www.rakuten-sec.co.jp/web/domestic/etf-etn-reit/lineup/0-etf.html
信託報酬が書いてなかったので、調べておいた
https://gist.github.com/yaasita/727267f20177ce13e99750191311c23e
信託報酬だけ取ってくるときに使ったスクリプト
実体は rakuten-sec.co.jp ドメインじゃなくて www.trkd-asia.com にあるので注意
#!/usr/bin/env node &amp;quot;use strict&amp;quot;; import fs from &amp;quot;fs&amp;quot;; import readline from &amp;quot;readline&amp;quot;; import fetch from &amp;quot;node-fetch&amp;quot;; import jsdom from &amp;quot;jsdom&amp;quot;; const { JSDOM } = jsdom; const content = fs.readFileSync(&amp;quot;list.txt&amp;quot;, &amp;quot;utf8&amp;quot;); const codes = content.split(&amp;quot;\n&amp;quot;); for (const code of codes) { await getSintaku(code); } async function getSintaku(code) { const url = `https://www.trkd-asia.com/rakutensec/quote.jsp?ric=${code}.T&amp;amp;c=ja&amp;amp;ind=2`; const res = await fetch(url); const html = await res.</description>
    </item>
    
    <item>
      <title>ビリビリ動画とcrunchyrollのIP制限をGCPで検証</title>
      <link>https://yaasita.github.io/2019/09/14/anime-ip-block/</link>
      <pubDate>Sat, 14 Sep 2019 22:21:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/09/14/anime-ip-block/</guid>
      <description>bilibili動画とcrunchyrollのIP制限はどんな感じなのか
GCPの各リージョンからアクセスして試してみる
rttは自宅から該当サーバーまでのpingしたときの平均値
なのでISPによって全然違うと思うので参考値ということで
region bilibili crunchyroll rtt(ms) asia-east1 (台湾) ng ok 60.149 asia-east2 (香港) ng ok 76.986 asia-northeast1 (東京) ng ok 29.624 asia-northeast2 (大阪) ng ok 37.401 asia-south1 (ムンバイ) ng ok 144.055 asia-southeast1 (シンガポール) ng ok 89.755 australia-southeast1 (シドニー) ng ok 122.193 europe-north1 (フィンランド) ng ok 256.714 europe-west1 (ベルギー) ng ok 229.038 europe-west2 (ロンドン) ng ok 220.693 でここまでやってあとは変わらないだろうと思って以下のリージョンは試さなかった
europe-west3 (フランクフルト) europe-west4 (オランダ) europe-west6 (チューリッヒ) northamerica-northeast1 (モントリオール) southamerica-east1 (サンパウロ) us-central1 (アイオワ) us-east1 (サウスカロライナ) us-east4 (北バージニア) us-west1 (オレゴン) us-west2 (ロサンゼルス) 結論 crunchyrollは適当なリージョンからでも、たとえ（日本リージョンでも)見れる</description>
    </item>
    
    <item>
      <title>虫よけスプレー</title>
      <link>https://yaasita.github.io/2019/07/29/musiyoke/</link>
      <pubDate>Mon, 29 Jul 2019 03:42:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/07/29/musiyoke/</guid>
      <description>虫除けスプレーで最近買ったこれが良かった
ベタベタしないので気にならない
フマキラー SKIN VAPEってやつかな
商品名はスキンベープミスト　200mlかも
そういや虫よけ剤に入ってるDEETって薬はなぜ虫が寄り付かないか謎らしい</description>
    </item>
    
    <item>
      <title>電源を変えた</title>
      <link>https://yaasita.github.io/2018/12/17/power-supply/</link>
      <pubDate>Mon, 17 Dec 2018 00:02:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/17/power-supply/</guid>
      <description>寒いせいでPCの調子が悪くなった
ANTEC(アンテック) NeoECO Classicシリーズ 650Wモデル NE650C
って3年くらい使った電源が、寒い日にうまくついてくれない。
（電源つけて2,3秒で再起動を繰り返す)
なので
KRPW-AK750W/88+ という玄人志向のやつに変更した
8000円くらいのやつ</description>
    </item>
    
    <item>
      <title>MonaCoinのマイニング</title>
      <link>https://yaasita.github.io/2017/12/03/mona-coin/</link>
      <pubDate>Sun, 03 Dec 2017 01:30:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/03/mona-coin/</guid>
      <description>モナコインをマイニングしてみる
cpuminer-multiでやってみた
スコア IDCF Cloud (Light.S1) メモリ1GB 仮想1CPU =&amp;gt; 17.48 kH/s 自宅PC Core i5-4460 @ 3.20GHz 4コア メモリ 4GB =&amp;gt; 376 kH/s ノートパソコン LB-C110B Celeron 1037U 2コア/1.80GHz メモリ8GB =&amp;gt; 91 kH/s まとめ CPUマイニングなんてやるもんじゃない←結論</description>
    </item>
    
    <item>
      <title>銀行の通帳を捨てた</title>
      <link>https://yaasita.github.io/2017/10/15/bank-tutyo/</link>
      <pubDate>Sun, 15 Oct 2017 22:55:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/10/15/bank-tutyo/</guid>
      <description>記帳に行くのがめんどくさくなったので全部捨ててみた
Web通帳の各行保存期間はこんな感じ
ゆうちょ銀行 ゆうちょダイレクトプラス: 15ヶ月分 三菱東京UFJ銀行(三菱東京ＵＦＪダイレクト) Eco通帳: 25ヵ月分 横浜銀行(はまぎんマイダイレクト) マイスマート通帳: 36ヵ月分 </description>
    </item>
    
    <item>
      <title>会社員→自営業でも再就職手当は貰える</title>
      <link>https://yaasita.github.io/2017/08/09/sitsugyou-hoken/</link>
      <pubDate>Wed, 09 Aug 2017 16:16:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/09/sitsugyou-hoken/</guid>
      <description>なので、辞めた後にハロワ行って雇用保険受給資格者証もらってから開業届出した後に報告しに行った方が良い
失業状態だと偽って失業保険貰うと不正受給になるので注意</description>
    </item>
    
    <item>
      <title>AWSソリューションアーキテクト</title>
      <link>https://yaasita.github.io/2017/03/18/aws-test/</link>
      <pubDate>Sat, 18 Mar 2017 23:56:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/18/aws-test/</guid>
      <description>なんか必要になったということで取ってきた
総合スコア: 74% トピックレベルのスコア: 1.0 高可用性、コスト効率、耐障害性、スケーラブルなシステムの設計: 72% 2.0 実装/デプロイ: 83% 3.0 セキュリティ: 72% 4.0 トラブルシューティング: 80% 勉強につかったサイト
https://aws.koiwaclub.com/
細かい数字とか覚えるよりもどんなサービスなのかなーくらいが頭に入ってれば良さげ
かかる費用は
模擬試験＋本試験=2160+16200=18360円
だった</description>
    </item>
    
    <item>
      <title>MacBook買ったのでサポートお願いした</title>
      <link>https://yaasita.github.io/2017/01/09/mac-personal-setup/</link>
      <pubDate>Mon, 09 Jan 2017 16:27:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/09/mac-personal-setup/</guid>
      <description>13インチ MacBook Air 1.6GHzデュアルコアIntel Core i5 整備済製品 (\84,000)で買ったのでパーソナルセットアップをお願いしてみた
時間は30分だったけど、電話でいろいろ質問できて良い
http://www.apple.com/jp/retail/personalsetup/</description>
    </item>
    
    <item>
      <title>リンク</title>
      <link>https://yaasita.github.io/2016/01/24/link/</link>
      <pubDate>Sun, 24 Jan 2016 02:15:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/01/24/link/</guid>
      <description> 監視カメラまとめ http://www.insecam.org/en/bycountry/JP/ SIはやめておけ http://anond.hatelabo.jp/20160123131828 バックアップ </description>
    </item>
    
    <item>
      <title>最近のSIer記事</title>
      <link>https://yaasita.github.io/2015/11/29/sier/</link>
      <pubDate>Sun, 29 Nov 2015 22:39:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/11/29/sier/</guid>
      <description> IT業界で客先常駐という働き方はもうやめにできないか 大手Sierで見た！ 日本でプログラマが少ない理由は戦う戦場を間違えているからです </description>
    </item>
    
    <item>
      <title>ISUCON5で惨敗した件</title>
      <link>https://yaasita.github.io/2015/09/30/isucon5/</link>
      <pubDate>Wed, 30 Sep 2015 00:38:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/09/30/isucon5/</guid>
      <description>ISUCON5に参加してきました
T・D・U！T・D・U！という名前で出てみました
最高スコアは5000ちょっとでしたOTZ
感想 ISUCON 会社以外の人ととチーム組むと他社の事情とか聞けて結構良いかもしれない idobata,GCE(Google Compute Engine)とか使ったことなかったからいい機会だったかも VM渡されて時間内に早くするんだ！って競技はルールも分かりやすくて面白い 惨敗だったけど楽しかったし勉強になった GCP(Google Cloud Platform) なんかAWS慣れてる所為もあるんだろうけど結構手間取った ついでに触ったGoogle Cloud DNSはRoute53の方が高機能かな～ あらかじめユーザ名＋鍵登録しておけばインスタンス立ち上げ時にユーザ作って鍵設定までしてくれて便利(小並感 idobata slackと違って1ユーザのアカウントをチーム内で共有するみたいな感じなので 会社内のチャット→slack 会社を跨いだメンバーとのやり取り→idobataみたいな感じがよいのかな ちょっとISUCON中は重かったけどこれからに期待 反省 最初に落ち着いて計測してみたほうが良かったかも 制限時間があるから焦って、手当たり次第に対応してたけどもっと計測に時間とってやることやらない事決めてから取り掛かれば良かったかも troterにほぼ任せちゃったので。。。 役割決めないとだったな お前これやる、俺これやる的な話してから取り掛かるべきだったかも やっぱコード読まなきゃダメ パラメータチューニングとかでもちょっとはスコア上がるけど、ロジック見て良い感じの実装にするのは必須ですた 例年 sinatraアプリらしいので一個くらいは作ってから望むべきだったかも 参考リンク ISUCON5の予選に参加して惨敗してきました #isucon </description>
    </item>
    
    <item>
      <title>三国志解説サイト</title>
      <link>https://yaasita.github.io/2015/02/08/sangokushi/</link>
      <pubDate>Sun, 08 Feb 2015 23:44:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/02/08/sangokushi/</guid>
      <description>はじめての三国志
http://hajimete-sangokushi.com/</description>
    </item>
    
    <item>
      <title>ユニコード文字の顔文字一覧</title>
      <link>https://yaasita.github.io/2014/12/20/kaomoji/</link>
      <pubDate>Sat, 20 Dec 2014 14:47:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/12/20/kaomoji/</guid>
      <description>http://matome.naver.jp/odai/2139210846915545101</description>
    </item>
    
    <item>
      <title>闇SIer</title>
      <link>https://yaasita.github.io/2014/09/11/yami_sier/</link>
      <pubDate>Thu, 11 Sep 2014 02:53:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/09/11/yami_sier/</guid>
      <description> 闇SIer 元ファイル </description>
    </item>
    
    <item>
      <title>itunes経由でBook同期</title>
      <link>https://yaasita.github.io/2014/05/26/itunes_books/</link>
      <pubDate>Mon, 26 May 2014 01:46:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/26/itunes_books/</guid>
      <description>手元のPDFをipadに転送したくていろいろ探したら
下記画像みたいなブックという項目を出さないとダメみたい
iTunesStoreでブック押したりなんかいろいろしたら出るようになった
あとPDFを追加するときは以下のフォルダに置くと良いみたい（入れると自動的に消える）
C:\Users\hogeuser\Music\iTunes\iTunes Media\iTunes に自動的に追加 </description>
    </item>
    
    <item>
      <title>仕事を探したり発注できたりするサイト</title>
      <link>https://yaasita.github.io/2013/03/23/1381/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/03/23/1381/</guid>
      <description> ・ランサーズ
・クラウドワークス </description>
    </item>
    
    <item>
      <title>マウスオーバーで単語検索</title>
      <link>https://yaasita.github.io/2013/01/14/1543/</link>
      <pubDate>Mon, 14 Jan 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/01/14/1543/</guid>
      <description> 英単語を調べるときとかでも便利
翻訳もできる
1.Greasemonkeyをインストール
2. スクリプトを追加（以下URLのINSTALL)
http://userscripts.org/scripts/show/12901
alt押しながら単語選択で検索
alt+yで設定
参考リンク
http://mozilla-remix.seesaa.net/article/80993858.html
http://www.simplivillage.com/trac/wiki/Userscript/FastLookupJPandEN </description>
    </item>
    
  </channel>
</rss>
