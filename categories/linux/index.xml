<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/linux/</link>
    <description>Recent content in linux on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 Jul 2024 03:52:41 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>opendkimメモ</title>
      <link>https://yaasita.github.io/2024/07/06/dkim/</link>
      <pubDate>Sat, 06 Jul 2024 03:52:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/07/06/dkim/</guid>
      <description>DKIMの公開鍵取得 opendkim-testkeyとかで検証する際に、DNSはroot DNSサーバーから自力で名前解決しようとするのでDNSキャッシュサーバー使いたかったら以下を指定
/etc/opendkim.conf
Nameservers 192.168.0.10 thunderbirdの拡張も同じ挙動だった
公開鍵を作る場合 2048bitを指定しておく方がいい
(最近のopendkimはデフォルトで2048bit)
opendkim-genkey -D /etc/postfix/dkim/ -b 2048 -d example.jp -s mail unboundに入れるときは長いので分割する
local-data: &#39;mail._domainkey.example.jp. IN TXT &amp;quot;v=DKIM1; k=rsa; &amp;quot; &amp;quot;p=xxxxxxxx...&amp;quot; &amp;quot;xxxxxxx...&amp;quot;&#39; ローカルでの検証 opendkim-testmsg &amp;lt; mail.eml </description>
    </item>
    
    <item>
      <title>nftablesでDNSサーバーのレート制限</title>
      <link>https://yaasita.github.io/2024/05/21/nftables-dns/</link>
      <pubDate>Tue, 21 May 2024 03:42:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/05/21/nftables-dns/</guid>
      <description>/etc/nftables.conf に書くやつ
まずはこんな感じで、どれくらいの流量が入って来るか測定しておく
meta l4proto {tcp, udp} th dport 53 counter accept それから以下のように制限する
meta l4proto {tcp, udp} th dport 53 ct state new meter dns_limit1 { ip saddr timeout 1h limit rate 20/minute } counter accept meta l4proto {tcp, udp} th dport 53 ct state new meter dns_limit2 { ip6 saddr timeout 1h limit rate 20/minute } counter accept ちなみにudpの場合はいつも ct state new にマッチするっぽい</description>
    </item>
    
    <item>
      <title>IPv6回りのちょっとしたこと</title>
      <link>https://yaasita.github.io/2024/03/22/ipv6-tips/</link>
      <pubDate>Fri, 22 Mar 2024 02:58:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/03/22/ipv6-tips/</guid>
      <description>public NAT64サービス: https://nat64.net/
使用するキャッシュDNSサーバーだけ変えればOKなので使いやすい
IPv6 テストサイト: https://ipv6test.app/
curlで手軽にチェックできる
curl ipv6test.app curl v4.ipv6test.app curl v6.ipv6test.app tcpdumpでICMPv6を見る
tcpdump -n -X icmp6 </description>
    </item>
    
    <item>
      <title>ipv6のICMPリダイレクト</title>
      <link>https://yaasita.github.io/2024/02/17/ipv6-icmp/</link>
      <pubDate>Sat, 17 Feb 2024 05:35:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/02/17/ipv6-icmp/</guid>
      <description>ipv4ならカーネルパラメータ net.ipv4.conf.all.send_redirectsでICMPリダイレクトの送信を抑止できるが
ipv6はそういうオプションが無いらしい
https://askubuntu.com/questions/1164239/how-to-disable-ipv6-redirect
/etc/nftables.conf に以下追加してとりあえず ipv6-icmpを抑止する
chain output { type filter hook output priority filter; meta l4proto ipv6-icmp icmpv6 type nd-redirect counter drop } リダイレクトで曲がったルーティングの確認はこんな感じ
ip -6 route show cache </description>
    </item>
    
    <item>
      <title>Linuxネットワークの設定</title>
      <link>https://yaasita.github.io/2024/01/07/network/</link>
      <pubDate>Sun, 07 Jan 2024 06:22:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/01/07/network/</guid>
      <description>たまに忘れるのでメモ
Linuxで通信を見たいときに、あるホストをルーターにする場合
/etc/sysctl.conf に以下のような設定を入れる
net.ipv4.ip_forward = 1 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.all.send_redirects = 0 が、ICMMP redirectの送信はallじゃなくてインターフェイス名をちゃんと指定する必要があるぽい
net.ipv4.conf.eth0.send_redirects = 0 ちなみにICMP redirectで曲がってしまったルーティングは
以下のコマンドで参照とクリアができる
ip route show cache ip route flush cache あとIPv6をsystemd-networkdで無効化する場合こんな感じ
[Match] Name=host0 [Network] DHCP=no LinkLocalAddressing=no Address=192.168.0.100/24 Gateway=192.168.0.10 IPv6PrivacyExtensions=no [IPv6] Address= Gateway= AddressGenerator=none 一時アドレス消す場合は以下のコマンド
ip -6 addr flush dev eth0 scope global dynamic </description>
    </item>
    
    <item>
      <title>WebARENA Indigoを使ってみた</title>
      <link>https://yaasita.github.io/2022/09/25/webarena/</link>
      <pubDate>Sun, 25 Sep 2022 22:41:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/09/25/webarena/</guid>
      <description>円安でAWSが高いのでこっちにサーバーを移行した
https://web.arena.ne.jp/indigo/
以下気づいたこと箇条書きで
めっちゃ安い 機能は仮想サーバーの起動(kvm),スナップショット,ファイヤーウォールくらい 追加オプションで権威DNSサーバーが使える(500円) 管理画面は少し重い ipv6の設定は手動でやる 1vCPU/1GB memory(Uubuntu 22.04)の場合はnetplanの設定がコメントアウトされてた ファイヤーウォールはipv6非対応 なので、やる場合はnftablesを自分で設定する 管理画面でコンソール開く場合は広告ブロックをOFFにしないとダメ 最初はsshでのアクセスのみコンソール画面に入る場合 はsshで入ってから、パスワード設定が必要 API での操作も可能 OP25Bはされていない 対応OS 転送料金に課金なし 圧倒的に安いのでlightsailみたいなサービスから移行するには良いんじゃないかな</description>
    </item>
    
    <item>
      <title>linuxのipv6一時アドレス2</title>
      <link>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</link>
      <pubDate>Tue, 01 Mar 2022 02:34:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</guid>
      <description>linuxでipv6一時アドレス使う時に設定するカーネルパラメータ
net.ipv6.conf.xxx.temp_prefered_lft = 86400 net.ipv6.conf.xxx.temp_valid_lft = 604800 これの意味は、上記のようにデフォルトの設定86400(1日), 604800(7日)だった場合
xxxインターフェイスにIPv6-1という一時アドレスが付いていたとする
IPv6-1作成してから24時間後にIPv6-2という新しい一時アドレスを取得する
取得後はIPv6-2のアドレスを使用して通信をするようになる
使わなくなったIPv6-1アドレスも7日間は有効なので受信することは可能
という仕組み
つまり、最大で7アドレスになるということ
1日目: IPv6-1
2日目: IPv6-1, IPv6-2
3日目: IPv6-1, IPv6-2, IPv6-3,
という風に増えていく
前回</description>
    </item>
    
    <item>
      <title>Linuxでipv6の一時アドレス</title>
      <link>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</link>
      <pubDate>Sat, 26 Feb 2022 23:16:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</guid>
      <description>systemd-networkdの設定にIPv6PrivacyExtensions足せばOK
(対応するカーネルパラメータ net.ipv6.conf.xxx.use_tempaddr は自動的に設定される)
[Network] Address=192.168.0.2/24 Gateway=192.168.0.1 IPv6PrivacyExtensions=yes temp_valid_lft
と
temp_prefered_lft
については sysctlで設定すること
参考リンク
https://wiki.archlinux.jp/index.php/IPv6 http://dr.slump.jp/IPv6/rfc3041/ https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt </description>
    </item>
    
    <item>
      <title>systemd-nspawnのtmpディレクトリ</title>
      <link>https://yaasita.github.io/2021/12/12/systemd-nspawn-tmpdir/</link>
      <pubDate>Sun, 12 Dec 2021 06:03:17 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/12/12/systemd-nspawn-tmpdir/</guid>
      <description>systemd-nspawnで/tmpのtmpfs mountを止める方法について昔こんな記事書いた
systemd-nspawnでのtmpディレクトリの扱いについて
今は状況が変わってて、
https://github.com/systemd/systemd/pull/10294/files
こんな感じで、&amp;ldquo;SYSTEMD_NSPAWN_TMPFS_TMP&amp;rdquo; って環境変数に0を入れておけば、/tmpディレクトリをtmpfsにしない
/etc/systemd/system/systemd-nspawn@.service
にこんな感じで追加したらmachinectlからもできる
Environment=SYSTEMD_NSPAWN_TMPFS_TMP=0 </description>
    </item>
    
    <item>
      <title>microk8sでargocdを動かす</title>
      <link>https://yaasita.github.io/2021/11/28/microk8s/</link>
      <pubDate>Sun, 28 Nov 2021 06:09:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/11/28/microk8s/</guid>
      <description>microk8s で ArgoCD を動かすときのメモ
まず手順通りにマニフェストを設定したら
kubectl patch svc argocd-server -n argocd -p &#39;{&amp;quot;spec&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;NodePort&amp;quot;}}&#39; ClusterIP から NodePortに変更
こんな感じの表示になったら
$ kubectl get svc argocd-server -n argocd argocd-server NodePort 10.152.183.43 &amp;lt;none&amp;gt; 80:30444/TCP,443:30983/TCP 20h 以下のURLでアクセス
https:// (ホストのIP) :30983
まあkubectl port-forward でやってもいいけど
ついでに dashbord も同様にできる
kubectl patch svc kubernetes-dashboard -n kube-system -p &#39;{&amp;quot;spec&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;NodePort&amp;quot;}}&#39; kubectl get svc kubernetes-dashboard -n kube-system $ kubectl get svc kubernetes-dashboard -n kube-system NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes-dashboard NodePort 10.</description>
    </item>
    
    <item>
      <title>bridgeインターフェイスのMACアドレス</title>
      <link>https://yaasita.github.io/2021/10/10/machine-id/</link>
      <pubDate>Sun, 10 Oct 2021 05:52:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/10/10/machine-id/</guid>
      <description>KVMを使ったVM内でブリッジインターフェイス作ってそのVMをコピーしたらMACアドレスが重複して通信不能になった
(/etc/systemd/network/にはこんな感じでbridge作る)
https://gist.github.com/yaasita/d527b48f54b0e23c3097a9c69239d534
どうやらこれ、machine-idから作られてるみたいで、VMコピーしたらmachine-id変えた方が良いぽいね
rm /etc/machine-id /var/lib/dbus/machine-id dbus-uuidgen --ensure systemd-machine-id-setup </description>
    </item>
    
    <item>
      <title>dircolorsの設定</title>
      <link>https://yaasita.github.io/2021/09/20/dircolors/</link>
      <pubDate>Mon, 20 Sep 2021 17:40:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/09/20/dircolors/</guid>
      <description>dircolorsは
ls --color=auto したときの色を設定するコマンド
以下のコマンドで設定を書き出して
dircolors -p &amp;gt; ~/.dir_colors 好きな設定に編集する
vi ~/.dircolors .bashrcに以下のように書いておいた
if [[ &amp;quot;$TERM&amp;quot; =~ ^xterm ]] || [[ &amp;quot;$TERM&amp;quot; =~ ^screen ]];then alias egrep=&#39;egrep --color=auto&#39; alias grep=&#39;grep --color=auto&#39; alias ls=&#39;ls --color=auto&#39; eval &amp;quot;$(dircolors -b ~/.dircolors)&amp;quot; fi 参考
lsコマンドで表示されるファイルの色を変更するには </description>
    </item>
    
    <item>
      <title>bashでディレクトリのbookmark</title>
      <link>https://yaasita.github.io/2021/09/06/bash-bookmarks/</link>
      <pubDate>Mon, 06 Sep 2021 02:00:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/09/06/bash-bookmarks/</guid>
      <description>これすごい便利だった
https://threkk.medium.com/how-to-use-bookmarks-in-bash-zsh-6b8074e40774
CDPATHを使うとこんな便利なことができるのね
ただ以下の方が指摘されているようにbashだと補完が効かないので, compgenで補完候補を作る方が良さそう
https://mobile.twitter.com/mattn_jp/status/1434205359573405696
自分の場合は、gotoっていうコマンドよりcdで通常通り使えた方が良いので
こんな感じの設定を追加しておいた
cdコマンドを上書きして、@で始まってたら cd -P でsymlinkを辿るようにして、他は通常通り
(これなら補完候補も足さなくてOK)
export CDPATH=&amp;quot;.:$HOME/.bookmarks&amp;quot; function cd { if [[ ${1} =~ ^@ ]];then cd -P $1 || return 1 return fi builtin cd &amp;quot;$@&amp;quot; || return 1 } あと、bookmarkへの追加もコマンドにしておく
bookmarkしたいディレクトリに移動してbookmarkコマンドでsymlink作るようにしておく
function bookmark { local current_dir=$(pwd) ln -s $current_dir ~/.bookmarks/@$(basename $current_dir) } </description>
    </item>
    
    <item>
      <title>debian bullseyeのmlocateで引っかからないファイル</title>
      <link>https://yaasita.github.io/2021/08/16/mlocate/</link>
      <pubDate>Mon, 16 Aug 2021 02:15:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/08/16/mlocate/</guid>
      <description>debian 11でlocateしても引っかからないファイル多いなと思って調べたら
systemctl cat mlocate.service こいうのが追加されてる
[Service] PrivateTmp=true PrivateDevices=true PrivateNetwork=true ProtectSystem=true debian 10 (buster) 時代はcronだったから気にしなかったけど、多分これ、ProtectSystemの所為で/usrとか見れてないぽい
今までのように全検索したかったら以下のコマンドで上書きしたほうが良いかと
systemctl edit mlocate.service </description>
    </item>
    
    <item>
      <title>postfixのReceived headerを隠す</title>
      <link>https://yaasita.github.io/2020/12/06/postfix-received-header/</link>
      <pubDate>Sun, 06 Dec 2020 01:11:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/12/06/postfix-received-header/</guid>
      <description>この回答通りなんだけど
一応補足とか
自分の環境だと、送信メールサーバーがセカンダリメールサーバーと兼任している
以下のように設定した
/etc/postfix/master.cf
smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no -o smtpd_client_restrictions=$mua_client_restrictions -o smtpd_helo_restrictions=$mua_helo_restrictions -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=smtpscleanup smtpscleanup unix n - y - 0 cleanup -o header_checks=regexp:/etc/postfix/header_checks /etc/postfix/header_checks
/^Received:.*/ IGNORE 最初はsmtp_header_checksをmain.cfに書けば良いかなーと思ったんだけど、
これだと外から入ってきたメール(後にプライマリサーバーにrelayされる)も一律削除されてしまうので都合が悪かった</description>
    </item>
    
    <item>
      <title>authorized_keysを適当に更新しない</title>
      <link>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</link>
      <pubDate>Wed, 08 Jul 2020 15:14:42 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</guid>
      <description>概要 sshの公開鍵認証で複数人が使うシステムのauthorized_keysを場当たり的に更新してしまうと、誰の鍵が入ってるか分からなくなる
誰の鍵が入ってるか分かるようにした方が良いと思う
スクリプト こんなスクリプトを書いた
使い方はREADME.md参照
https://github.com/yaasita/ssh-keys-manager
その他 使えるならsshの証明書認証も検討した方が良いかも ssh -F でconfig指定できるけど、~/.ssh/configに置いたときと挙動が違うのでスクリプト内にconfig入れる場合は注意 </description>
    </item>
    
    <item>
      <title>GKEでCloud SQL Proxyをsocketで使う</title>
      <link>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</link>
      <pubDate>Fri, 28 Feb 2020 04:08:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</guid>
      <description>GKEでもGAEみたいにCloud SQLに繋げたい場合の話
公式ドキュメントのサンプルだとこんな感じにport接続にしてる
https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/master/cloudsql/mysql_wordpress_deployment.yaml
socket接続の場合はこんな感じ
参考
k8s サイドカーコンテナについて</description>
    </item>
    
    <item>
      <title>chromebookが最高だった</title>
      <link>https://yaasita.github.io/2019/12/23/chromebook/</link>
      <pubDate>Mon, 23 Dec 2019 05:58:32 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/23/chromebook/</guid>
      <description>ASUS の C434TA-AI0084 を買ったのでレビュー
chromeOS 起動もアプリの動作も全体的に速くてとても良い smartlockが失敗する時がある 解除がちょっと遅い10秒くらい待たされる chromeの複数ユーザー機能が使えない 多重ログイン機能はあるけどちょっと微妙 別ユーザーへスイッチする場合はsmartlockで解除できない 別ユーザー側のAndroidアプリ、Linux環境は使えない(chromeだけ) 後述のLinux環境でchromium入れてそこでアカウント切り替えする手もある 同時にログインできないだけなので、別ユーザを追加してスイッチすることは可能 ディスプレイ タブレットには少し重い 解像度は 2194x1234 ～ 1182x665の範囲で調整可能 起動毎にバックライトの明るさがリセットされてしまう(音量は記憶してるのに。。。) グレア液晶は問題なし綺麗 テザリング Moto E5 とbluetoothでのテザリングが出来なかった とりあえずUSBテザリングは刺すだけで使えたので良しとしてます キーボード Deleteキーが無いけど、Alt + Backspaceで問題なし かな/英語キーと, 半角全角切り替えキーがあるのでMac派でもWindows派でも大丈夫かも キーボードのバックライトは消せない ←Alt + 明るさキーで消せました Androidアプリ ほとんどのアプリは問題なかった 大画面でAndroidアプリ使うのは割と快適(例 tumblr) Android版Excelでとりあえず見るのはOKそう タウンWifiみたいなWifiを制御するアプリは上手く動かないかもしれない(要検証) パズドラは動かない Linux環境 OS Debian9なのでDebian10にアップデートされるのを期待 使い始めるのはすごく簡単、設定から有効ボタンを押すだけ 丸ごとLinux環境バックアップ機能あり バックアップは丸ごとtarで固めて1ファイルにしてくれるのでハンドリングはしやすい USB共有機能あり /opt/google/cros-containers/bin/.. というプロセスが動いてる以外は普通のLinux, systemdも問題なし ファイル共有 右クリックから簡単に共有可能 Linux環境側では/mnt/chromeos に現れる /mnt/chromeos以下はパーミッションやownerが狂わないように制限されてるのでトラブルになることは無いと思う デフォルトでファイルアプリを使ってchromeOS側からLinux側のhomeディレクトリは自由に読み書き可能 なので共有ファイル追加しなくても特段問題なし ネットワーク こんなスクリプト だと chromeOS側から 127.0.0.1:3000 にアクセスできる でも、なぜかDockerで docker run -p 3000:80 nginx とかやって 127.</description>
    </item>
    
    <item>
      <title>systemd timerはちゃんと動いてる？</title>
      <link>https://yaasita.github.io/2019/09/29/systemd-timer/</link>
      <pubDate>Sun, 29 Sep 2019 16:51:09 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/09/29/systemd-timer/</guid>
      <description>systemdタイマーがちゃんと動いてるか確認したほうが良いよというお話
systemctl list-timers --allコマンドで一覧が見れるあれです
debian10だと /etc/cron.daily にあるスクリプトでこんな感じに書かれてたら、systemd timerの方を使ってる
if [ -d /run/systemd/system ]; then exit 0 fi 前回 と同様にノートパソコンのバッテリー稼働と誤って判断されることに起因する問題
例えばlogrotateとかみると
systemctl cat logrotate こんな一文がある
ConditionACPower=true これはバッテリー駆動の時は動かさないって意味らしいんだけど、どうも判定が狂ってるみたいでずっと実行されなかった
なので、以下のコマンドでoverride.conf作って判定を無効化した
systemctl edit logrotate # 書いた内容 [Unit] ConditionACPower= というわけで
cronだけじゃなくて, systemd-timerもちゃんと見ておかないといけない
journalctl -n 10 -u logrotate | egrep -i &amp;quot;condition check.*skipped&amp;quot; とりあえず分かった、バッテリー時の判定が入ってるtimer
apt-daily-upgrade man-db logrotate anacron apt-daily </description>
    </item>
    
    <item>
      <title>on_ac_powerコマンドについて</title>
      <link>https://yaasita.github.io/2019/08/16/on-ac-power/</link>
      <pubDate>Fri, 16 Aug 2019 04:45:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/16/on-ac-power/</guid>
      <description>debian10にした関係でLinuxネタが続く
PCがバッテリーで動いてるかどうか判定するのにon_ac_powerってコマンドがある
そんで、バッテリー駆動の場合は電力を節約したいので、anacronとかを動かなくする制御がはいってる
例えば、/etc/cron.daily/mlocate の場合
if which on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then ON_BATTERY=0 on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || ON_BATTERY=$? if [ &amp;quot;$ON_BATTERY&amp;quot; -eq 1 ]; then exit 0 fi fi こんな感じでon_ac_powerが1を返したらバッテリー駆動と判断しすぐに処理を止めてしまう
んで LB-C110B っていうひと昔前のノートPCだとこの判定が狂ってしまい常にバッテリー駆動と判定されてしまった
このままだと永遠にlocateコマンドが使えないので、divertで退避させた
dpkg-divert --divert /sbin/on_ac_power.disable --rename /sbin/on_ac_power ln -s /bin/true /sbin/on_ac_power おしまい</description>
    </item>
    
  </channel>
</rss>
