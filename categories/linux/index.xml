<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/linux/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 14 Aug 2019 10:20:33 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>各種サーバの中間証明書の扱い</title>
      <link>https://yaasita.github.io/2019/08/14/ssl-capath/</link>
      <pubDate>Wed, 14 Aug 2019 10:20:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/14/ssl-capath/</guid>
      <description>中間証明書をどう設定するか問題
postfix smtpd_tls_cert_file = /etc/letsencrypt/live/example.net/cert.pem smtpd_tls_key_file = /etc/letsencrypt/live/example.net/privkey.pem smtpd_tls_CAfile = /etc/letsencrypt/live/example.net/chain.pem  Let&amp;rsquo;s Encryptの場合こんな感じ
smtpd_tls_CAfileに中間証明書を指定する
smtpd_tls_cert_fileにfullchain.pemを指定するやり方はNG
dovecot 10-ssl.conf
ssl_ca = &amp;lt;/etc/letsencrypt/live/example.net/chain.pem  これはダメ
この設定はクライアント証明書用ですので
正しくは、こんな感じに、まとめたやつを指定すればOK
ssl_cert = &amp;lt;/etc/letsencrypt/live/example.net/fullchain.pem  apache SSLCACertificateFileという設定はクライアント証明書用なのでここに入れない
SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem  dovecot同様に中間証明書もまとめて指定する
まとめ この問題はスマホのK-9 Mailでメール読もうとしたときに判明した
(突然CertPathValidatorExceptionって怒られた)
thunderbirdでメール読んでた時には発生しなかったのでなんだろなーと思ったんだけどこっちは多めにroot証明書入ってるみたいね

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   サーバー設定後はこんな感じで中間証明書まで確認したほうが良いかも
openssl s_client -connect example.org:465 -showcerts  thunderbirdだけで確認すると痛い目を見るよと言うお話でした</description>
    </item>
    
    <item>
      <title>tarの差分バックアップ</title>
      <link>https://yaasita.github.io/2019/04/01/tar-backup/</link>
      <pubDate>Mon, 01 Apr 2019 16:12:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/01/tar-backup/</guid>
      <description>前回の続き
でctime変化しちゃってどうしたか？
ファイルサイズとファイル名を取っておいて差分を作ることにした
 こんな感じのスクリプトで、ファイル名 + tab + ファイルサイズで保存する
(厳密にやる場合はsha256とかで)
そんで現在のファイルリストも取って、差分をとる
diff -u previous.txt now.txt | egrep &amp;quot;^\+[^\+]&amp;quot; | perl -ple &#39;s/^\+//;s/\t.+//&#39; &amp;gt; tar.txt  あとは-Tオプションで差分のファイルだけをtarで固める
tar -cvaf hoge.tgz -T tar.txt  </description>
    </item>
    
    <item>
      <title>tarの-gオプションについて</title>
      <link>https://yaasita.github.io/2019/03/30/tar-g-option/</link>
      <pubDate>Sat, 30 Mar 2019 02:32:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/30/tar-g-option/</guid>
      <description>-g, &amp;ndash;listed-incremental
という増分バックアップに使われるオプションについてどうやって判定してるか？
それはctimeの変化を見ている
ctimeの変化で気をつけなければいけないことはハードリンクによるバックアップ
(rsync &amp;ndash;link-dest等)
例えば、以下のようなファイルが存在し
work/ `-- 1.txt  以下のコマンドを発行した場合
tar -g resume -cvf work.tar work/  初回なので当然全部がバックアップされる
このまま以下のコマンドを打てばディレクトリだけのバックアップになる(差分がないため)
tar -g resume -cvf work.tar work/  しかし、以下のようにハードリンクをするとctimeが変わってしまいバックアップ対象にリストされてしまう
stat work/1.txt # ctime確認 cp -al work work2 # linksを増やす stat work/1.txt # ctime更新されている tar -g resume -cvf work.tar work/ # 1.txtは対象になる rm -rf work2 # linksを減らす tar -g resume -cvf work.tar work/ # 1.txtは対象になる  なので、rsyncの差分バックアップの対象ディレクトリだったり、cp -alでのバックアップを取っている際はこれに注意する
うまく増分バックアップができなくなる
続き</description>
    </item>
    
    <item>
      <title>ubuntu18.04でDKIM設定</title>
      <link>https://yaasita.github.io/2018/08/18/dkim/</link>
      <pubDate>Sat, 18 Aug 2018 17:40:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/18/dkim/</guid>
      <description>インストール apt install opendkim opendkim-tools  opendkim設定 mkdir /etc/postfix/dkim/ opendkim-genkey -D /etc/postfix/dkim/ -d example.com -s mail # -d ドメイン # -s セレクタ chgrp opendkim /etc/postfix/dkim/* chmod g+r /etc/postfix/dkim/*  /etc/opendkim.conf
Syslog yes LogWhy Yes UMask 007 Canonicalization relaxed/relaxed Mode sv Socket inet:8891@localhost PidFile /var/run/opendkim/opendkim.pid OversignHeaders From TrustAnchorFile /usr/share/dns/root.key UserID opendkim KeyTable file:/etc/postfix/dkim/keytable SigningTable file:/etc/postfix/dkim/signingtable  /etc/postfix/dkim/keytable
mail._domainkey.example.net example.net:mail:/etc/postfix/dkim/mail.private  /etc/postfix/dkim/signingtable
example.net mail._domainkey.example.net  反映
systemctl restart opendkim.service  postfix設定 以下追記</description>
    </item>
    
    <item>
      <title>GoogleのCloud SDKの署名鍵エラー</title>
      <link>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</link>
      <pubDate>Sat, 07 Apr 2018 02:24:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</guid>
      <description>GCP(google cloud platform)の署名鍵が変わってた
つーか元のgpg鍵の有効期限が切れてる
取得:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease [6,372 B] エラー:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 6A030B21BA07F4FB  なんか探してみると2018年4月1日に作った鍵にしてるみたい
gpg2 --search-keys BA07F4FB gpg: data source: http://gpg.NebrWesleyan.edu:11371 (1) Google Cloud Packages Automatic Signing Key &amp;lt;gc-team@google.com&amp;gt; 2048 bit RSA key BA07F4FB, created: 2018-04-01, expires: 2021-03-31  ということで追加して事なきを得た
gpg2 -a --export BA07F4FB | apt-key add - apt-key del A7317B0F  </description>
    </item>
    
    <item>
      <title>正しいパッケージのアップデート方法</title>
      <link>https://yaasita.github.io/2017/10/26/pkg-update/</link>
      <pubDate>Thu, 26 Oct 2017 01:30:38 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/10/26/pkg-update/</guid>
      <description>本番環境と検証環境があり、パッケージのアップデートを行いたい場合
 10月1日 検証環境のパッケージを上げる
 11月1日 検証環境で問題なければ本番も上げる
  この時、それぞれの日に本番環境、検証環境で apt update, apt upgradeをすると本番、検証で差分が生じ検証されていないパッケージもアップデートされる可能性がある
正しくは10月1日に検証環境、本番環境で 同時 に以下のコマンドを実行
apt-get update apt-get upgrade --download-only  検証環境で以下を実行
apt-get upgrade  問題なければ本番環境で以下を実行
apt-get upgrade  ポイントは apt-get update, apt-get upgrade --download-only を検証,本番環境ともに同じタイミングで実行して更新予定のパッケージを揃えておくこと
またubuntuは/etc/apt/apt.conf.d/10periodicの「APT::Periodic::Update-Package-Lists」を0にしておかないと毎日自動でapt-get updateが走るので注意すること
図にするとこんな感じ

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>machine-idを変える時</title>
      <link>https://yaasita.github.io/2017/07/06/dbus-uuidgen/</link>
      <pubDate>Thu, 06 Jul 2017 13:46:49 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/06/dbus-uuidgen/</guid>
      <description>systemd-nspawn使ってて
なんか /etc/machine-id　ないよって言われたとき
dbus-uuidgen &amp;gt; root/etc/machine-id  </description>
    </item>
    
    <item>
      <title>AWSへVMイメージごと移動する手順</title>
      <link>https://yaasita.github.io/2016/11/20/aws-vm-import/</link>
      <pubDate>Sun, 20 Nov 2016 20:45:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/11/20/aws-vm-import/</guid>
      <description> 手順 img作る前に以下を確認しておく
 DHCPを有効にしている
 iptablesを無効に
 rawでイメージを作っておく
  次に以下のコマンドでインポート
# hoge-importってバケット作ったとする # 最初にimgをS3に上げておく aws s3 cp hoge.img s3://hoge-import/hoge.img # IAM周りを準備 aws iam create-role --role-name vmimport --assume-role-policy-document file://trust-policy.json aws iam put-role-policy --role-name vmimport --policy-name vmimport --policy-document file://role-policy.json # インポートタスク開始 aws ec2 import-image --description &amp;quot;hoge server&amp;quot; --disk-containers file://containers.json # 進捗見る aws ec2 describe-import-image-tasks  使ったjsonファイル
 参考リンク  http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/VMImportPrerequisites.html#vmimport-image-formats
 http://docs.aws.amazon.com/cli/latest/reference/ec2/import-image.html
  </description>
    </item>
    
    <item>
      <title>systemdでの電源管理</title>
      <link>https://yaasita.github.io/2016/01/06/acpi/</link>
      <pubDate>Wed, 06 Jan 2016 00:47:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/01/06/acpi/</guid>
      <description>Arch Linuxのwikiが詳しかった
/etc/systemd/logind.conf
あたりを直す
ノートPC閉じたときのSuspendを止めたかったから↓みたいにした
HandleSuspendKey=ignore HandleLidSwitch=ignore  </description>
    </item>
    
    <item>
      <title>docker composeインストール</title>
      <link>https://yaasita.github.io/2015/12/31/compose/</link>
      <pubDate>Thu, 31 Dec 2015 18:16:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/12/31/compose/</guid>
      <description>docker-composeもcheckinstallでdebパッケージにしといた
https://goo.gl/MKXvhm
Makefile
install: chmod +x bin/docker-compose cp bin/docker-compose /usr/local/bin/ cp bash/docker-compose /etc/bash_completion.d/  </description>
    </item>
    
    <item>
      <title>checkinstallでdocker-machineをパッケージに</title>
      <link>https://yaasita.github.io/2015/12/30/checkinstall/</link>
      <pubDate>Wed, 30 Dec 2015 03:16:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/12/30/checkinstall/</guid>
      <description>debパッケージにするとアンインストールが楽になる
 https://github.com/docker/machine
 https://goo.gl/X5Njaz
  以下のMakefileを作ってcheckinstallコマンドでおｋ
bash補完はこの辺
docker-machine-0.5.5/ ├── Makefile ├── docker-machine ├── docker-machine-prompt.bash ├── docker-machine-wrapper.bash └── docker-machine.bash  Makefile
 </description>
    </item>
    
    <item>
      <title>RAID5のリビルド中にもう一個壊れるってやつ</title>
      <link>https://yaasita.github.io/2015/10/17/raid5_fail/</link>
      <pubDate>Sat, 17 Oct 2015 16:52:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/10/17/raid5_fail/</guid>
      <description>リビルド中にもう一個壊れてRAID5が終わった話
/dev/md0: Version : 1.2 Creation Time : Fri Jan 6 12:24:44 2012 Raid Level : raid5 Array Size : 5860535808 (5589.04 GiB 6001.19 GB) Used Dev Size : 1953511936 (1863.01 GiB 2000.40 GB) Raid Devices : 4 Total Devices : 4 Persistence : Superblock is persistent Update Time : Sat Oct 17 16:59:57 2015 State : clean, FAILED Active Devices : 2 Working Devices : 3 Failed Devices : 1 Spare Devices : 1 Layout : left-symmetric Chunk Size : 512K Name : hoge:0 UUID : 55b9d6ea:4627c873:a0bcab05:a4f0c25d Events : 6755 Number Major Minor RaidDevice State 5 8 49 0 active sync /dev/sdd1 2 0 0 2 removed 2 8 33 2 active sync /dev/sdc1 6 0 0 6 removed 4 8 1 - faulty /dev/sda1 6 8 17 - spare /dev/sdb1  HDD一台が壊れたので /dev/sdb1を追加中にアレイの構成Diskがもう一個壊れた</description>
    </item>
    
    <item>
      <title>handbrakeでISOをエンコード</title>
      <link>https://yaasita.github.io/2015/08/25/handbrake/</link>
      <pubDate>Tue, 25 Aug 2015 00:32:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/08/25/handbrake/</guid>
      <description>Linuxで動画のエンコード/リッピングするとき
apt-get handbreak  handbrake-gtk
で起動して、左側のソース選んで
開始でOK
あんま難しくない
http://yaasita.tumblr.com/post/127482624497</description>
    </item>
    
    <item>
      <title>saslauthd-debian</title>
      <link>https://yaasita.github.io/2015/07/26/saslauthd-debian/</link>
      <pubDate>Sun, 26 Jul 2015 02:42:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/07/26/saslauthd-debian/</guid>
      <description>なんか Debian Jessie(8.1)のsaslauthdのsystemd定義が書かれてない気がする
なので自動起動に設定したかったら自分で書く感じで
/etc/systemd/system/saslauthd.service
 みたいな定義を書いて
systemctl daemon-reload systemctl enable saslauthd.service systemctl start saslauthd.service  </description>
    </item>
    
    <item>
      <title>Linuxでスクリーンショット取る</title>
      <link>https://yaasita.github.io/2015/04/18/linux-screenshot/</link>
      <pubDate>Sat, 18 Apr 2015 02:03:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/04/18/linux-screenshot/</guid>
      <description>shutterというのがよさ気
apt-get install shutter  http://www.xmisao.com/2014/02/07/get-screenshot-on-linux-by-shutter.html
他にxwd使う方法もある
# クリックしたウィンドウ xwd | convert - hoge.png xwd -root | convert - desktop.png  http://www.xmisao.com/2013/09/17/linux-xwindow-screenshot.html</description>
    </item>
    
    <item>
      <title>Linuxのクリップボードマネージャ</title>
      <link>https://yaasita.github.io/2015/04/18/linux-clipboard-manager/</link>
      <pubDate>Sat, 18 Apr 2015 01:31:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/04/18/linux-clipboard-manager/</guid>
      <description>diodon apt-get install diodon  初期設定はCtrl + Alt + vで呼び出し
Preferenceから以下の設定を直した
 Automatically paste selected item
 自動ペーストをやめる
  PluginsのApplication Indicatorのチェックを外す
  なんかCtrl-Vが使えなくなったりするので使うのやめた
klipper KDEのやつ
apt-get install klipper  初期はShift+Zになってるので設定からなおす
全般の選択とクリップボード→選択を無視する
ってやつやると選択しただけでクリップボードに入るのを抑止
できる</description>
    </item>
    
    <item>
      <title>Linuxのターミナルで出来るマリオらしい</title>
      <link>https://yaasita.github.io/2015/04/13/linux-terminal-game/</link>
      <pubDate>Mon, 13 Apr 2015 00:24:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/04/13/linux-terminal-game/</guid>
      <description>すごいなこれ

まさかの？Linuxターミナル上でプレイする『スーパーマリオブラザーズ』
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>LinuxでPDF編集ソフトまとめ</title>
      <link>https://yaasita.github.io/2015/01/04/linux-pdf/</link>
      <pubDate>Sun, 04 Jan 2015 00:17:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/01/04/linux-pdf/</guid>
      <description>libreoffice-pdfimport libreofficeでPDF編集できる
なんか変なところで逆さまになったり微妙だった
でもUIはLibreofficeの感覚で使えるので今後に期待
pdfchain pdftkのGUIフロントエンド
コマンドラインでやった方が良いかな
pdfmod LinuxでPDF編集するならこれが一番いいかもしれない
ページの入れ替え、回転とかできる
左サイドバーにページ一覧が出たらよかったなぁ
pdfsam Javaで動くGUIのPDF編集ソフト
なんか難しくてよくわからなかった
pdfshuffler pdfmodに似てる感じのPDF編集ソフトこっちも直感的で使いやすい
pdfmodに比べて重い気がする
機能も若干少な目
pdftk コマンドライン(CUI)で使うPDF編集ソフト
結合とかはGUIだとうまくできないので、こっちでやった方が良さげ</description>
    </item>
    
    <item>
      <title>modern.ieのVMファイルの解凍</title>
      <link>https://yaasita.github.io/2014/09/23/modern-ie/</link>
      <pubDate>Tue, 23 Sep 2014 22:18:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/09/23/modern-ie/</guid>
      <description>モダンIEというIEテスト用のVM配ってるサイト
sfxの解凍はunrarでできた
unrar e IE11.Win7.ForLinuxVirtualBox.part1.sfx  https://www.modern.ie/ja-jp
Windows7の日本語化について
 WindowsUpdateでオプション選択してLanguage Pack入れる
 コントロールパネルの Clock, Language, and Regionを選択
 TimeZone変更
  http://qiita.com/hnakamur/items/5f2f9e817dd0de60abb2</description>
    </item>
    
    <item>
      <title>teraterm越しに特殊キーを送る</title>
      <link>https://yaasita.github.io/2014/08/24/teraterm-keycode/</link>
      <pubDate>Sun, 24 Aug 2014 23:40:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/08/24/teraterm-keycode/</guid>
      <description>キーをどこで奪われてるのかまず探す
teratem -&amp;gt; bash -&amp;gt; app  teratemでキーを取られているならKEYBOARD.CNFの末尾に以下のように追記する
User(連番)で追記する書式についてはteratemのヘルプ参照
User3=1037,0,$1E User4=1040,0,$11  この例だとUser3でvimの副ファイル切り替え(:h ctrl-^)を出来るようにしている
User4ではDockerのデタッチに使うCtrl-qを通している
Ctrl-qについてはbash側でも取られるのでそっちも変更する
# キー設定を参照 # stopに割り当てられてるのが分かる stty -a # startをundefにする(ついでにstopも) stty start undef stty stop undef  </description>
    </item>
    
  </channel>
</rss>
