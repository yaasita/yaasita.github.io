<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/net/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 16 Jul 2017 01:47:46 +0900</lastBuildDate>
    <atom:link href="/categories/net/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IDCFクラウド試してみた</title>
      <link>https://yaasita.github.io/2017/07/16/idcf-cloud/</link>
      <pubDate>Sun, 16 Jul 2017 01:47:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/16/idcf-cloud/</guid>
      <description> conohaから引っ越し
 ソースIP、パブリックIPの概念がちょっと難しい
 OP25Bはされてない
 多分VMwareで動いてる
 conohaよりはファイヤーウォールとか細かく設定できるけど、ポートフォワードの設定とかしなきゃいけないので若干面倒
  conohaとの比較    機能 conoha IDCF     メモリ 512MB 1GB   料金 680円 540円   CPU(bogomips) 4589.37 5600.00   Disk 20GB 15GB   転送量課金 なし 3,240GB/月まで無料   仮想方式 kvm VMware    </description>
    </item>
    
    <item>
      <title>AWSで監視してSlackに流す設定</title>
      <link>https://yaasita.github.io/2017/06/22/aws-monitor/</link>
      <pubDate>Thu, 22 Jun 2017 04:17:15 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/22/aws-monitor/</guid>
      <description>EC2 -&amp;gt; CloudWatch -&amp;gt; SNS -&amp;gt; Lambda -&amp;gt; Slackみたいなよくある設定例

Slack Customize Slack =&amp;gt; Custom Integrations から Incoming WebHooks 選んで適当にチャンネル選んで追加
URLをメモっておく
EC2 とりあえずaws cli入れて、この辺の監視スクリプトをcronに登録すればOK
apt-get install awscli # カスタムメトリクス用スクリプト apt-get install unzip libwww-perl libdatetime-perl curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O unzip CloudWatchMonitoringScripts-1.2.1.zip rm CloudWatchMonitoringScripts-1.2.1.zip cd aws-scripts-mon cp awscreds.template awscreds.conf vim awscreds.conf # keyIDとSecretKeyを書いておく  こんな感じのやつをcronに登録
~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --swap-util --disk-path=/ --disk-space-util --from-cron  んで即座に反映されるはず
 カスタムメトリクスをパブリッシュする
  CloudWatch ダッシュボード作ったりアラーム書いたりしておく
通知はSNSのTopicsを指定する(後述)
SNS Topicsを新しく作ってTopicネームくらいは適当に埋めておく後で、Lambda側で指定するのでTopicさえあればOK</description>
    </item>
    
    <item>
      <title>絵文字探すときに</title>
      <link>https://yaasita.github.io/2017/05/23/emoji/</link>
      <pubDate>Tue, 23 May 2017 23:24:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/23/emoji/</guid>
      <description>便利な emojipedia
http://emojipedia.org/</description>
    </item>
    
    <item>
      <title>コピー禁止のWebサイトについて</title>
      <link>https://yaasita.github.io/2017/05/21/web-copy-protect/</link>
      <pubDate>Sun, 21 May 2017 01:48:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/21/web-copy-protect/</guid>
      <description>コピー禁止のWordpressサイトが増えてきました
ちょっと検索ワードをコピペするのに不便なので回避方法
1. とりあえずJavaScriptをOFFる これで大半はOK wp-copyprotect って拡張だけならこれで大丈夫
この仕組みの参考実装はこんな感じ
https://gist.github.com/yaasita/7b07710840186561c76d7e5c4af28b2d
chromeならURLバーの左をクリックしてJavaScriptをブロックで

2. noscriptのタグを消す WP Content Copy Protection みたいなやつだと noscript タグの中に画面一杯に広げてコンテンツを見えなくするdivが入るので、chrome developers tools開いて &amp;lt;noscript&amp;gt;タグごと削除する
Oops! It appears that you have disabled your Javascript. In order for you to see this page as it is meant to appear, we ask that you please re-enable your Javascript! みたいな文言はこれ

3. cssでuser-selectをnoneにしている場合 chrome developers toolsでuser-select: text;書き換えてやる

とりあえずここまでやれば大抵コピーできるようになるはず
参考リンク  コピペ禁止サイト
 Webページの「コピペ禁止」を解除・回避するJavaScriptコード</description>
    </item>
    
    <item>
      <title>tumblrの画像を貼るときに直リンクしてはいけない</title>
      <link>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</link>
      <pubDate>Sun, 07 May 2017 02:49:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</guid>
      <description>なぜか？画像のURLはたまに変わりリンク切れしてしまうから
ちゃんとAPIを叩いてポストIDから画像リンクを取得した方が良い
 </description>
    </item>
    
    <item>
      <title>テーマを簡素にしてtumblrを見たいとき</title>
      <link>https://yaasita.github.io/2017/05/06/noneblr/</link>
      <pubDate>Sat, 06 May 2017 04:55:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/06/noneblr/</guid>
      <description>noneblrというサービスが良いかもしれない
これでどんなBlogも一定のUIで見れる
http://noneblr.com/
こんな感じになる
login押すと権限求められるけど怖いからそれはやってない</description>
    </item>
    
    <item>
      <title>Google Cloud Shellのディレクトリ削除</title>
      <link>https://yaasita.github.io/2017/04/06/gcp-shell-homedata/</link>
      <pubDate>Thu, 06 Apr 2017 00:21:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/06/gcp-shell-homedata/</guid>
      <description>120日で削除されるらしい
It&#39;s been over 120 days since you opened Cloud Shell from the Google Cloud Platform console. In 7 days, your Cloud Shell home directory will be automatically scheduled for deletion.  </description>
    </item>
    
    <item>
      <title>relをtumblrテーマに加える</title>
      <link>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</link>
      <pubDate>Tue, 14 Feb 2017 01:05:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</guid>
      <description>tumblrのテーマをDefaultにしてみた
一点気になったのは
リンクがこんな感じでrel属性が指定されてない
&amp;lt;a href=&amp;quot;{PreviousPage}&amp;quot; class=&amp;quot;left&amp;quot;&amp;gt; &amp;lt;a rel=&amp;quot;next&amp;quot; href=&amp;quot;{NextPage}&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;  これだとvimiumの[[, ]]コマンドで辿れないのでそこだけ修正した
 修正後のテーマ
 https://gist.github.com/yaasita/40831000ea20c85f20eeccaa7de5c9c3
  参考リンク
 rel=”next”とrel=”prev” の使い方
   </description>
    </item>
    
    <item>
      <title>FreenomのドメインはWebサイトないと消えちゃう</title>
      <link>https://yaasita.github.io/2017/02/03/freenom-deletes-freely/</link>
      <pubDate>Fri, 03 Feb 2017 02:46:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/03/freenom-deletes-freely/</guid>
      <description>だそうです
Dear yamasita yamasita, The Freenom Review Team has visited your website today. Unfortunately we have to say that today we cancelled your domain YAASITA.ML. The reason for the cancellation is that the website address you used for your free domain name was not accessible or did not follow the guidelines set in our terms and conditions. At this stage, anyone, including yourself, is able to (re)register the cancelled domain YAASITA.</description>
    </item>
    
    <item>
      <title>hostとdigコマンドの挙動が違う時</title>
      <link>https://yaasita.github.io/2017/01/27/host_and_dig_commands_are_different/</link>
      <pubDate>Fri, 27 Jan 2017 01:52:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/27/host_and_dig_commands_are_different/</guid>
      <description>名前を引くときにhostコマンドでは返ってくるがdigだとおかしくなるときがある
こんな感じにすれば同じになる
host example.net. dig +nodnssec +noedns +noadflag example.net. a  WN-G300GRはadビット立ててると応答すらしないらしい</description>
    </item>
    
    <item>
      <title>GMOのConoha VPS使ってみた</title>
      <link>https://yaasita.github.io/2017/01/22/conoha-vps/</link>
      <pubDate>Sun, 22 Jan 2017 23:51:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/22/conoha-vps/</guid>
      <description>非常に良い
さくらVPSより良いかもしれない
 DNSサーバ無料
 OP25B無し
 SSD 20GB
 初期費用なし
 転送量無制限
 時間課金方式と月額方式のハイブリット
  今はコンテナ技術でサクッと移動できちゃうので、
安いクラウドサービス渡り歩くのも良いと思った</description>
    </item>
    
    <item>
      <title>BCCヘッダを落とすのは誰か</title>
      <link>https://yaasita.github.io/2017/01/22/who_drops_bccheader/</link>
      <pubDate>Sun, 22 Jan 2017 00:48:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/22/who_drops_bccheader/</guid>
      <description>BCCヘッダは転送しないで、MTA側で消されるというのは有名な話だけど
実際どんな感じなのか
まずメーラーでBCCを指定して送ったとする
この時BCCヘッダはどのタイミングで消えるか？という問題
MUA(thunderbird等) -&amp;gt; 送信側MTA(postfix等) -&amp;gt; 受信側MTA(postfix等)  thunderbird まずthunderbirdからBCCで送信した場合はそもそもBccヘッダはつけない(Icedove/45.6.0で検証)
envelope toには存在するがそもそもBccヘッダなんてものを書かない
postfix postfixもデフォルトではBccヘッダは落とすようになっている
しかしこの設定を変更すればBccヘッダを落とさないでそのまま配送される
message_drop_headers = bcc, content-length, resent-bcc, return-path   参考
 http://www.postfix.org/postconf.5.html#message_drop_headers
   まとめ 本来見られちゃいけないヘッダをMTAに渡して、多分消してくれるだろうと期待するのはあまりよくないと思う
具体的にはBccヘッダまで綺麗に書いて sendmail -t で送るよりはちゃんとenvelope to を指定して送った方が安全度高い
要するにthunderbirdみたいに送るべき</description>
    </item>
    
    <item>
      <title>blogをmiddlemanからhugoに移行した</title>
      <link>https://yaasita.github.io/2017/01/05/middleman2hugo/</link>
      <pubDate>Thu, 05 Jan 2017 04:50:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/05/middleman2hugo/</guid>
      <description> 使ってみた感想  ビルドはmiddlemanで10分かかってたけど1秒になった
 themeはgeppakuというのを使用 シンプルで良い
 Tumblrリンクのプルリクエストも快くマージしてくれた感謝m(_ _)m
  pagination 周りの部分はちょっとページ数が多いとカラム落ちしたり苦しかったので書き直した
 taxonomiesを追加して、年別のアーカイブページを作成
 アーカイブページを逆順にする対応はなぜかうまくいかなかったので後で調査する
 とりあえずJavaScriptで逆順にした &amp;gt; gist
  hugo serverのライブリロードがとっても良い(ブラウザも自動更新)
 ただしpagination周りで変な書き方するとサーバごと落ちる
  DISQUS周りはちょっとカスタマイズした
 なぜかデフォルトだと読み込まなかったので
  markdown周りはほぼ設定ファイルで完結
 今回の設定はこんな感じ
  middleman時代のリンクを維持するためにUglyURLs設定したけどcategoriesとかリンク切れが面倒だったので中止
 参考: http://wdkk.co.jp/note/2015/0824-hugo-public/
  Highlight.js今回無効にした過去分のcodeブロックが微妙になったので
  総評
Static Site Generatorはとても良い
移行するにも、更新するにもメンテがすごく楽
移行スクリプト 基本的にはファイル名にある時間のデータをTOMLに直して終わり
/home/yamasitaにhugo,middlemanのディレクトリがある前提
 参考リンク  middleman
 hugo
  </description>
    </item>
    
    <item>
      <title>GCPの Cloud DNSでグルーレコード</title>
      <link>https://yaasita.github.io/2016/12/03/google-cloud-dns/</link>
      <pubDate>Sat, 03 Dec 2016 23:22:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/12/03/google-cloud-dns/</guid>
      <description>Google Cloud Platform のDNSでグルーレコード作るときは
こんな感じでNS指定したあとに、Aレコード追加すればグルーレコード(Glue Record)に追加してくれるようだ

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u8-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +norec @ns-cloud-d1.googledomains.com. name.yaasita.xyz. a ; (2 servers found) ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 39015 ;; flags: qr; QUERY: 1, ANSWER: 0, AUTHORITY: 2, ADDITIONAL: 3 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;name.yaasita.xyz. IN A ;; AUTHORITY SECTION: name.yaasita.xyz. 300 IN NS ns1.name.yaasita.xyz. name.</description>
    </item>
    
    <item>
      <title>VALUE-DOMAINでグルーレコード追加</title>
      <link>https://yaasita.github.io/2016/11/25/value-domain/</link>
      <pubDate>Fri, 25 Nov 2016 01:31:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/11/25/value-domain/</guid>
      <description>VALUE-DOMAIN バリュードメインの権威DNSサーバを使いつつ
レコードにグルーレコードを追加する方法
BINDみたくこんな感じにやる
ns cloud cloud.example.net. a cloud.example.net. 123.123.123.123  上位の権威サーバにグルーレコードを設定する場合は
下記参照
https://www.value-domain.com/userguide/manual/othermodns/</description>
    </item>
    
    <item>
      <title>AWSへVMイメージごと移動する手順</title>
      <link>https://yaasita.github.io/2016/11/20/aws-vm-import/</link>
      <pubDate>Sun, 20 Nov 2016 20:45:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/11/20/aws-vm-import/</guid>
      <description> 手順 img作る前に以下を確認しておく
 DHCPを有効にしている
 iptablesを無効に
 rawでイメージを作っておく
  次に以下のコマンドでインポート
# hoge-importってバケット作ったとする # 最初にimgをS3に上げておく aws s3 cp hoge.img s3://hoge-import/hoge.img # IAM周りを準備 aws iam create-role --role-name vmimport --assume-role-policy-document file://trust-policy.json aws iam put-role-policy --role-name vmimport --policy-name vmimport --policy-document file://role-policy.json # インポートタスク開始 aws ec2 import-image --description &amp;quot;hoge server&amp;quot; --disk-containers file://containers.json # 進捗見る aws ec2 describe-import-image-tasks  使ったjsonファイル
 参考リンク  http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/VMImportPrerequisites.html#vmimport-image-formats
 http://docs.aws.amazon.com/cli/latest/reference/ec2/import-image.html
  </description>
    </item>
    
    <item>
      <title>フレッツのDNS挙動</title>
      <link>https://yaasita.github.io/2016/10/31/flets-dns/</link>
      <pubDate>Mon, 31 Oct 2016 00:42:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/10/31/flets-dns/</guid>
      <description>NSレコードに指定したホスト名にCNAMEを持たせてはいけない
という話は有名だがどのように挙動が変わるか見てみる
準備 yaasita.ml. の権威サーバは ns1.aws.yaasita.net. にしておく
NSで指定されてるサーバは CNAMEとして aws.yaasita.net. に設定しておく
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u7-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +norec @aws.yaasita.net. ns1.aws.yaasita.net. a ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 31880 ;; flags: qr aa; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ;; QUESTION SECTION: ;ns1.aws.yaasita.net. IN A ;; ANSWER SECTION: ns1.</description>
    </item>
    
    <item>
      <title>AWSのVPNまわり</title>
      <link>https://yaasita.github.io/2016/07/31/aws-vpn/</link>
      <pubDate>Sun, 31 Jul 2016 00:36:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/07/31/aws-vpn/</guid>
      <description>よくある質問
対応機器
http://aws.amazon.com/jp/vpc/faqs/
ハードウェアVPN接続
- 1つの仮想プライベートゲートウェイあたり10接続
http://docs.aws.amazon.com/ja_jp/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html
http://dev.classmethod.jp/cloud/aws/vpc-connect-hardware-vpn/</description>
    </item>
    
    <item>
      <title>s3fs使う</title>
      <link>https://yaasita.github.io/2016/06/22/s3fs/</link>
      <pubDate>Wed, 22 Jun 2016 13:40:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/06/22/s3fs/</guid>
      <description>s3fsはamazon S3をファイルしすてむのように使うやつ
ただ遅い
基本ここ見てやる
https://github.com/s3fs-fuse/s3fs-fuse/wiki/Installation-Notes
今回はCeontOS6を対象
# paco入れておく yum install paco # コンパイルに必要なもの入れる yum install -y gcc libstdc++-devel gcc-c++ curl-devel libxml2-devel openssl-devel mailcap # fuse wget https://github.com/libfuse/libfuse/releases/download/fuse_2_9_4/fuse-2.8.5.tar.gz ./configure make paco -lD &#39;make install&#39; # /usr/local/lib 追記 vi /etc/ld.so.conf ldconfig # s3fs wget http://s3fs.googlecode.com/files/s3fs-1.74.tar.gz tar xvaf s3fs-1.74.tar.gz cd s3fs-1.74/ autoreconf --install export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig ./configure --prefix=/usr make paco -lD &#39;make install&#39; # mount s3fs hoge-bucket /s3 -o rw,allow_other,uid=501,gid=501,default_acl=public-read su - apps cd /s3 date &amp;gt; date.</description>
    </item>
    
    <item>
      <title>IRCのログを記録するbotbot.me</title>
      <link>https://yaasita.github.io/2016/05/04/botbot-me/</link>
      <pubDate>Wed, 04 May 2016 23:10:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/05/04/botbot-me/</guid>
      <description>https://botbot.me/
botbot.meはIRCに参加させることでログを取って
公開できるbotだ
便利そう</description>
    </item>
    
  </channel>
</rss>
