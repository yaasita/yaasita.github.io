<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>net on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/net/</link>
    <description>Recent content in net on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 22 Dec 2023 02:20:37 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/categories/net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rana8を試す</title>
      <link>https://yaasita.github.io/2023/12/22/rana8/</link>
      <pubDate>Fri, 22 Dec 2023 02:20:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/12/22/rana8/</guid>
      <description>これ
https://web.arena.ne.jp/service/rana8poc.html
なんかほぼGoogleCloudのcloud runだった
サービスはサービスアカウントの鍵をもらって gcloudでdeployするみたいな奴
マニュアル通りやっても以下のようになって使えなかった
ERROR: (gcloud.run.deploy) User [xxxxxxxxxx@rana8-poc.iam.gserviceaccount.com] does not have permission to access projects instance [rana8-poc] (or it may not exist): Permission &#39;cloudbuild.locations.list&#39; denied on &#39;projects/rana8-poc/lo cations/global&#39; cloud runを素で使うより何が良いのかは分からない</description>
    </item>
    
    <item>
      <title>codeiumがとても良い</title>
      <link>https://yaasita.github.io/2023/11/21/codeium/</link>
      <pubDate>Tue, 21 Nov 2023 02:41:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/11/21/codeium/</guid>
      <description>codeium がとても良い
個人利用なら無料 vimにも対応 対応言語が豊富 など
競合との比較はこちら
https://codeium.com/compare
とりあえず自分がVimに入れてる設定
if v:version &amp;gt;= 900 let g:codeium_disable_bindings = 1 let g:codeium_manual = v:true let g:codeium_enabled = v:false imap &amp;lt;script&amp;gt;&amp;lt;silent&amp;gt;&amp;lt;nowait&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Right&amp;gt; codeium#Accept() imap &amp;lt;Down&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(1)&amp;lt;CR&amp;gt; imap &amp;lt;Up&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(-1)&amp;lt;CR&amp;gt; imap &amp;lt;Left&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Clear()&amp;lt;CR&amp;gt; imap &amp;lt;C-A&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Complete()&amp;lt;CR&amp;gt; set statusline=%&amp;lt;%f\ %2*%{&amp;amp;mod&amp;amp;&amp;amp;&amp;amp;bt!=#&#39;terminal&#39;?&#39;[+]&#39;:&#39;&#39;}%0*%{&amp;amp;ro?&#39;[RO]&#39;:&#39;&#39;}%h%w%=codeium:%3{codeium#GetStatusString()}\ %{&#39;[&#39;.(&amp;amp;fenc!=&#39;&#39;?&amp;amp;fenc:&amp;amp;enc).&#39;][&#39;.&amp;amp;ff.&#39;]&#39;}\ %2*%y%0*%6l,%c%V%1*%8P endif 手動で有効にする設定を入れて
Ctrl-Aで保管候補出す
矢印で保管候補の決定</description>
    </item>
    
    <item>
      <title>NURO光のIPアドレスはほぼ変わらない</title>
      <link>https://yaasita.github.io/2023/06/22/nuro-ip/</link>
      <pubDate>Thu, 22 Jun 2023 01:33:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/06/22/nuro-ip/</guid>
      <description>タイトルの通り
WAN側IPは一年以上変わってない</description>
    </item>
    
    <item>
      <title>webページの存在証明</title>
      <link>https://yaasita.github.io/2022/10/02/exists/</link>
      <pubDate>Sun, 02 Oct 2022 22:06:36 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/10/02/exists/</guid>
      <description>このgpg鍵でwebページをpdfにしたやつに署名するという
まったく意味のないサービスを作った
https://exists.cloud.yaasita.net/</description>
    </item>
    
    <item>
      <title>WebARENA Indigoを使ってみた</title>
      <link>https://yaasita.github.io/2022/09/25/webarena/</link>
      <pubDate>Sun, 25 Sep 2022 22:41:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/09/25/webarena/</guid>
      <description>円安でAWSが高いのでこっちにサーバーを移行した
https://web.arena.ne.jp/indigo/
以下気づいたこと箇条書きで
めっちゃ安い 機能は仮想サーバーの起動(kvm),スナップショット,ファイヤーウォールくらい 追加オプションで権威DNSサーバーが使える(500円) 管理画面は少し重い ipv6の設定は手動でやる 1vCPU/1GB memory(Uubuntu 22.04)の場合はnetplanの設定がコメントアウトされてた ファイヤーウォールはipv6非対応 なので、やる場合はnftablesを自分で設定する 管理画面でコンソール開く場合は広告ブロックをOFFにしないとダメ 最初はsshでのアクセスのみコンソール画面に入る場合 はsshで入ってから、パスワード設定が必要 API での操作も可能 OP25Bはされていない 対応OS 転送料金に課金なし 圧倒的に安いのでlightsailみたいなサービスから移行するには良いんじゃないかな</description>
    </item>
    
    <item>
      <title>tumblrのアカウントが消されたけど復旧してもらった</title>
      <link>https://yaasita.github.io/2022/06/22/tumblr-account/</link>
      <pubDate>Wed, 22 Jun 2022 01:43:12 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/06/22/tumblr-account/</guid>
      <description>経緯はこんな感じ
2022/06/08 tumblrで消されたの確認
ログインして、「アカウント消えました」って表示される
その下に問題あったらサポートに連絡してねと書いてあったので、サポートに連絡
2022/06/13 反応がないので、もう一回サポートに連絡
2022/06/14 このお問い合わせフォームバグってないか？
と思ったので、yaasita2アカウント作成して、その中のお問い合わせフォームから連絡
数分で連絡が来て、yaasitaのアカウントでメールしてこいと言われる
yaasitaアカウントのメールで再度問い合わせ
2022/06/15 Hello, Thank you for writing back! We&amp;#39;ve restored your account. Thank you for bringing this problem to our attention. We&amp;#39;re sorry that it occurred, and we&amp;#39;ll do our best to make sure that it doesn&amp;#39;t happen again. You should now be able to log in just fine with your email address and password. Please let me know if there&amp;#39;s anything else I can help you with!</description>
    </item>
    
    <item>
      <title>NURO光のF660AルーターでSPIを有効にする</title>
      <link>https://yaasita.github.io/2022/04/02/nuro-ipv6-spi/</link>
      <pubDate>Sat, 02 Apr 2022 04:11:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/04/02/nuro-ipv6-spi/</guid>
      <description>これを有効にしてもpingには反応してしまうので注意</description>
    </item>
    
    <item>
      <title>ipv4とipv6 Happy Eyeballs</title>
      <link>https://yaasita.github.io/2022/03/18/ipv4-ipv6-happy-eyeballs.md/</link>
      <pubDate>Fri, 18 Mar 2022 03:38:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/03/18/ipv4-ipv6-happy-eyeballs.md/</guid>
      <description>Happy EyeballsはTCPコネクションを先に確立させた方が勝つのでnginxのechoモジュールでsleepとかは意味ない
初回はどちらか一方でも繋がれば遅延は感じないが
一回接続に成功した場合はipv4を使うのかipv6を使うのかキャッシュしている状態なので切り替えに時間がかかる
例えばipv6で繋がっていたサイト側でipv6をドロップさせると
ip6tables -A INPUT -p tcp --dport 443 -j DROP 数秒遅延した後にipv4で接続する</description>
    </item>
    
    <item>
      <title>linuxのipv6一時アドレス2</title>
      <link>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</link>
      <pubDate>Tue, 01 Mar 2022 02:34:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</guid>
      <description>linuxでipv6一時アドレス使う時に設定するカーネルパラメータ
net.ipv6.conf.xxx.temp_prefered_lft = 86400 net.ipv6.conf.xxx.temp_valid_lft = 604800 これの意味は、上記のようにデフォルトの設定86400(1日), 604800(7日)だった場合
xxxインターフェイスにIPv6-1という一時アドレスが付いていたとする
IPv6-1作成してから24時間後にIPv6-2という新しい一時アドレスを取得する
取得後はIPv6-2のアドレスを使用して通信をするようになる
使わなくなったIPv6-1アドレスも7日間は有効なので受信することは可能
という仕組み
つまり、最大で7アドレスになるということ
1日目: IPv6-1
2日目: IPv6-1, IPv6-2
3日目: IPv6-1, IPv6-2, IPv6-3,
という風に増えていく
前回</description>
    </item>
    
    <item>
      <title>Linuxでipv6の一時アドレス</title>
      <link>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</link>
      <pubDate>Sat, 26 Feb 2022 23:16:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</guid>
      <description>systemd-networkdの設定にIPv6PrivacyExtensions足せばOK
(対応するカーネルパラメータ net.ipv6.conf.xxx.use_tempaddr は自動的に設定される)
[Network] Address=192.168.0.2/24 Gateway=192.168.0.1 IPv6PrivacyExtensions=yes temp_valid_lft
と
temp_prefered_lft
については sysctlで設定すること
参考リンク
https://wiki.archlinux.jp/index.php/IPv6 http://dr.slump.jp/IPv6/rfc3041/ https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt </description>
    </item>
    
    <item>
      <title>ipv4/ipv6確認サイト</title>
      <link>https://yaasita.github.io/2022/02/23/ipv4-ipv6/</link>
      <pubDate>Wed, 23 Feb 2022 15:25:52 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/23/ipv4-ipv6/</guid>
      <description>自分のIPv4/IPv6アドレスを確認するサイトを作った
ipv4専用
https://ipv4.cloud.yaasita.net/
ipv6専用
https://ipv6.cloud.yaasita.net/
ipv4/ipv6両対応(どちらのIPが優先されるか確認用)
https://ipv46.cloud.yaasita.net/</description>
    </item>
    
    <item>
      <title>SMTP-TLSRPTのチェック</title>
      <link>https://yaasita.github.io/2022/02/12/tls-report-check/</link>
      <pubDate>Sat, 12 Feb 2022 01:24:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/12/tls-report-check/</guid>
      <description>SMTP-TLSRPTをチェックしてtotal-failure-session-countがゼロより大きいかチェックするスクリプト
(対象はGoogleから貰うレポート)
こんな感じでメールがあるディレクトリを指定する
./index.js ~/Maildir/cur/ </description>
    </item>
    
    <item>
      <title>bridgeインターフェイスのMACアドレス</title>
      <link>https://yaasita.github.io/2021/10/10/machine-id/</link>
      <pubDate>Sun, 10 Oct 2021 05:52:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/10/10/machine-id/</guid>
      <description>KVMを使ったVM内でブリッジインターフェイス作ってそのVMをコピーしたらMACアドレスが重複して通信不能になった
(/etc/systemd/network/にはこんな感じでbridge作る)
https://gist.github.com/yaasita/d527b48f54b0e23c3097a9c69239d534
どうやらこれ、machine-idから作られてるみたいで、VMコピーしたらmachine-id変えた方が良いぽいね
rm /etc/machine-id /var/lib/dbus/machine-id dbus-uuidgen --ensure systemd-machine-id-setup </description>
    </item>
    
    <item>
      <title>tumblrのテキスト情報を取得</title>
      <link>https://yaasita.github.io/2021/05/25/tumblr-metadata/</link>
      <pubDate>Tue, 25 May 2021 00:53:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/05/25/tumblr-metadata/</guid>
      <description>tumblrの検索だと、上手く引っかからない事が多いので
テキストデータはローカルに保存することにした
最初の投稿から何番目を指定することで、ディレクトリの年別ディレクトリに保存します
実行例
./get-tumblr-text.pl --tumblr_id yaasita --save_dir /tmp/ 1234 こんな感じで適度にsleep入れて取得してます
#!/bin/bash set -eux save_file=/tmp/save_num already_get_number=$(cat $save_file) for ((i=$already_get_number; i &amp;lt; $already_get_number + 100; i++));do ./get-tumblr-text.pl --tumblr_id yaasita --save_dir /tmp/ $i sleep 1 done echo $i &amp;gt; $save_file </description>
    </item>
    
    <item>
      <title>GKEでGCSバックエンドと併用する時</title>
      <link>https://yaasita.github.io/2021/02/25/gke-neg/</link>
      <pubDate>Thu, 25 Feb 2021 02:26:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/02/25/gke-neg/</guid>
      <description>よくあるこんな構成
staticなHTML/CSSはGCSから、API部分はGKEからみたいな構成
+---&amp;gt; GCS | ---&amp;gt; GCLB ---+ | +---&amp;gt; k8s(GKE) これ、GCLB部分をingressにするのが良いんだけど、現状バックエンドサービスにGCSを登録できない
1.19ならできるぽいがなんか上手く行かなかったので
とりあえず、今の機能でやるなら、
NEGを作って、そこをGCLBのバックエンドサービスに登録する
https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg
厳密な事を言うと、nodeportもバックエンドサービスに登録できるが、こっちはノードの増減によりエンドポイントが変わってしまうので不適
公式ドキュメント通りだけどこんな感じで作る
あとはGCSにWebサイトの設定と、GCLBの設定すればOK</description>
    </item>
    
    <item>
      <title>postfixのReceived headerを隠す</title>
      <link>https://yaasita.github.io/2020/12/06/postfix-received-header/</link>
      <pubDate>Sun, 06 Dec 2020 01:11:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/12/06/postfix-received-header/</guid>
      <description>この回答通りなんだけど
一応補足とか
自分の環境だと、送信メールサーバーがセカンダリメールサーバーと兼任している
以下のように設定した
/etc/postfix/master.cf
smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no -o smtpd_client_restrictions=$mua_client_restrictions -o smtpd_helo_restrictions=$mua_helo_restrictions -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=smtpscleanup smtpscleanup unix n - y - 0 cleanup -o header_checks=regexp:/etc/postfix/header_checks /etc/postfix/header_checks
/^Received:.*/ IGNORE 最初はsmtp_header_checksをmain.cfに書けば良いかなーと思ったんだけど、
これだと外から入ってきたメール(後にプライマリサーバーにrelayされる)も一律削除されてしまうので都合が悪かった</description>
    </item>
    
    <item>
      <title>AWSのt4gインスタンスを試す</title>
      <link>https://yaasita.github.io/2020/11/05/t4g-instance/</link>
      <pubDate>Thu, 05 Nov 2020 02:58:38 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/11/05/t4g-instance/</guid>
      <description>新しくt4gインスタンスが出たみたいなので試してみた
cpuminer アルゴリズム=lyra2rev2 で測定
name cpu memory hashrate(kH/s) 自宅PC Core i5-4460 3.20GHz 4コア 16G 384 ノートPC LB-C110B Celeron 1037U 1.80GHz 2コア 8G 79 t4g.micro (CPUクレジットあり) ARM CPU 2コア 1G 233 t4g.micro (CPUクレジットなし) ARM CPU 2コア 1G 24 aws lightsail (t2.nano, CPUクレジットあり) Xeon E5-2676 v3 2.40GHz 1コア 512M 81 aws lightsail (t2.nano, CPUクレジットなし) Xeon E5-2676 v3 2.40GHz 1コア 512M 6 前回記事
まとめ t4g良いかもしれない</description>
    </item>
    
    <item>
      <title>Google Domainsを使ってみた</title>
      <link>https://yaasita.github.io/2020/06/03/google-domains/</link>
      <pubDate>Wed, 03 Jun 2020 02:59:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/06/03/google-domains/</guid>
      <description>自分のドメインを
Value Domainから Google Domains へ移管してみた
感想
.net, .com 等は安い .jp は高い whois 代行は標準サービス 標準の権威DNSサーバーは微妙 GCPのGoogle Cloud DNSが使えるわけではない APIでの更新も難しそう HTTPリダイレクトの機能がついてるのは嬉しい ダイナミックDNSはある DNSSECは簡単にできそう SSHFPレコードを設定できる まとめ
みんな使うと良いと思います</description>
    </item>
    
    <item>
      <title>DoHを試す</title>
      <link>https://yaasita.github.io/2020/05/10/doh/</link>
      <pubDate>Sun, 10 May 2020 03:22:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/10/doh/</guid>
      <description>DNS over HTTPSを試す
こんな構成で作る
Nginx -&amp;gt; doh-httpproxy -&amp;gt; systemd-resolved インストール
doh-proxy pip3でインストールすればOK
pip3 install doh-proxy 以下のような設定でserviceを作る
/etc/systemd/system/doh-httpproxy.service
[Unit] Description=doh-httpproxy After=nginx.service [Install] WantedBy=multi-user.target [Service] ExecStart=/usr/local/bin/doh-httpproxy --upstream-resolver=127.0.0.53 --port 8080 --listen-address 127.0.0.1 Nginx側設定例
server { listen 443 ssl http2; server_name doh.example.net; ssl_certificate /etc/letsencrypt/live/doh.example.net/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/doh.example.net/privkey.pem; location /dns-query { proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } } 確認
curl --doh-url https://doh.example.net/dns-query google.co.jp </description>
    </item>
    
    <item>
      <title>BigQueryのカラムタイプ変更</title>
      <link>https://yaasita.github.io/2020/05/09/bigquery-type-change/</link>
      <pubDate>Sat, 09 May 2020 04:42:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/09/bigquery-type-change/</guid>
      <description>BigQueryのカラム変更はREQUIREDをNULLABLEにする以外は出来ません
テーブル スキーマの手動変更
作り直すしかないんですが、分割テーブルだともう一手間必要ですよという話
例えば以下のように分割テーブルを作るとします
bq mk --dataset test bq mk --table \ --time_partitioning_type DAY \ test.first データを投入
echo -e &amp;quot;1\thoge&amp;quot; &amp;gt; /tmp/data.tsv echo -e &amp;quot;2\thuga&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv echo -e &amp;quot;3\tabcd&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200501&#39; /tmp/data.tsv id:NUMERIC,description:STRING bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200502&#39; /tmp/data.tsv id:NUMERIC,description:STRING 取り込み時間別に分割されているのが分かります
echo &amp;quot;#standardSQL&amp;quot; &amp;gt; /tmp/query.sql echo &#39;select _PARTITIONTIME as pt, count(*) as count from test.first group by _PARTITIONTIME order by pt;&#39; &amp;gt;&amp;gt; /tmp/query.</description>
    </item>
    
  </channel>
</rss>
