<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/net/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 18 Aug 2018 17:40:23 +0900</lastBuildDate>
    <atom:link href="/categories/net/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ubuntu18.04でDKIM設定</title>
      <link>https://yaasita.github.io/2018/08/18/dkim/</link>
      <pubDate>Sat, 18 Aug 2018 17:40:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/18/dkim/</guid>
      <description>インストール apt install opendkim opendkim-tools  opendkim設定 mkdir /etc/postfix/dkim/ opendkim-genkey -D /etc/postfix/dkim/ -d example.com -s mail # -d ドメイン # -s セレクタ chgrp opendkim /etc/postfix/dkim/* chmod g+r /etc/postfix/dkim/*  /etc/opendkim.conf
Syslog yes LogWhy Yes UMask 007 Canonicalization relaxed/relaxed Mode sv Socket inet:8891@localhost PidFile /var/run/opendkim/opendkim.pid OversignHeaders From TrustAnchorFile /usr/share/dns/root.key UserID opendkim KeyTable file:/etc/postfix/dkim/keytable SigningTable file:/etc/postfix/dkim/signingtable  /etc/postfix/dkim/keytable
mail._domainkey.example.net example.net:mail:/etc/postfix/dkim/mail.private  /etc/postfix/dkim/signingtable
example.net mail._domainkey.example.net  反映
systemctl restart opendkim.service  postfix設定 以下追記</description>
    </item>
    
    <item>
      <title>AlwaysOnSSLがダメぽい</title>
      <link>https://yaasita.github.io/2018/08/01/alwaysonssl-breaking/</link>
      <pubDate>Wed, 01 Aug 2018 01:03:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/01/alwaysonssl-breaking/</guid>
      <description>S/MIMEもSSL証明書も取れない
(´；ω；｀)ﾌﾞﾜｯ
トップページも繋がらないしもう駄目か・・・</description>
    </item>
    
    <item>
      <title>クライアント証明書&#43;HTTP2</title>
      <link>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</link>
      <pubDate>Sun, 29 Jul 2018 16:36:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</guid>
      <description>SSLRequire は 非推奨みたいなので
クライアント証明書とIP制限を今風に書き直す
あとCNとかも検証するようにした
こんな感じ
&amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI SSLVerifyClient optional &amp;lt;RequireAny&amp;gt; Require ip 192.168.100.0/24 &amp;lt;RequireAll&amp;gt; Require ssl-verify-client Require expr &amp;quot;%{SSL_CLIENT_S_DN_CN} == &#39;hogeclient&#39;&amp;quot; &amp;lt;/RequireAll&amp;gt; &amp;lt;/RequireAny&amp;gt; &amp;lt;/Directory&amp;gt;  あと
Protocols http/1.1 h2  のようにhttp/1.1を先にしないと
curl: (92) HTTP/2 stream 1 was not closed cleanly: HTTP_1_1_REQUIRED (err 13)  こんなエラーになるので注意
参考リンク
 reqexprの説明
 mod_ssl変数一覧
  </description>
    </item>
    
    <item>
      <title>GCPでAWS Batch的な事をやる</title>
      <link>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</link>
      <pubDate>Wed, 20 Jun 2018 23:46:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</guid>
      <description> こんな感じにS3になんか置いて、ファイルがあったら起動して、終わったらshutdownするみたいな奴

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   GCPはインスタンスの起動停止が早いので結構良い感じ
Lambda 処理するファイルが存在して、GCPが動いてたら起動かける

GCP キュー代わりのファイル消してから
bootしてから3分後に実行（ちょっとインターバルないとインスタンスに入るのが大変になる）
処理の最後でshutdownすればOK
/etc/systemd/system/gcp-calc.service
[Unit] Description=gcp-calc Wants=network-pre.target After=multi-user.target [Install] WantedBy=multi-user.target [Service] ExecStart=/root/run.sh Type=oneshot  /etc/systemd/system/gcp-calc.timer
[Unit] Description=gcp calc [Timer] OnBootSec=3min [Install] WantedBy=timers.target  </description>
    </item>
    
    <item>
      <title>クライアント証明書とIP制限</title>
      <link>https://yaasita.github.io/2018/05/26/client-auth/</link>
      <pubDate>Sat, 26 May 2018 03:49:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/05/26/client-auth/</guid>
      <description>外からはクライアント証明書を要求して、中からは素通しさせたいケース
Apache2.4ならこんな感じ
SSLCACertificateFile /etc/apache2/ssl/example.crt &amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI Require ip 192.168.100.0/24 SSLVerifyClient require Satisfy any &amp;lt;/Directory&amp;gt;  curlで確認
curl https://example.net --key client.key --cert cert.crt --http1.1  作るときは /usr/lib/ssl/misc/CA.pl -newreq とかで適当に作る
鍵とセットなら良いのでcommon nameとかは適当
参考リンク プライベートCA作るまで</description>
    </item>
    
    <item>
      <title>GoogleのCloud SDKの署名鍵エラー</title>
      <link>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</link>
      <pubDate>Sat, 07 Apr 2018 02:24:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</guid>
      <description>GCP(google cloud platform)の署名鍵が変わってた
つーか元のgpg鍵の有効期限が切れてる
取得:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease [6,372 B] エラー:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 6A030B21BA07F4FB  なんか探してみると2018年4月1日に作った鍵にしてるみたい
gpg2 --search-keys BA07F4FB gpg: data source: http://gpg.NebrWesleyan.edu:11371 (1) Google Cloud Packages Automatic Signing Key &amp;lt;gc-team@google.com&amp;gt; 2048 bit RSA key BA07F4FB, created: 2018-04-01, expires: 2021-03-31  ということで追加して事なきを得た
gpg2 -a --export BA07F4FB | apt-key add - apt-key del A7317B0F  </description>
    </item>
    
    <item>
      <title>Let&#39;s Encryptのワイルドカード</title>
      <link>https://yaasita.github.io/2018/03/31/lets-wildcard/</link>
      <pubDate>Sat, 31 Mar 2018 03:38:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/31/lets-wildcard/</guid>
      <description>debian testingに
certbot 0.22.2が来てたので使ってみる
とりあえずこんな感じで行った
まだサーバを指定しなきゃいけないけど、これでワイルドカード手に入るのは良い
apt install certbot certbot certonly --manual -d yaasita.net -d *.yaasita.net --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory  </description>
    </item>
    
    <item>
      <title>AlwaysOnSSL</title>
      <link>https://yaasita.github.io/2018/03/21/alwaysonssl/</link>
      <pubDate>Wed, 21 Mar 2018 01:37:01 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/21/alwaysonssl/</guid>
      <description>letsencryptとは違う無料のSSLサービス使ってみた
その名も AlwaysOnSSL
サーバ証明書 使って見た感想
 CAAレコード違反のレポートメールは飛んでこなかった
 証明書の期間は1年間
 CTログはComodo CA に書くみたいでLetsencryptより少ない
 ワイルドカードは無理
 SANに複数のドメイン入れるのも無理
  チェインはこんな感じ
DigiCert Global Root G2 |_ AlwaysOnSSL TLS RSA CA G1 |_ yourdomain.example.com  DigiCertなんで大抵のブラウザならOKなはず
curlで簡単に叩けるのでcertbotが入らない場合はこっちの方が良いかも
certbotが入るならLetsencryptの方が良いと思う
S/MIME  有効期間は1年間
 CSR作って署名してもらうので、秘密鍵は自分で作る安心設計
  チェーンはこんな感じ
Symantec Class 1 Public Primary CertificationAuthority - G6 |_ Symantec Class 1 Individual Subscriber CA - G7  普通にメール受信できるなら作ってもらえるとても良い
CNにメールアドレス入れてCSR作ってからVerifyする
そんで、My Certificatesから中間証明書と証明書ダウンロードしてpkcs12にまとめればOK
openssl pkcs12 -export -in merged.</description>
    </item>
    
    <item>
      <title>プライベートCA作るまで</title>
      <link>https://yaasita.github.io/2018/01/31/private-ca/</link>
      <pubDate>Wed, 31 Jan 2018 18:04:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/31/private-ca/</guid>
      <description>Debian9でやってみた
cd /etc/ssl /usr/lib/ssl/misc/CA.pl -newca /usr/lib/ssl/misc/CA.pl -newreq /usr/lib/ssl/misc/CA.pl -sign # /tmp/ca.pemを入れてもらう openssl x509 -outform PEM -in demoCA/cacert.pem -out /tmp/ca.pem # 変換 openssl x509 -outform PEM -in newcert.pem -out /etc/nginx/ssl/hogehoge.crt # パスフレーズ解除 openssl rsa -in newkey.pem -out /etc/nginx/ssl/hogehoge.key  データベースおかしくなったら
index.txt空っぽすればOK
rm demoCA/index.txt touch demoCA/index.txt  /etc/ssl/openssl.cnf は こんな感じ
証明書の管理は
chromeなら設定 =&amp;gt; 詳細設定 =&amp;gt; SSLの管理からやる
windowsの場合はファイル名を指定して実行 =&amp;gt; certlm.msc と同じこと
あと注意点として、chromeはsubjectAltNameを見るので注意
(EnableCommonNameFallbackForLocalAnchorsってやつを設定するとできるようだけど)</description>
    </item>
    
    <item>
      <title>MonaCoinのマイニング</title>
      <link>https://yaasita.github.io/2017/12/03/mona-coin/</link>
      <pubDate>Sun, 03 Dec 2017 01:30:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/03/mona-coin/</guid>
      <description>モナコインをマイニングしてみる
cpuminer-multiでやってみた
スコア  IDCF Cloud (Light.S1) メモリ1GB 仮想1CPU =&amp;gt; 17.48 kH/s
 自宅PC Core i5-4460 @ 3.20GHz 4コア メモリ 4GB =&amp;gt; 376 kH/s
 ノートパソコン LB-C110B Celeron 1037U 2コア/1.80GHz メモリ8GB =&amp;gt; 91 kH/s
  まとめ CPUマイニングなんてやるもんじゃない←結論</description>
    </item>
    
    <item>
      <title>s3fsとIPアドレス制限だけのpublic bucket</title>
      <link>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</link>
      <pubDate>Tue, 07 Nov 2017 01:36:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</guid>
      <description>s3fsを使ってこんな感じのバケットポリシーのs3をマウントするときのやつ
(hogehogeバケットとその中身を特定IPアドレスの人に開放する)
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Id&amp;quot;: &amp;quot;Policy1509977001523&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } }, { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge/*&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } } ] }  んでs3fsはこんな感じ
s3fs -o public_bucket=1,rw,allow_other,umask=0022,endpoint=ap-northeast-1,default_acl=public-read hogehoge /mnt  public_bucketがポイント</description>
    </item>
    
    <item>
      <title>IDCFクラウド試してみた</title>
      <link>https://yaasita.github.io/2017/07/16/idcf-cloud/</link>
      <pubDate>Sun, 16 Jul 2017 01:47:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/16/idcf-cloud/</guid>
      <description> conohaから引っ越し
 ソースIP、パブリックIPの概念がちょっと難しい
 OP25Bはされてない
 多分VMwareで動いてる
 conohaよりはファイヤーウォールとか細かく設定できるけど、ポートフォワードの設定とかしなきゃいけないので若干面倒
  conohaとの比較 最安プランで比べてみる
転送量のリミットはあるものの総じてIDCFの方が良いかもしれない
   機能 conoha IDCF     メモリ 512MB 1GB   料金 680円 540円   CPU(bogomips) 4589.37 5600.00   Disk 20GB 15GB   転送量課金 なし 3,240GB/月まで無料   仮想方式 kvm VMware    </description>
    </item>
    
    <item>
      <title>AWSで監視してSlackに流す設定</title>
      <link>https://yaasita.github.io/2017/06/22/aws-monitor/</link>
      <pubDate>Thu, 22 Jun 2017 04:17:15 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/22/aws-monitor/</guid>
      <description>EC2 -&amp;gt; CloudWatch -&amp;gt; SNS -&amp;gt; Lambda -&amp;gt; Slackみたいなよくある設定例

Slack Customize Slack =&amp;gt; Custom Integrations から Incoming WebHooks 選んで適当にチャンネル選んで追加
URLをメモっておく
EC2 とりあえずaws cli入れて、この辺の監視スクリプトをcronに登録すればOK
apt-get install awscli # カスタムメトリクス用スクリプト apt-get install unzip libwww-perl libdatetime-perl curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O unzip CloudWatchMonitoringScripts-1.2.1.zip rm CloudWatchMonitoringScripts-1.2.1.zip cd aws-scripts-mon cp awscreds.template awscreds.conf vim awscreds.conf # keyIDとSecretKeyを書いておく  こんな感じのやつをcronに登録
~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --swap-util --disk-path=/ --disk-space-util --from-cron  んで即座に反映されるはず
 カスタムメトリクスをパブリッシュする
  CloudWatch ダッシュボード作ったりアラーム書いたりしておく
通知はSNSのTopicsを指定する(後述)
SNS Topicsを新しく作ってTopicネームくらいは適当に埋めておく後で、Lambda側で指定するのでTopicさえあればOK</description>
    </item>
    
    <item>
      <title>絵文字探すときに</title>
      <link>https://yaasita.github.io/2017/05/23/emoji/</link>
      <pubDate>Tue, 23 May 2017 23:24:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/23/emoji/</guid>
      <description>便利な emojipedia
http://emojipedia.org/</description>
    </item>
    
    <item>
      <title>コピー禁止のWebサイトについて</title>
      <link>https://yaasita.github.io/2017/05/21/web-copy-protect/</link>
      <pubDate>Sun, 21 May 2017 01:48:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/21/web-copy-protect/</guid>
      <description>コピー禁止のWordpressサイトが増えてきました
ちょっと検索ワードをコピペするのに不便なので回避方法
1. とりあえずJavaScriptをOFFる これで大半はOK wp-copyprotect って拡張だけならこれで大丈夫
この仕組みの参考実装はこんな感じ
https://gist.github.com/yaasita/7b07710840186561c76d7e5c4af28b2d
chromeならURLバーの左をクリックしてJavaScriptをブロックで

2. noscriptのタグを消す WP Content Copy Protection みたいなやつだと noscript タグの中に画面一杯に広げてコンテンツを見えなくするdivが入るので、chrome developers tools開いて &amp;lt;noscript&amp;gt;タグごと削除する
Oops! It appears that you have disabled your Javascript. In order for you to see this page as it is meant to appear, we ask that you please re-enable your Javascript! みたいな文言はこれ

3. cssでuser-selectをnoneにしている場合 chrome developers toolsでuser-select: text;書き換えてやる

とりあえずここまでやれば大抵コピーできるようになるはず
参考リンク  コピペ禁止サイト
 Webページの「コピペ禁止」を解除・回避するJavaScriptコード</description>
    </item>
    
    <item>
      <title>tumblrの画像を貼るときに直リンクしてはいけない</title>
      <link>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</link>
      <pubDate>Sun, 07 May 2017 02:49:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</guid>
      <description>なぜか？画像のURLはたまに変わりリンク切れしてしまうから
ちゃんとAPIを叩いてポストIDから画像リンクを取得した方が良い
 </description>
    </item>
    
    <item>
      <title>テーマを簡素にしてtumblrを見たいとき</title>
      <link>https://yaasita.github.io/2017/05/06/noneblr/</link>
      <pubDate>Sat, 06 May 2017 04:55:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/06/noneblr/</guid>
      <description>noneblrというサービスが良いかもしれない
これでどんなBlogも一定のUIで見れる
http://noneblr.com/
こんな感じになる
login押すと権限求められるけど怖いからそれはやってない</description>
    </item>
    
    <item>
      <title>Google Cloud Shellのディレクトリ削除</title>
      <link>https://yaasita.github.io/2017/04/06/gcp-shell-homedata/</link>
      <pubDate>Thu, 06 Apr 2017 00:21:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/06/gcp-shell-homedata/</guid>
      <description>120日で削除されるらしい
It&#39;s been over 120 days since you opened Cloud Shell from the Google Cloud Platform console. In 7 days, your Cloud Shell home directory will be automatically scheduled for deletion.  </description>
    </item>
    
    <item>
      <title>relをtumblrテーマに加える</title>
      <link>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</link>
      <pubDate>Tue, 14 Feb 2017 01:05:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</guid>
      <description>tumblrのテーマをDefaultにしてみた
一点気になったのは
リンクがこんな感じでrel属性が指定されてない
&amp;lt;a href=&amp;quot;{PreviousPage}&amp;quot; class=&amp;quot;left&amp;quot;&amp;gt; &amp;lt;a rel=&amp;quot;next&amp;quot; href=&amp;quot;{NextPage}&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;  これだとvimiumの[[, ]]コマンドで辿れないのでそこだけ修正した
 修正後のテーマ
 https://gist.github.com/yaasita/40831000ea20c85f20eeccaa7de5c9c3
  参考リンク
 rel=”next”とrel=”prev” の使い方
   </description>
    </item>
    
    <item>
      <title>FreenomのドメインはWebサイトないと消えちゃう</title>
      <link>https://yaasita.github.io/2017/02/03/freenom-deletes-freely/</link>
      <pubDate>Fri, 03 Feb 2017 02:46:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/03/freenom-deletes-freely/</guid>
      <description>だそうです
Dear yamasita yamasita, The Freenom Review Team has visited your website today. Unfortunately we have to say that today we cancelled your domain YAASITA.ML. The reason for the cancellation is that the website address you used for your free domain name was not accessible or did not follow the guidelines set in our terms and conditions. At this stage, anyone, including yourself, is able to (re)register the cancelled domain YAASITA.</description>
    </item>
    
  </channel>
</rss>
