<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/program/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 01 Apr 2019 16:12:46 +0900</lastBuildDate>
    <atom:link href="/categories/program/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>tarの差分バックアップ</title>
      <link>https://yaasita.github.io/2019/04/01/tar-backup/</link>
      <pubDate>Mon, 01 Apr 2019 16:12:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/01/tar-backup/</guid>
      <description>前回の続き
でctime変化しちゃってどうしたか？
ファイルサイズとファイル名を取っておいて差分を作ることにした
 こんな感じのスクリプトで、ファイル名 + tab + ファイルサイズで保存する
(厳密にやる場合はsha256とかで)
そんで現在のファイルリストも取って、差分をとる
diff -u previous.txt now.txt | egrep &amp;quot;^\+[^\+]&amp;quot; | perl -ple &#39;s/^\+//;s/\t.+//&#39; &amp;gt; tar.txt  あとは-Tオプションで差分のファイルだけをtarで固める
tar -cvaf hoge.tgz -T tar.txt  </description>
    </item>
    
    <item>
      <title>ELB配下のどれか生きてるインスタンスのAPIを叩く</title>
      <link>https://yaasita.github.io/2019/01/21/post-under-elb/</link>
      <pubDate>Mon, 21 Jan 2019 03:24:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/01/21/post-under-elb/</guid>
      <description>構想

コード

ELBからインスタンス一覧引っ張る所はまだ書いてない
明けましておめでとうございます
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>dynamodbオンデマンド</title>
      <link>https://yaasita.github.io/2018/12/19/dynamodb/</link>
      <pubDate>Wed, 19 Dec 2018 00:53:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/dynamodb/</guid>
      <description> re:Invent 2018で言われたアレ
DynamoDBオンデマンド
のベンチを取ってみた
 ベンチマークに使ったスクリプト
  結論  ほとんどDynamoDB ondemand でOKだと思うj
 オートスケールぽい挙動なのでちょっとずつスケールしてるぽい
 200とかそんくらいのスパイクアクセスがある場合はあらかじめ、プロビジョニングキャパシティにしておいた方が良いと思う
 ただし、オンデマンドの有効化は一日一回だけなので注意
  </description>
    </item>
    
    <item>
      <title>skypeのログフォーマットが変わってた</title>
      <link>https://yaasita.github.io/2018/12/02/skype2json/</link>
      <pubDate>Sun, 02 Dec 2018 01:28:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/02/skype2json/</guid>
      <description>のでちょっとスクリプト修正した
https://github.com/yaasita/skype2json
修正点  yarnじゃなくても良いと聞いたのでnpmにだけにした
 フォーマットが歴代合わせて3つあったので、3つスクリプト書いた(年代は適当)
 libに共通関数をまとめた
  なんか新しいフォーマットだと
nsp_dataってカラムにjsonで突っ込んでるみたいね。json型が無いSQLiteのツライところ
まとめ ころころフォーマットが変わるけどSQLiteになってるからSkypeは簡単にバックアップ出来て良い
LINEはどうしたもんか</description>
    </item>
    
    <item>
      <title>vimとtranslate-shellを連携する</title>
      <link>https://yaasita.github.io/2018/11/23/translate/</link>
      <pubDate>Fri, 23 Nov 2018 00:54:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/23/translate/</guid>
      <description>translate-shellが便利だ
vimrcにこんな感じに書く

英単語の意味をちょっと調べる  翻訳  なんか微妙に画面がバグってるけど、本当はちゃんと表示されてる
まとめ こういうちょっとした改善大事</description>
    </item>
    
    <item>
      <title>githubのwebhook受け取ってjenkins走らせる</title>
      <link>https://yaasita.github.io/2018/11/14/github2jenkins/</link>
      <pubDate>Wed, 14 Nov 2018 01:41:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/14/github2jenkins/</guid>
      <description>無かったので作りました
Github -&amp;gt; Mojolicious -&amp;gt; jenkins   </description>
    </item>
    
    <item>
      <title>徳丸さんのセキュリティ問題(CSRF)</title>
      <link>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</link>
      <pubDate>Sun, 11 Nov 2018 01:33:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</guid>
      <description>徳丸さんがCSRFの問題を出していたので考えてみる
問題：間違ったCSRF対策～初級編～
解答
https://github.com/yaasita/tokumaru-csrf-20181110
なんか最初はXMLHttpRequestとか駆使して、chgmailform.phpからtoken引っこ抜こうと思ったんだけど
CORSとかCORBで無理なんすよね
でよく見るとtokenが無いときの考慮がないよってやつでした
まとめ 最近のブラウザは良く出来てる</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>perlのクロージャ</title>
      <link>https://yaasita.github.io/2018/09/06/perl-closure/</link>
      <pubDate>Thu, 06 Sep 2018 02:43:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/06/perl-closure/</guid>
      <description>これでも良いけど
{ my $count; sub func { return ++$count; } }  最近ならこうstate使って
use feature qw(:5.10); sub func { state $count; return ++$count; }  ただstateって配列とかには使えない</description>
    </item>
    
    <item>
      <title>PerlでElasticsearch</title>
      <link>https://yaasita.github.io/2018/07/04/es-perl/</link>
      <pubDate>Wed, 04 Jul 2018 03:06:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/04/es-perl/</guid>
      <description>perlでElasticsearch
mojoliciousでの例
 </description>
    </item>
    
    <item>
      <title>GCPでAWS Batch的な事をやる</title>
      <link>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</link>
      <pubDate>Wed, 20 Jun 2018 23:46:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</guid>
      <description> こんな感じにS3になんか置いて、ファイルがあったら起動して、終わったらshutdownするみたいな奴

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   GCPはインスタンスの起動停止が早いので結構良い感じ
Lambda 処理するファイルが存在して、GCPが動いてたら起動かける

GCP キュー代わりのファイル消してから
bootしてから3分後に実行（ちょっとインターバルないとインスタンスに入るのが大変になる）
処理の最後でshutdownすればOK
/etc/systemd/system/gcp-calc.service
[Unit] Description=gcp-calc Wants=network-pre.target After=multi-user.target [Install] WantedBy=multi-user.target [Service] ExecStart=/root/run.sh Type=oneshot  /etc/systemd/system/gcp-calc.timer
[Unit] Description=gcp calc [Timer] OnBootSec=3min [Install] WantedBy=timers.target  </description>
    </item>
    
    <item>
      <title>たまにはGDBM使う</title>
      <link>https://yaasita.github.io/2018/04/17/gdbm-file/</link>
      <pubDate>Tue, 17 Apr 2018 01:09:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/17/gdbm-file/</guid>
      <description>2018年にGDBM使う
perl標準モジュールにある
簡単なKVSならこれで
debianだと多分入ってるけど、libperl5.24が無い環境だとダメぽい
#!/usr/bin/perl use strict; use warnings; use feature qw(:5.10); use utf8; use GDBM_File ; my $filename = &amp;quot;gdm&amp;quot;; my %hash; tie %hash, &#39;GDBM_File&#39;, $filename, &amp;amp;GDBM_WRCREAT, 0640; $hash{hoge} = &amp;quot;huga&amp;quot;; say &amp;quot;$_ =&amp;gt; $hash{$_}&amp;quot; for keys %hash;  </description>
    </item>
    
    <item>
      <title>PerlのHTTP::Tiny</title>
      <link>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</link>
      <pubDate>Sat, 07 Apr 2018 04:17:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</guid>
      <description>perlのHTTP::Tinyは標準モジュールなんだけど、IO::Socket::SSLが無くて
IO::Socket::SSL 1.42 must be installed for https support  が出ちゃう場合は
apt install libio-socket-ssl-perl  </description>
    </item>
    
    <item>
      <title>perlのデストラクタ</title>
      <link>https://yaasita.github.io/2018/03/17/perl-destory/</link>
      <pubDate>Sat, 17 Mar 2018 02:57:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/17/perl-destory/</guid>
      <description>Ctrl-Cで止めたときもデストラクタを呼びたいときがある
そういう時は、シグナルハンドラを作ればOK
最後に変数のスコープから外れてデストラクタが呼ばれる
 </description>
    </item>
    
    <item>
      <title>GoogleHomeでPCつける</title>
      <link>https://yaasita.github.io/2018/01/14/google-home/</link>
      <pubDate>Sun, 14 Jan 2018 03:41:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/14/google-home/</guid>
      <description>Mojoliciousで受けてコマンド叩くだけ
IFTTTはこんな感じにして


Mojolicious側のコントローラはこんな感じで受けた

喋りたくない時もあるので、JavaScriptでも叩けるようにした(適当な場所にHTML置いておいた)
function hogeop(){ postjson({key: &#39;huga&#39;}) } function postjson(j) { fetch(&amp;quot;/google&amp;quot;, { method: &amp;quot;POST&amp;quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(j) }).then(res =&amp;gt; res.json()).then(res =&amp;gt; { console.log(res) }); }  結論: こうやって家電を操作できるのは楽しい
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書の有効期限チェック</title>
      <link>https://yaasita.github.io/2017/11/24/ssl-check/</link>
      <pubDate>Fri, 24 Nov 2017 01:54:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/24/ssl-check/</guid>
      <description>なんか必要だったので、シェルとかでも良いけど
 </description>
    </item>
    
    <item>
      <title>maildropの管理UIを作った</title>
      <link>https://yaasita.github.io/2017/09/29/maildrop-admin/</link>
      <pubDate>Fri, 29 Sep 2017 02:38:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/09/29/maildrop-admin/</guid>
      <description>フロントをVue.jsでこんな感じの構成

動作の様子

maildropの設定ファイル(~/.mailfilter)でも良いんだけどちょっと
日付が入れられないのとエントリーが増えてくるとちょっと管理しきれなくなった
一旦こんな感じのJSONを経由することでマシにした感じ
 &amp;quot;JUNKMAIL&amp;quot;: [ { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*atmarkit.co.jp&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; }, { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*facebookmail.com&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; },  サーバサイドの実装
https://github.com/yaasita/maildrop-admin
.mailfilterへの変換処理
  function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img0&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img0&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>iptablesの変更をWebからやる</title>
      <link>https://yaasita.github.io/2017/08/22/imap-iptables/</link>
      <pubDate>Tue, 22 Aug 2017 02:17:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/22/imap-iptables/</guid>
      <description>httpsのほかにもう一個ポートのアクセス制限を面倒見たくなかったのでなんとなくやってみた
httpsでWebUIにアクセスしたらIP許可リストに入れるって処理

PerlのCGIからGo言語で書いたバイナリを呼んでiptablesを更新する的な処理
GoとPerl間はJSONで受け渡す
Goで書いたのはSUIDビット立てたバイナリで叩きたいと思ったから
（なんかうまくいかなくて結局sudoでやったけど)
https://github.com/yaasita/mail-iptables
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>edit-slack.vimちょっと書き直した</title>
      <link>https://yaasita.github.io/2017/08/10/edit-slack/</link>
      <pubDate>Thu, 10 Aug 2017 02:35:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/10/edit-slack/</guid>
      <description>edit-slack.vim をちょっと直した
主な変更点は以下の通り
reactionを表示するようにした

アップロードされたファイルのダウンロードリンクを表示

キーワード検索ができるようにした
例) vim slack://sw/hogehoge vim slack://sw/from:@yamasita vim slack://sw/on:today  取っ散らかってたコードをちょっと直した
https://github.com/yaasita/edit-slack/compare/v0.2.0...v0.8.1
ちょっと見ない間にSlackもなんか変わってて、今までのTest tokenがlegacy tokenって名前になってたり、botアクセス、userアクセスで細かくAPI使用制限がされてるようになってた(前からか？)
 function callback(data){ photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>githubからコードスニペットを探す</title>
      <link>https://yaasita.github.io/2017/07/15/github-code-search/</link>
      <pubDate>Sat, 15 Jul 2017 23:53:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/15/github-code-search/</guid>
      <description>githubのAPIでコードスニペット探すと捗る
  </description>
    </item>
    
  </channel>
</rss>
