<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>program on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/program/</link>
    <description>Recent content in program on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 08 Dec 2019 05:12:12 +0900</lastBuildDate>
    
	<atom:link href="https://yaasita.github.io/categories/program/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GCP Cloud Functions内からサービスアカウントのtoken取る</title>
      <link>https://yaasita.github.io/2019/12/08/service-account-in-cf/</link>
      <pubDate>Sun, 08 Dec 2019 05:12:12 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/08/service-account-in-cf/</guid>
      <description>Cloud Functionsからサービスアカウントのアクセストークンをどうやって取るの？と疑問に思ったので調べた
Google Compute Engineと同じ取り方でOK
&amp;quot;use strict&amp;quot;; const fetch = require(&amp;quot;node-fetch&amp;quot;); exports.handler = async (req, res) =&amp;gt; { const url = &amp;quot;http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/&amp;quot; + &amp;quot;[サービスアカウント名]/token&amp;quot;; const result = await fetch(url, { method: &amp;quot;GET&amp;quot;, headers: { &amp;quot;Metadata-Flavor&amp;quot;: &amp;quot;Google&amp;quot; } }); const token = await result.text(); console.log(token); res.status(200).send(&amp;quot;OK&amp;quot;); };  なんでドキュメントにも書いてある今更な事を書くかというと日本語ドキュメントには見出しが無いんですよね。。。。

まだ翻訳終わってないならまだしも（本当は英文のままで良いからタイトルくらいは残してほしいが) &amp;ldquo;Function Identity&amp;quot;とかクリックするとちゃんと日本語版あるんですよね
なんかメニューがバグってるのかな・・・
とりあえず英語版から探すのをオススメします&amp;hellip;
参考リンク
 関数ID Compute Metadata Server   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].</description>
    </item>
    
    <item>
      <title>GCPでアクセストークンを取得する</title>
      <link>https://yaasita.github.io/2019/11/14/gcp-access-token/</link>
      <pubDate>Thu, 14 Nov 2019 22:32:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/11/14/gcp-access-token/</guid>
      <description>ほとんどのサービスは クライアントライブラリ を使えば
export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json  みたいに環境変数を設定するだけで良いのだが、Cloud Build 等は access tokenを取得して叩く必要がある
という事でGCPのサービスアカウントからアクセストークンを取得するコード
 スコープ一覧はこちら
https://developers.google.com/identity/protocols/googlescopes
アクセストークンのテストは DLP とかがお手軽で良いかな
参考リンク  jose API Document Using OAuth 2.0 for Server to Server Applications  </description>
    </item>
    
    <item>
      <title>AtCoder Beginner Contest 142のD問題</title>
      <link>https://yaasita.github.io/2019/09/30/atcoder-abc142/</link>
      <pubDate>Mon, 30 Sep 2019 05:05:34 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/09/30/atcoder-abc142/</guid>
      <description>問題: D - Disjoint Set of Common Divisors
方針はユークリッドの互除法で最大公約数を出して、最大公約数を素因数分解
存在する素数の数+1(今回は1もお互いに素の数として含めるため)でOKぽい
perlで書いてみる
 解説動画</description>
    </item>
    
    <item>
      <title>1から100の偶数の和を求めるやつ</title>
      <link>https://yaasita.github.io/2019/08/15/sum-even-number/</link>
      <pubDate>Thu, 15 Aug 2019 04:10:11 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/15/sum-even-number/</guid>
      <description>「1から100の偶数の和を求めるワンライナー」まとめ
perlでやってみる
perl -E &#39;$s+=$_%2?0:$_ for 1..100;say$s&#39; perl -E &#39;s/.+/$s+=$&amp;amp;%2?0:$&amp;amp;/e for 1..100;say$s&#39; perl -E &#39;$&amp;quot;=&amp;quot;+&amp;quot;;$a=&amp;quot;@{[1..100]}&amp;quot;;$a=~s/\d+/$&amp;amp;%2?0:$&amp;amp;/eg;eval&amp;quot;say $a&amp;quot;&#39; perl -E &#39;$&amp;quot;=&amp;quot;+&amp;quot;;eval&amp;quot;say @{[grep{$_%2==0}1..100]}&amp;quot;;&#39;  4つ思いついた
結論 simple is best</description>
    </item>
    
    <item>
      <title>例のS3署名バージョン2について</title>
      <link>https://yaasita.github.io/2019/06/25/s3v2/</link>
      <pubDate>Tue, 25 Jun 2019 00:31:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/06/25/s3v2/</guid>
      <description>AWS S3の署名バージョン騒動
大丈夫ぽいけど一応調べた時につかったスクリプト
CloudTrailでログを有効化してからお使いください
 </description>
    </item>
    
    <item>
      <title>Cloud Runがすごく良い</title>
      <link>https://yaasita.github.io/2019/05/29/cloud-run/</link>
      <pubDate>Wed, 29 May 2019 21:42:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/05/29/cloud-run/</guid>
      <description>GCPのCloud Runがめっちゃ便利
覚えなきゃいけないルールは2つ
 Dockerにする事 環境変数 $PORT のポート番号でlistenしてレスポンスを返す事  これだけ
コマンドとかはこの辺見ればすぐできると思います
あと、Chunked Transferみたいな仕組みで進捗を返すみたいなAPIは難しいかもしれない
以下のようなプログラムでちょっとずつレスポンス返しても、バッファリングされてるみたいで、最後ドバっと返ってきた
 </description>
    </item>
    
    <item>
      <title>PKCEをJavaScriptで実装する</title>
      <link>https://yaasita.github.io/2019/04/29/pkce/</link>
      <pubDate>Mon, 29 Apr 2019 01:23:20 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/29/pkce/</guid>
      <description>code_verifier から code_challenge の生成方法について調べた
code_challenge_method=S256の場合は以下のような実装ロジックになる
node.jsで書いた
Oauth2のPKCE
base64エンコードじゃなくてbase64urlエンコードなのが注意点
 </description>
    </item>
    
    <item>
      <title>令和の対応に際して</title>
      <link>https://yaasita.github.io/2019/04/25/reiwa/</link>
      <pubDate>Thu, 25 Apr 2019 02:08:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/25/reiwa/</guid>
      <description>techrachoの記事
perlも追加でお願いします
 </description>
    </item>
    
    <item>
      <title>tarの差分バックアップ</title>
      <link>https://yaasita.github.io/2019/04/01/tar-backup/</link>
      <pubDate>Mon, 01 Apr 2019 16:12:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/04/01/tar-backup/</guid>
      <description>前回の続き
でctime変化しちゃってどうしたか？
ファイルサイズとファイル名を取っておいて差分を作ることにした
 こんな感じのスクリプトで、ファイル名 + tab + ファイルサイズで保存する
(厳密にやる場合はsha256とかで)
そんで現在のファイルリストも取って、差分をとる
diff -u previous.txt now.txt | egrep &amp;quot;^\+[^\+]&amp;quot; | perl -ple &#39;s/^\+//;s/\t.+//&#39; &amp;gt; tar.txt あとは-Tオプションで差分のファイルだけをtarで固める
tar -cvaf hoge.tgz -T tar.txt </description>
    </item>
    
    <item>
      <title>ELB配下のどれか生きてるインスタンスのAPIを叩く</title>
      <link>https://yaasita.github.io/2019/01/21/post-under-elb/</link>
      <pubDate>Mon, 21 Jan 2019 03:24:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/01/21/post-under-elb/</guid>
      <description>構想

コード
 ELBからインスタンス一覧引っ張る所はまだ書いてない
明けましておめでとうございます
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>dynamodbオンデマンド</title>
      <link>https://yaasita.github.io/2018/12/19/dynamodb/</link>
      <pubDate>Wed, 19 Dec 2018 00:53:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/19/dynamodb/</guid>
      <description>re:Invent 2018で言われたアレ
DynamoDBオンデマンド
のベンチを取ってみた
 ベンチマークに使ったスクリプト  結論  ほとんどDynamoDB ondemand でOKだと思うj オートスケールぽい挙動なのでちょっとずつスケールしてるぽい 200とかそんくらいのスパイクアクセスがある場合はあらかじめ、プロビジョニングキャパシティにしておいた方が良いと思う ただし、オンデマンドの有効化は一日一回だけなので注意  </description>
    </item>
    
    <item>
      <title>skypeのログフォーマットが変わってた</title>
      <link>https://yaasita.github.io/2018/12/02/skype2json/</link>
      <pubDate>Sun, 02 Dec 2018 01:28:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/02/skype2json/</guid>
      <description>のでちょっとスクリプト修正した
https://github.com/yaasita/skype2json
修正点  yarnじゃなくても良いと聞いたのでnpmにだけにした フォーマットが歴代合わせて3つあったので、3つスクリプト書いた(年代は適当) libに共通関数をまとめた  なんか新しいフォーマットだと
nsp_dataってカラムにjsonで突っ込んでるみたいね。json型が無いSQLiteのツライところ
まとめ ころころフォーマットが変わるけどSQLiteになってるからSkypeは簡単にバックアップ出来て良い
LINEはどうしたもんか</description>
    </item>
    
    <item>
      <title>vimとtranslate-shellを連携する</title>
      <link>https://yaasita.github.io/2018/11/23/translate/</link>
      <pubDate>Fri, 23 Nov 2018 00:54:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/23/translate/</guid>
      <description>translate-shellが便利だ
vimrcにこんな感じに書く
 英単語の意味をちょっと調べる  翻訳  なんか微妙に画面がバグってるけど、本当はちゃんと表示されてる
まとめ こういうちょっとした改善大事</description>
    </item>
    
    <item>
      <title>githubのwebhook受け取ってjenkins走らせる</title>
      <link>https://yaasita.github.io/2018/11/14/github2jenkins/</link>
      <pubDate>Wed, 14 Nov 2018 01:41:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/14/github2jenkins/</guid>
      <description>無かったので作りました
Github -&amp;gt; Mojolicious -&amp;gt; jenkins  </description>
    </item>
    
    <item>
      <title>徳丸さんのセキュリティ問題(CSRF)</title>
      <link>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</link>
      <pubDate>Sun, 11 Nov 2018 01:33:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</guid>
      <description>徳丸さんがCSRFの問題を出していたので考えてみる
問題：間違ったCSRF対策～初級編～
解答
https://github.com/yaasita/tokumaru-csrf-20181110
なんか最初はXMLHttpRequestとか駆使して、chgmailform.phpからtoken引っこ抜こうと思ったんだけど
CORSとかCORBで無理なんすよね
でよく見るとtokenが無いときの考慮がないよってやつでした
まとめ 最近のブラウザは良く出来てる</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>perlのクロージャ</title>
      <link>https://yaasita.github.io/2018/09/06/perl-closure/</link>
      <pubDate>Thu, 06 Sep 2018 02:43:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/06/perl-closure/</guid>
      <description>これでも良いけど
{ my $count; sub func { return ++$count; } }  最近ならこうstate使って
use feature qw(:5.10); sub func { state $count; return ++$count; }  ただstateって配列とかには使えない</description>
    </item>
    
    <item>
      <title>PerlでElasticsearch</title>
      <link>https://yaasita.github.io/2018/07/04/es-perl/</link>
      <pubDate>Wed, 04 Jul 2018 03:06:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/04/es-perl/</guid>
      <description>perlでElasticsearch
mojoliciousでの例
 </description>
    </item>
    
    <item>
      <title>GCPでAWS Batch的な事をやる</title>
      <link>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</link>
      <pubDate>Wed, 20 Jun 2018 23:46:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</guid>
      <description>こんな感じにS3になんか置いて、ファイルがあったら起動して、終わったらshutdownするみたいな奴

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   GCPはインスタンスの起動停止が早いので結構良い感じ
Lambda 処理するファイルが存在して、GCPが動いてたら起動かける
 GCP キュー代わりのファイル消してから
bootしてから3分後に実行（ちょっとインターバルないとインスタンスに入るのが大変になる）
処理の最後でshutdownすればOK
/etc/systemd/system/gcp-calc.service
[Unit] Description=gcp-calc Wants=network-pre.target After=multi-user.target [Install] WantedBy=multi-user.target [Service] ExecStart=/root/run.sh Type=oneshot  /etc/systemd/system/gcp-calc.timer
[Unit] Description=gcp calc [Timer] OnBootSec=3min [Install] WantedBy=timers.target  </description>
    </item>
    
    <item>
      <title>たまにはGDBM使う</title>
      <link>https://yaasita.github.io/2018/04/17/gdbm-file/</link>
      <pubDate>Tue, 17 Apr 2018 01:09:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/17/gdbm-file/</guid>
      <description>2018年にGDBM使う
perl標準モジュールにある
簡単なKVSならこれで
debianだと多分入ってるけど、libperl5.24が無い環境だとダメぽい
#!/usr/bin/perl use strict; use warnings; use feature qw(:5.10); use utf8; use GDBM_File ; my $filename = &amp;quot;gdm&amp;quot;; my %hash; tie %hash, &#39;GDBM_File&#39;, $filename, &amp;amp;GDBM_WRCREAT, 0640; $hash{hoge} = &amp;quot;huga&amp;quot;; say &amp;quot;$_ =&amp;gt; $hash{$_}&amp;quot; for keys %hash;  </description>
    </item>
    
    <item>
      <title>PerlのHTTP::Tiny</title>
      <link>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</link>
      <pubDate>Sat, 07 Apr 2018 04:17:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</guid>
      <description>perlのHTTP::Tinyは標準モジュールなんだけど、IO::Socket::SSLが無くて
IO::Socket::SSL 1.42 must be installed for https support が出ちゃう場合は
apt install libio-socket-ssl-perl </description>
    </item>
    
    <item>
      <title>perlのデストラクタ</title>
      <link>https://yaasita.github.io/2018/03/17/perl-destory/</link>
      <pubDate>Sat, 17 Mar 2018 02:57:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/17/perl-destory/</guid>
      <description>Ctrl-Cで止めたときもデストラクタを呼びたいときがある
そういう時は、シグナルハンドラを作ればOK
最後に変数のスコープから外れてデストラクタが呼ばれる
 </description>
    </item>
    
    <item>
      <title>GoogleHomeでPCつける</title>
      <link>https://yaasita.github.io/2018/01/14/google-home/</link>
      <pubDate>Sun, 14 Jan 2018 03:41:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/14/google-home/</guid>
      <description>Mojoliciousで受けてコマンド叩くだけ
IFTTTはこんな感じにして


Mojolicious側のコントローラはこんな感じで受けた
 喋りたくない時もあるので、JavaScriptでも叩けるようにした(適当な場所にHTML置いておいた)
function hogeop(){ postjson({key: &#39;huga&#39;}) } function postjson(j) { fetch(&amp;quot;/google&amp;quot;, { method: &amp;quot;POST&amp;quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(j) }).then(res =&amp;gt; res.json()).then(res =&amp;gt; { console.log(res) }); }  結論: こうやって家電を操作できるのは楽しい
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書の有効期限チェック</title>
      <link>https://yaasita.github.io/2017/11/24/ssl-check/</link>
      <pubDate>Fri, 24 Nov 2017 01:54:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/24/ssl-check/</guid>
      <description>なんか必要だったので、シェルとかでも良いけど
 </description>
    </item>
    
    <item>
      <title>maildropの管理UIを作った</title>
      <link>https://yaasita.github.io/2017/09/29/maildrop-admin/</link>
      <pubDate>Fri, 29 Sep 2017 02:38:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/09/29/maildrop-admin/</guid>
      <description>フロントをVue.jsでこんな感じの構成

動作の様子

maildropの設定ファイル(~/.mailfilter)でも良いんだけどちょっと
日付が入れられないのとエントリーが増えてくるとちょっと管理しきれなくなった
一旦こんな感じのJSONを経由することでマシにした感じ
 &amp;quot;JUNKMAIL&amp;quot;: [ { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*atmarkit.co.jp&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; }, { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*facebookmail.com&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; }, サーバサイドの実装
https://github.com/yaasita/maildrop-admin
.mailfilterへの変換処理
  function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img0&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img0&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>iptablesの変更をWebからやる</title>
      <link>https://yaasita.github.io/2017/08/22/imap-iptables/</link>
      <pubDate>Tue, 22 Aug 2017 02:17:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/22/imap-iptables/</guid>
      <description>httpsのほかにもう一個ポートのアクセス制限を面倒見たくなかったのでなんとなくやってみた
httpsでWebUIにアクセスしたらIP許可リストに入れるって処理

PerlのCGIからGo言語で書いたバイナリを呼んでiptablesを更新する的な処理
GoとPerl間はJSONで受け渡す
Goで書いたのはSUIDビット立てたバイナリで叩きたいと思ったから
（なんかうまくいかなくて結局sudoでやったけど)
https://github.com/yaasita/mail-iptables
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>edit-slack.vimちょっと書き直した</title>
      <link>https://yaasita.github.io/2017/08/10/edit-slack/</link>
      <pubDate>Thu, 10 Aug 2017 02:35:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/10/edit-slack/</guid>
      <description>edit-slack.vim をちょっと直した
主な変更点は以下の通り
reactionを表示するようにした

アップロードされたファイルのダウンロードリンクを表示

キーワード検索ができるようにした
例) vim slack://sw/hogehoge vim slack://sw/from:@yamasita vim slack://sw/on:today  取っ散らかってたコードをちょっと直した
https://github.com/yaasita/edit-slack/compare/v0.2.0...v0.8.1
ちょっと見ない間にSlackもなんか変わってて、今までのTest tokenがlegacy tokenって名前になってたり、botアクセス、userアクセスで細かくAPI使用制限がされてるようになってた(前からか？)
 function callback(data){ photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>githubからコードスニペットを探す</title>
      <link>https://yaasita.github.io/2017/07/15/github-code-search/</link>
      <pubDate>Sat, 15 Jul 2017 23:53:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/15/github-code-search/</guid>
      <description>githubのAPIでコードスニペット探すと捗る
  </description>
    </item>
    
    <item>
      <title>AWSで監視してSlackに流す設定</title>
      <link>https://yaasita.github.io/2017/06/22/aws-monitor/</link>
      <pubDate>Thu, 22 Jun 2017 04:17:15 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/22/aws-monitor/</guid>
      <description>EC2 -&amp;gt; CloudWatch -&amp;gt; SNS -&amp;gt; Lambda -&amp;gt; Slackみたいなよくある設定例

Slack Customize Slack =&amp;gt; Custom Integrations から Incoming WebHooks 選んで適当にチャンネル選んで追加
URLをメモっておく
EC2 とりあえずaws cli入れて、この辺の監視スクリプトをcronに登録すればOK
apt-get install awscli # カスタムメトリクス用スクリプト apt-get install unzip libwww-perl libdatetime-perl curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O unzip CloudWatchMonitoringScripts-1.2.1.zip rm CloudWatchMonitoringScripts-1.2.1.zip cd aws-scripts-mon cp awscreds.template awscreds.conf vim awscreds.conf # keyIDとSecretKeyを書いておく  こんな感じのやつをcronに登録
~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --swap-util --disk-path=/ --disk-space-util --from-cron  んで即座に反映されるはず
 カスタムメトリクスをパブリッシュする  CloudWatch ダッシュボード作ったりアラーム書いたりしておく
通知はSNSのTopicsを指定する(後述)
SNS Topicsを新しく作ってTopicネームくらいは適当に埋めておく後で、Lambda側で指定するのでTopicさえあればOK
Lambda 適当にNode.jsで書く</description>
    </item>
    
    <item>
      <title>tumblrの画像を貼るときに直リンクしてはいけない</title>
      <link>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</link>
      <pubDate>Sun, 07 May 2017 02:49:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</guid>
      <description>なぜか？画像のURLはたまに変わりリンク切れしてしまうから
ちゃんとAPIを叩いてポストIDから画像リンクを取得した方が良い
 </description>
    </item>
    
    <item>
      <title>Vue.jsのちょっとしたこと</title>
      <link>https://yaasita.github.io/2017/04/14/vuejs-tips/</link>
      <pubDate>Fri, 14 Apr 2017 15:57:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/14/vuejs-tips/</guid>
      <description>v-on=&amp;quot;click&amp;quot;とmodelは一緒に使えない  watchで監視する  https://github.com/vuejs/vue/issues/1146    ある要素だけが繰り返すわけじゃないときはtemplateで挟むとよい &amp;lt;template v-for=&amp;quot;item in items&amp;quot;&amp;gt; &amp;lt;a&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;/template&amp;gt;  https://jp.vuejs.org/v2/guide/list.html
hash操作はリアクティブにならない https://jp.vuejs.org/v2/guide/reactivity.html
vm.b = 2 // NG Vue.set(object, key, value) // OK  </description>
    </item>
    
    <item>
      <title>ginを使ってechoをLiveReload</title>
      <link>https://yaasita.github.io/2017/04/03/gin-live-reload/</link>
      <pubDate>Mon, 03 Apr 2017 00:05:20 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/03/gin-live-reload/</guid>
      <description>Golangのweb frame workの Echo のライブリロード
ginがproxyしてくれるのでechoサーバのポートを教えてくれればよろしくリコンパイルしてくれる
gin --appPort 8080 r go run server.go  CompileDaemonだとこんな感じか
go get github.com/githubnemo/CompileDaemon CompileDaemon -command=&amp;quot;./run.sh&amp;quot; -include=&amp;quot;*.go&amp;quot;   参考リンク  https://github.com/codegangsta/gin https://github.com/githubnemo/CompileDaemon https://goo.gl/gp6L9z  </description>
    </item>
    
    <item>
      <title>複数ファイルアップロードの実装</title>
      <link>https://yaasita.github.io/2017/04/02/multiple-upload/</link>
      <pubDate>Sun, 02 Apr 2017 04:18:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/02/multiple-upload/</guid>
      <description>multiple指定してuploadフォーム作るときの話
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;files&amp;quot; multiple /&amp;gt;  で複数ファイル選択できるが
Perl CGIで受けるときに↓みたいにすると
my @files = $q-&amp;gt;param(&#39;files&#39;); for my $filename (@files) { my $fn = decode(&amp;quot;UTF-8&amp;quot;, $filename); move($q-&amp;gt;tmpFileName($filename), &amp;quot;/path/to/dir&amp;quot;); }  iOSで選択するとfilenameが全部image.jpgでPOSTされてしまう可能性があるのでダメ
(AndroidとかはOK)
なのでこんな感じにする
my @fhs = $q-&amp;gt;upload(&#39;files&#39;); my %fname_count; for my $fh (@fhs){ my $out_filename = non_overlapping_filenames(&amp;quot;$fh&amp;quot;); my $io_handle = $fh-&amp;gt;handle; open (my $wr,&amp;quot;&amp;gt;&amp;quot;, $out_filename) or die $!; while (&amp;lt;$io_handle&amp;gt;){ print $wr $_; } close $wr; push(@result, decode(&amp;quot;UTF-8&amp;quot;,&amp;quot;$fh&amp;quot;)); }  あと古めのアンドロイドはmultiple指定しても複数ファイル選択ができない
Andoroid4.0はダメだけど6.0だとOKだった</description>
    </item>
    
    <item>
      <title>Vue.jsとモーダルウィンドウ</title>
      <link>https://yaasita.github.io/2017/03/04/vuejs-modal/</link>
      <pubDate>Sat, 04 Mar 2017 02:29:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/04/vuejs-modal/</guid>
      <description>参考実装 slotで後から要素を上書きすればOK
 https://github.com/yaasita/vuejs-modal
参考リンク  https://jp.vuejs.org/v2/examples/modal.html  </description>
    </item>
    
    <item>
      <title>Vue.jsでドラッグ＆ドロップリスト</title>
      <link>https://yaasita.github.io/2017/02/20/draggable-list/</link>
      <pubDate>Mon, 20 Feb 2017 23:17:28 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/20/draggable-list/</guid>
      <description>Vue.js 2.1.10でやってみる
https://github.com/yaasita/vuejs-dad-box
 並び変え終わったらdragendで
var request_url = &amp;quot;https://hogehogehoge&amp;quot; var req = new XMLHttpRequest(); req.open(&#39;POST&#39;, request_url, false); req.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;); req.send(JSON.stringify(this.boxes));  とかやってどっかに飛ばす
んで後ろ側で
$sort_json = json_decode(file_get_contents(&amp;quot;php://input&amp;quot;),true);  とかやって受けた
実際は毎回更新させるのは重いだろうし、交換したDOM二つだけをjsonに乗せるとか工夫の余地あり
参考リンク  多分Vue.js 1 時代のやつ  Vue.jsのリストレンダリングとhtml5のドラッグ＆ドロップの実装   ネイティブ HTML5 ドラッグ＆ドロップ  </description>
    </item>
    
    <item>
      <title>Vue.js内のメソッドはコロン省略しない方が良い</title>
      <link>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs/</link>
      <pubDate>Fri, 17 Feb 2017 02:06:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs/</guid>
      <description>InternetExplorer11で
SCRIPT1003: &#39;:&#39; がありません。  というエラーになるから
// OK var ok = new Vue({ el: &#39;#example1&#39;, data: { }, methods: { HogeMethod: function(){ } } }); // NG var ng = new Vue({ el: &#39;#example2&#39;, data: { }, methods: { HogeMethod(){ } } });  chromeとかMicrosoft Edgeとかなら良いんだけどね</description>
    </item>
    
    <item>
      <title>relをtumblrテーマに加える</title>
      <link>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</link>
      <pubDate>Tue, 14 Feb 2017 01:05:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</guid>
      <description>tumblrのテーマをDefaultにしてみた
一点気になったのは
リンクがこんな感じでrel属性が指定されてない
&amp;lt;a href=&amp;quot;{PreviousPage}&amp;quot; class=&amp;quot;left&amp;quot;&amp;gt; &amp;lt;a rel=&amp;quot;next&amp;quot; href=&amp;quot;{NextPage}&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;  これだとvimiumの[[, ]]コマンドで辿れないのでそこだけ修正した
 修正後のテーマ  https://gist.github.com/yaasita/40831000ea20c85f20eeccaa7de5c9c3   参考リンク  rel=”next”とrel=”prev” の使い方    </description>
    </item>
    
    <item>
      <title>閉じるボタンとVue.js</title>
      <link>https://yaasita.github.io/2017/02/07/close-button-with-vuejs/</link>
      <pubDate>Tue, 07 Feb 2017 23:59:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/07/close-button-with-vuejs/</guid>
      <description>box並べて閉じるボタンつけて、押されたらDOM消して何かするみたいなよくあるインターフェイス
Vue.js使って書いてみた
すごい便利
 https://github.com/yaasita/vuejs-close-button</description>
    </item>
    
    <item>
      <title>新旧リダイレクト</title>
      <link>https://yaasita.github.io/2017/01/16/redirect-githubpage/</link>
      <pubDate>Mon, 16 Jan 2017 23:36:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/16/redirect-githubpage/</guid>
      <description>middlemanからの移行に際してリンクが壊れまくった
GoogleのSearch Console
https://yaasita.tumblr.com/post/155945715637  とりあえずJavaScriptで新URL案内すればいいか
 こんな感じ
https://yaasita.tumblr.com/post/155945774152  旧ページ  記事ページ  https://yaasita.github.io/2010/08/30/5917.html   タグページ  https://yaasita.github.io/tags/soft.html   年ページ  https://yaasita.github.io/2008.html    </description>
    </item>
    
    <item>
      <title>ore_markdownを画像埋め込みに対応させた</title>
      <link>https://yaasita.github.io/2017/01/15/ore_markdown_update2/</link>
      <pubDate>Sun, 15 Jan 2017 02:47:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/15/ore_markdown_update2/</guid>
      <description>またore_markdown-goの修正
こんな感じに画像データをBase64にして埋め込めばHTMLファイル一枚で完結しそうだったので修正した
&amp;lt;img src=&amp;quot;data:image/png;base64,(base64文字列)&amp;quot; alt=&amp;quot;img1&amp;quot;&amp;gt;  修正内容
吐き出されたHTMLの例
https://gist.githubusercontent.com/yaasita/d9b55cff5e52197adf4840cf702e5bd6/raw/c6a3c2f96f4360ad3fa526c6c5ae5302acd26769/preview.html
保存してHTMLを表示させれば画像がみれるはず</description>
    </item>
    
    <item>
      <title>ansibleで作ったロール</title>
      <link>https://yaasita.github.io/2017/01/09/my-ansible-role/</link>
      <pubDate>Mon, 09 Jan 2017 16:24:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/09/my-ansible-role/</guid>
      <description>成果物  ec2でスワップファイル置くとかするやつ  https://github.com/yaasita/ansible_role_amazon-ec2   aptのproxy設定  https://github.com/yaasita/ansible_role_apt-proxy   ブラックホールメールサーバ作るときの設定  https://github.com/yaasita/ansible_role_blackhole-postfix   adminユーザ作るとき  https://github.com/yaasita/ansible_role_admin-server   centosでよくやる設定  https://github.com/yaasita/ansible_role_common_centos   Ubuntuでよくやる設定  https://github.com/yaasita/ansible_role_common_ubuntu   Dockerコンテナにするときによくやる設定  https://github.com/yaasita/ansible_role_docker-care   munin-node入れるとき  https://github.com/yaasita/ansible_role_munin   mysql  https://github.com/yaasita/ansible_role_mysql   nagios nrpe  https://github.com/yaasita/ansible_role_nagios-nrpe   ネットワーク設定  https://github.com/yaasita/ansible_role_network   proxy設定(主にaptの)  https://github.com/yaasita/ansible_role_proxy   railsの初期設定  https://github.com/yaasita/ansible_role_rails   rbenv  https://github.</description>
    </item>
    
    <item>
      <title>ore_markdownをGo言語で書き直した</title>
      <link>https://yaasita.github.io/2017/01/06/ore_markdown_to_golang/</link>
      <pubDate>Fri, 06 Jan 2017 15:44:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/06/ore_markdown_to_golang/</guid>
      <description>久々に ore_markdownを書き直した
感想とか  Ruby(Gem: github-markdown)→Go(russross/blackfriday)で書き直し スタティックファイルもgo-bindataでバイナリに閉じ込めた OS間の違いを意識するのがめんどくさいのでVimでの判定は全部やめてGo側に寄せた 早くて良い  成果物とかライブラリ  作ったもの  https://github.com/yaasita/ore_markdown https://github.com/yaasita/ore_markdown-go   blackfriday  https://github.com/russross/blackfriday https://godoc.org/github.com/russross/blackfriday   go-bindata  https://github.com/jteeuwen/go-bindata    </description>
    </item>
    
    <item>
      <title>blogをmiddlemanからhugoに移行した</title>
      <link>https://yaasita.github.io/2017/01/05/middleman2hugo/</link>
      <pubDate>Thu, 05 Jan 2017 04:50:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/05/middleman2hugo/</guid>
      <description>使ってみた感想  ビルドはmiddlemanで10分かかってたけど1秒になった themeはgeppakuというのを使用 シンプルで良い  Tumblrリンクのプルリクエストも快くマージしてくれた感謝m(_ _)m   pagination 周りの部分はちょっとページ数が多いとカラム落ちしたり苦しかったので書き直した taxonomiesを追加して、年別のアーカイブページを作成 アーカイブページを逆順にする対応はなぜかうまくいかなかったので後で調査する  とりあえずJavaScriptで逆順にした &amp;gt; gist   hugo serverのライブリロードがとっても良い(ブラウザも自動更新)  ただしpagination周りで変な書き方するとサーバごと落ちる   DISQUS周りはちょっとカスタマイズした  なぜかデフォルトだと読み込まなかったので   markdown周りはほぼ設定ファイルで完結  今回の設定はこんな感じ   middleman時代のリンクを維持するためにUglyURLs設定したけどcategoriesとかリンク切れが面倒だったので中止  参考: http://wdkk.co.jp/note/2015/0824-hugo-public/   Highlight.js今回無効にした過去分のcodeブロックが微妙になったので  総評
Static Site Generatorはとても良い
移行するにも、更新するにもメンテがすごく楽
移行スクリプト 基本的にはファイル名にある時間のデータをTOMLに直して終わり
/home/yamasitaにhugo,middlemanのディレクトリがある前提
 参考リンク  middleman hugo  </description>
    </item>
    
    <item>
      <title>更新通知のbashrc</title>
      <link>https://yaasita.github.io/2016/09/10/update-notify/</link>
      <pubDate>Sat, 10 Sep 2016 12:52:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/09/10/update-notify/</guid>
      <description>こんな感じで、更新を促す
 </description>
    </item>
    
    <item>
      <title>s3fs使う</title>
      <link>https://yaasita.github.io/2016/06/22/s3fs/</link>
      <pubDate>Wed, 22 Jun 2016 13:40:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/06/22/s3fs/</guid>
      <description>s3fsはamazon S3をファイルしすてむのように使うやつ
ただ遅い
基本ここ見てやる
https://github.com/s3fs-fuse/s3fs-fuse/wiki/Installation-Notes
今回はCeontOS6を対象
# paco入れておく yum install paco # コンパイルに必要なもの入れる yum install -y gcc libstdc++-devel gcc-c++ curl-devel libxml2-devel openssl-devel mailcap # fuse wget https://github.com/libfuse/libfuse/releases/download/fuse_2_9_4/fuse-2.8.5.tar.gz ./configure make paco -lD &#39;make install&#39; # /usr/local/lib 追記 vi /etc/ld.so.conf ldconfig # s3fs wget http://s3fs.googlecode.com/files/s3fs-1.74.tar.gz tar xvaf s3fs-1.74.tar.gz cd s3fs-1.74/ autoreconf --install export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig ./configure --prefix=/usr make paco -lD &#39;make install&#39; # mount s3fs hoge-bucket /s3 -o rw,allow_other,uid=501,gid=501,default_acl=public-read su - apps cd /s3 date &amp;gt; date.</description>
    </item>
    
    <item>
      <title>やる夫で学ぶ機械学習シリーズ</title>
      <link>https://yaasita.github.io/2016/06/11/deep-learning/</link>
      <pubDate>Sat, 11 Jun 2016 23:55:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/06/11/deep-learning/</guid>
      <description>http://tkengo.github.io/blog/2016/06/06/yaruo-machine-learning0/</description>
    </item>
    
    <item>
      <title>HDDの不良セクタ埋める</title>
      <link>https://yaasita.github.io/2016/03/26/hdd_bad_sector/</link>
      <pubDate>Sat, 26 Mar 2016 00:43:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/03/26/hdd_bad_sector/</guid>
      <description>HDDの不良セクタ代替処理を自動化
Reallocated_Sector_Ctが残ってれば使える手法
https://github.com/yaasita/hdd_badsector
使い方
smartctl -a /dev/sdc | ./hdd_check.pl /dev/sdc  </description>
    </item>
    
    <item>
      <title>Mojoliciousのwebsocket回り</title>
      <link>https://yaasita.github.io/2016/02/21/mojolicious/</link>
      <pubDate>Sun, 21 Feb 2016 02:29:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/02/21/mojolicious/</guid>
      <description>websocketの開いてもデフォルト15秒でタイムアウトするのが嫌なら
↓みたいな感じでtimeout伸ばす
Mojo::IOLoop-&amp;gt;stream($self-&amp;gt;tx-&amp;gt;connection)-&amp;gt;timeout(300);    参考リンク http://kazuph.hateblo.jp/entry/20120310/1331395725 https://github.com/yuki-kimoto/mojolicious-guides-japanese/wiki  </description>
    </item>
    
    <item>
      <title>下位10%のダメなエンジニアシリーズ</title>
      <link>https://yaasita.github.io/2016/01/25/dame-engineer/</link>
      <pubDate>Mon, 25 Jan 2016 00:23:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/01/25/dame-engineer/</guid>
      <description>パズル1  http://tango-ruby.hatenablog.com/entry/2015/11/30/122814 http://challenge-your-limits.herokuapp.com/  答え
curl http://challenge-your-limits.herokuapp.com/call/me # getだめだよって怒られる curl -F &amp;quot;hoge=hoge&amp;quot; http://challenge-your-limits.herokuapp.com/call/me # 適当にPOSTすると正しいURLを教えてくれる curl -F &amp;quot;name=hoge&amp;quot; -F &amp;quot;email=huga@hoge.com&amp;quot; \ http://challenge-your-limits.herokuapp.com/challenge_users # あとはこんな感じで  パズル2  http://tango-ruby.hatenablog.com/entry/2015/12/28/212010 http://challenge-your-limits2.herokuapp.com/  答え
curl http://challenge-your-limits2.herokuapp.com/call/my/APIs # メソッドが違うらしい curl -X DELETE http://challenge-your-limits2.herokuapp.com/call/my/APIs # いろいろ試すとDELETEで通る curl http://challenge-your-limits2.herokuapp.com/c2_users/12/hacker_apply # 案内されたURLにリクエストするとなんか違うらしい curl http://challenge-your-limits2.herokuapp.com/help/me/out # とりあえず登録 curl -F &amp;quot;username=yaasita&amp;quot; -F &#39;email=hoge1@example.com&#39; \ http://challenge-your-limits2.heroku/app.com/c2_users/ # 帰ってきた値でBASIC認証 curl --user yaasita:uRd4yy-imPbHBR4W http://challenge-your-limits2.herokuapp.com/c2_users/10 # あとは帰ってきた文字列をBASE64デコード  パズル3  http://tango-ruby.hatenablog.com/entry/2016/01/10/125615 http://challenge-your-limits3.herokuapp.com/  答え</description>
    </item>
    
    <item>
      <title>素因数分解の話</title>
      <link>https://yaasita.github.io/2016/01/11/factor/</link>
      <pubDate>Mon, 11 Jan 2016 02:20:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2016/01/11/factor/</guid>
      <description>素因数分解してくれるサービス
http://factordb.com/
自分のSSH鍵がリストされてないか確認してみる
# 公開鍵の modulus ssh-keygen -m PKCS8 -e -f authorized_keys &amp;gt; kagi openssl rsa -pubin -inform PEM -text -noout &amp;lt; kagi &amp;gt; modulus # 秘密鍵の modulus とか prime1, prime2の確認 openssl rsa -text -noout -in ~/.ssh/id_rsa  こんな感じのスクリプトで10進数にすればOK
perlで大きめの数値計算する例も
 載ってない一安心
  http://goo.gl/Qqaed5
  http://goo.gl/yKVyUH
  参考リンク
 TeslaCrypt（vvvウイルス）によって暗号化されたファイルの復号手順メモ    </description>
    </item>
    
    <item>
      <title>ISUCON5で惨敗した件</title>
      <link>https://yaasita.github.io/2015/09/30/isucon5/</link>
      <pubDate>Wed, 30 Sep 2015 00:38:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/09/30/isucon5/</guid>
      <description>ISUCON5に参加してきました
T・D・U！T・D・U！という名前で出てみました
最高スコアは5000ちょっとでしたOTZ
感想  ISUCON  会社以外の人ととチーム組むと他社の事情とか聞けて結構良いかもしれない idobata,GCE(Google Compute Engine)とか使ったことなかったからいい機会だったかも VM渡されて時間内に早くするんだ！って競技はルールも分かりやすくて面白い 惨敗だったけど楽しかったし勉強になった   GCP(Google Cloud Platform)  なんかAWS慣れてる所為もあるんだろうけど結構手間取った ついでに触ったGoogle Cloud DNSはRoute53の方が高機能かな～ あらかじめユーザ名＋鍵登録しておけばインスタンス立ち上げ時にユーザ作って鍵設定までしてくれて便利(小並感   idobata  slackと違って1ユーザのアカウントをチーム内で共有するみたいな感じなので  会社内のチャット→slack 会社を跨いだメンバーとのやり取り→idobataみたいな感じがよいのかな   ちょっとISUCON中は重かったけどこれからに期待    反省  最初に落ち着いて計測してみたほうが良かったかも  制限時間があるから焦って、手当たり次第に対応してたけどもっと計測に時間とってやることやらない事決めてから取り掛かれば良かったかも   troterにほぼ任せちゃったので。。。   役割決めないとだったな お前これやる、俺これやる的な話してから取り掛かるべきだったかも   やっぱコード読まなきゃダメ  パラメータチューニングとかでもちょっとはスコア上がるけど、ロジック見て良い感じの実装にするのは必須ですた 例年 sinatraアプリらしいので一個くらいは作ってから望むべきだったかも    参考リンク  ISUCON5の予選に参加して惨敗してきました #isucon   function callback(data){ var photos = data.</description>
    </item>
    
    <item>
      <title>コードを書いて実力判定</title>
      <link>https://yaasita.github.io/2015/06/06/codeeval/</link>
      <pubDate>Sat, 06 Jun 2015 21:50:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/06/06/codeeval/</guid>
      <description>コード書くと評価してくれるようなサービス
https://www.codeeval.com/browse/1/</description>
    </item>
    
    <item>
      <title>簡易監視スクリプト</title>
      <link>https://yaasita.github.io/2015/06/02/kanshi/</link>
      <pubDate>Tue, 02 Jun 2015 00:02:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/06/02/kanshi/</guid>
      <description>自分で自分を監視するperlスクリプト
https://github.com/yaasita/kanshi-self</description>
    </item>
    
    <item>
      <title>Meteor チュートリアル 01</title>
      <link>https://yaasita.github.io/2015/05/10/meteor-tutorial01/</link>
      <pubDate>Sun, 10 May 2015 00:28:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2015/05/10/meteor-tutorial01/</guid>
      <description>話題のMeteorを触ってみた
discovermeteorっていうチュートリアル本があるのでやってみる
なんか原文は有料になってる気がするけど翻訳版は読めるみたい
http://ja.discovermeteor.com/
とりあえず最初の方だけ
Getting Started インストール
途中でsudoするので出来るようにしておく
curl https://install.meteor.com | sh  最初に以下のコマンドを発行して作る
meteor create microscope  ちなみにこの.meteor/.gitignoreに書かれてる
.meteor/.local/の中を消せばリセットされる
パッケージの追加
meteor add mizzao:bootstrap-3 meteor add underscore  ディレクトリ追加
mkdir server client public lib  実行について
 server =&amp;gt; サーバ上でのみ実行 client =&amp;gt; クライアント上でのみ実行 それ以外はどちらでも動く publicには静的ファイルを置く libはどのファイルよりも先に実行される main.*というファイル名は一番最後に実行される  CSSを追加
mkdir client/stylesheets vi client/stylesheets/style.css  https://github.com/yaasita/meteor-microscope/tree/88cc746c372b13dae6a669c014c764320a8e776e
Deployment deployしてみる
meteor deploy yaasita.meteor.com  なんかこれでできるぽい
modulusというのを使うのがいいらしい
npm install -g modulus ndenv rehash modulus login modulus project create  modulusでmongodb使うにはダッシュボードからDATABASESを選んでいける</description>
    </item>
    
    <item>
      <title>chromeのキャッシュから画像引っ張って保存する</title>
      <link>https://yaasita.github.io/2014/11/15/chrome-chache-jpg/</link>
      <pubDate>Sat, 15 Nov 2014 22:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/11/15/chrome-chache-jpg/</guid>
      <description>キャッシュはC:\Users\hogeuser\AppData\Local\Google\Chrome\User Data\Default\Cacheに保存されている
そっから引っ張ってきてLinuxとかで以下のコマンドで変換する
file f_000* | grep JPEG | perl -F: -nlae &#39;print $F[0]&#39; | xargs -i mv {} {}.jpg  Twitterの画像引っ張って来るためにやった
本当はキャッシュを削除して該当のページだけを見てから保存する方法がいいのかも</description>
    </item>
    
    <item>
      <title>jQuery File Uploadをリバースプロキシ下で使う</title>
      <link>https://yaasita.github.io/2014/10/21/jquery-file-upload-patch/</link>
      <pubDate>Tue, 21 Oct 2014 01:08:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/10/21/jquery-file-upload-patch/</guid>
      <description>デフォルトだとHTTP_X_FORWARDED_HOST等のヘッダは解釈してくれないので、
以下のような設定にしてHOSTヘッダも化かす(apacheの場合)
ProxyPreserveHost On ProxyPass / http://hoge.example.com/ ProxyPassReverse / http://hoge.example.com/  HTTP_X_FORWARDED_HOSTも解釈して欲しかったら以下のようなパッチを当てる
 パッチの当て方
patch -p0 &amp;lt; rproxy.patch  </description>
    </item>
    
    <item>
      <title>ワークツリー付きのgit共有リポジトリ</title>
      <link>https://yaasita.github.io/2014/10/20/work-tree-git/</link>
      <pubDate>Mon, 20 Oct 2014 01:21:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/10/20/work-tree-git/</guid>
      <description>作ったリポジトリを横断的に検索したいときbareリポジトリだと
検索しにくいので、Work Tree付きの共有リポジトリ作った
ついでに、bitbucketのリポジトリもローカルに持ってきたときのメモ
 関連
gitでbareじゃない共有リポジトリを作る</description>
    </item>
    
    <item>
      <title>CGI(perl)でメール送る</title>
      <link>https://yaasita.github.io/2014/10/13/mail-cgi/</link>
      <pubDate>Mon, 13 Oct 2014 22:42:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/10/13/mail-cgi/</guid>
      <description>CGIでメール送るときの例
POSTされる文字コードがよくわからない場合は
nkf通してヨロシクやってもらう
CSRF対策は前の画面でセッション作っておけば良いです
 </description>
    </item>
    
    <item>
      <title>簡易Radiko録音スクリプトらしい</title>
      <link>https://yaasita.github.io/2014/08/27/radiko-recording/</link>
      <pubDate>Wed, 27 Aug 2014 00:49:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/08/27/radiko-recording/</guid>
      <description>らしい
https://gist.github.com/matchy2/3956266</description>
    </item>
    
    <item>
      <title>vimでキータイプ音を鳴らす</title>
      <link>https://yaasita.github.io/2014/08/11/vim-sound/</link>
      <pubDate>Mon, 11 Aug 2014 06:06:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/08/11/vim-sound/</guid>
      <description>.gvimrc
autocmd! TextChangedI * silent! execute &amp;quot;!aplay /tmp/wav/seq1_key1.wav &amp;amp;&amp;quot;  参考
http://tekkoc.tumblr.com/post/63418217996/vim
効果音あるところ
http://www.skipmore.com/sound/index_04.html</description>
    </item>
    
    <item>
      <title>paizaのオンラインハッカソン</title>
      <link>https://yaasita.github.io/2014/08/02/paiza-kirishima/</link>
      <pubDate>Sat, 02 Aug 2014 14:03:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/08/02/paiza-kirishima/</guid>
      <description>https://paiza.jp/poh/kirishima
 結果
http://paiza.jp/poh/kirishima/result/aa7b9f29d7942c7e5646bd10d758c434</description>
    </item>
    
    <item>
      <title>vimの書き込みと同時に別ファイルに書き出す</title>
      <link>https://yaasita.github.io/2014/07/19/vim-backup-write/</link>
      <pubDate>Sat, 19 Jul 2014 22:48:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/07/19/vim-backup-write/</guid>
      <description>vimrcを書いたら別のファイルにも書き出す例
 </description>
    </item>
    
    <item>
      <title>emailアドレスの存在チェックプログラム</title>
      <link>https://yaasita.github.io/2014/07/02/email-exists-check/</link>
      <pubDate>Wed, 02 Jul 2014 12:14:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/07/02/email-exists-check/</guid>
      <description>RCPT TO送ってOKなら閉じる
 DNSだけ調べる
 参考リンク
 https://gist.github.com/mikedamage/5564196  </description>
    </item>
    
    <item>
      <title>tumblrにpostするコマンド作った</title>
      <link>https://yaasita.github.io/2014/06/15/tumblr_post_nodejs/</link>
      <pubDate>Sun, 15 Jun 2014 12:48:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/06/15/tumblr_post_nodejs/</guid>
      <description>gistコマンドみたいにtumblrにポストできたら便利なので作った
tumblrwksの使い方はtumblrwks/testに大体書いてある
npm install -g tumblrwks   参考リンク  tumblrwks gem tumblr_clientを使ってみた tumblrのAPI回り  </description>
    </item>
    
    <item>
      <title>gem tumblr_clientを使ってみた</title>
      <link>https://yaasita.github.io/2014/06/08/tumblr_client/</link>
      <pubDate>Sun, 08 Jun 2014 23:39:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/06/08/tumblr_client/</guid>
      <description>使い方 アプリ登録をしておいて以下のコマンドでアクセストークン取得
gem install tumblr_client tumblr  うまくいけば~/.tumblrに設定が作られる
参考リンク  tumblr_clientを使ってTumblr APIを利用する  </description>
    </item>
    
    <item>
      <title>middlemanのbuildを自動化する</title>
      <link>https://yaasita.github.io/2014/05/25/middleman_build/</link>
      <pubDate>Sun, 25 May 2014 23:42:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/25/middleman_build/</guid>
      <description>こんな感じのスクリプトをcronで回せばOK
 </description>
    </item>
    
    <item>
      <title>Linuxで一定時間操作しなかったらpm-suspend</title>
      <link>https://yaasita.github.io/2014/05/25/auto_suspend/</link>
      <pubDate>Sun, 25 May 2014 02:54:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/25/auto_suspend/</guid>
      <description>dwm使ってるからこういうのも自分で作らなきゃならない
5,10,15分にマウスの位置が変わらなかったらサスペンドする
~/.xsessionrc とかにこんな感じで追記
/sbin/start-stop-daemon --start -v -b -m -p $PIDFILE -x ~/.dwm/auto_suspend.sh  必要なツールも事前にインストールしておく
apt-get install xdotool pm-utils   </description>
    </item>
    
    <item>
      <title>middlemanについて</title>
      <link>https://yaasita.github.io/2014/05/25/middleman/</link>
      <pubDate>Sun, 25 May 2014 00:26:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/25/middleman/</guid>
      <description>middleman blog gem &amp;quot;middleman-blog&amp;quot; middleman init middleman --template=blog  config.ru # 上のほうにあるUTC消す Time.zone = &amp;quot;Tokyo&amp;quot; # 一番最後に以下追加 set :markdown, :tables =&amp;gt; true, :autolink =&amp;gt; true, :fenced_code_blocks =&amp;gt; true, :with_toc_data =&amp;gt; true, :hard_wrap =&amp;gt; true, :strikethrough =&amp;gt; true set :markdown_engine, :redcarpet # sass compass_config do |config| config.output_style = :expanded end   http://qiita.com/yterajima/items/d7deec7cc0caaf95982e  新規投稿 be middleman article yamasita_test  パーマリンク修正 blog.permalink = &amp;quot;{year}/{month}/{title}.html&amp;quot;  アーカイブページ config.ruに以下のように書く
#blog.calendar_template = &amp;quot;calendar.html&amp;quot; blog.year_template = &amp;quot;calendar.</description>
    </item>
    
    <item>
      <title>octopressについて</title>
      <link>https://yaasita.github.io/2014/05/25/octopress/</link>
      <pubDate>Sun, 25 May 2014 00:23:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/25/octopress/</guid>
      <description>使い方 git clone git://github.com/imathis/octopress.git octopress cd octopress bundle install rake install  投稿 bundle exec rake new_post[&amp;quot;1st_post&amp;quot;] bundle exec rake generate  編集 ↓を編集する source/_posts/2014-02-09-1st-post.markdown bundle exec rake generate bundle exec rake watch #これで自動的にgenerate  Liquid # 以下みたいにすると変数とれる {{ page.title }}  サイドバーにアーカイブ表示 &amp;amp; カテゴリーリスト  作ったgist 月別アーカイブ  参考リンク  GitHubPage liquid  </description>
    </item>
    
    <item>
      <title>jekyllについて</title>
      <link>https://yaasita.github.io/2014/05/25/jekyll/</link>
      <pubDate>Sun, 25 May 2014 00:19:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/25/jekyll/</guid>
      <description>使い方 # 作成 jekyll build # jekyllサーバ 更新監視 jekyll server -w  _config.ymlにこう書く
GFM対応
name: Your New Jekyll Site markdown: redcarpet pygments: true redcarpet: extensions: [&amp;quot;no_intra_emphasis&amp;quot;, &amp;quot;fenced_code_blocks&amp;quot;, &amp;quot;autolink&amp;quot;, &amp;quot;tables&amp;quot;, &amp;quot;with_toc_data&amp;quot;, &amp;quot;strikethrough&amp;quot;]  bloggerからの移行  import bloggerからの移行スクリプト?  参考リンク  ずぼらな人のための Jekyll 入門 Jekyllいつやるの？ジキやルの？今でしょ！ 最初にインストールした Jekyll プラグイン  </description>
    </item>
    
    <item>
      <title>bloggerからmiddlemanに移行した</title>
      <link>https://yaasita.github.io/2014/05/17/blogger2middleman/</link>
      <pubDate>Sat, 17 May 2014 00:18:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/05/17/blogger2middleman/</guid>
      <description>bloggerからmiddleman(というかこのページ)に移行したときのやり方メモ
  bloggerからデータをエクスポートする
 管理画面から　設定　⇒　その他　⇒　ブログをエクスポート    XMLファイルが一行が長いので整形
 &amp;gt;&amp;lt;を&amp;gt;\n&amp;lt;に変換    以下のようなスクリプトentry事に分解
   整形
   こんな感じでできたファイルをbuildすればOK
$ bundle exec middleman build  </description>
    </item>
    
    <item>
      <title>tmuxでbashの履歴を即座に書き出す設定</title>
      <link>https://yaasita.github.io/2014/04/29/tmux_bash/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/04/29/tmux_bash/</guid>
      <description>function share_history { history -a history -c history -r } PROMPT_COMMAND=&#39;share_history&#39; shopt -u histappend  </description>
    </item>
    
    <item>
      <title>50%の確率でジョブを走らせる</title>
      <link>https://yaasita.github.io/2014/04/06/43/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2014/04/06/43/</guid>
      <description> #50%の確率で当ジョブを走らせる
num=`expr $RANDOM % 10`
if [ $num -le 4 ]
then
logger &#34;job Start...50%&#34;
else
logger &#34;Job Cancel...50%&#34;
exit 0
fi
 </description>
    </item>
    
    <item>
      <title>rsyncを蹴るためのラッパーをwshで書いた</title>
      <link>https://yaasita.github.io/2013/10/13/432/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/10/13/432/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Cookie Clickerで遊んでみた</title>
      <link>https://yaasita.github.io/2013/09/23/453/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/09/23/453/</guid>
      <description> 日本語版はこちら
http://cafe-capy.net/cookieclicker/
貯蔵数が焼いた数を上回っちゃったりしてたから不正とみなされちゃったけど最終的なデータはこちら
MS4wMzZ8fDEzNzk3OTY0MDAxNzZ8MTExMTExfDIuODQyMjMzOTk5Mzk0ODU3M2UrMjg7MjQzODM3NDc4MTg4NjU7MjkyNDsxMDsyNjE5MDI0Njc1NzszMTstMTstMTswOzA7MDswOzY1OzI0NzN8MzI5LDMzMiw1MzcwMTczODQ3MiwwOzIwMSwyMDEsMTc4MDEzMDQ4NiwwOzIwMCwyMDAsMjc0MjQ0ODIsMDsyMDMsMjAzLDk5MzA3NDM3LDA7MTY3LDE2NywzMjk4NDc2NzIsMDsxMDYsMTA2LDM5OTE3NjQyNSwwOzEwNywxMDcsMTI2MzM4Njc5NywwOzExOSwxMTksMTY1NTgwODE5NTksMDsxMjUsMTI1LDEzNzU4NjIxMzM3NSwwOzEzNiwxMzYsMTA4OTYwMzI2OTkwOSwwO3w0NTAzNTk5NjI3MzcwNDk1OzQ1MDM1OTk2MjczNzA0OTU7MjI1MTgwMTk2MTE2ODUxMTs0NTAzNTczNzIzNDc4NTI3OzEwNDg1NzV8NDUwMjQ5ODEwMjQ3Njc5OTsxNzUxMTY1MDE2NDczNQ%3D%3D%21END%21

cookie編集時に使ったスクリプト
 </description>
    </item>
    
    <item>
      <title>rubyを駆使して敵を倒していくゲーム</title>
      <link>https://yaasita.github.io/2013/07/28/661/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/07/28/661/</guid>
      <description>Ruby Warrior
https://www.bloc.io/ruby-warrior/</description>
    </item>
    
    <item>
      <title>squid3でviaヘッダを任意の値に変更する</title>
      <link>https://yaasita.github.io/2013/07/13/763/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/07/13/763/</guid>
      <description>こんな感じに書けばいいらしい
request_header_access VIA deny all
request_header_replace VIA 1.1 Squid3

http://green-rabbit.sakura.ne.jp/blog/2010/04/28/1320/</description>
    </item>
    
    <item>
      <title>ruby mechanizeで画像スクレイピングしてみる</title>
      <link>https://yaasita.github.io/2013/04/29/927/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/04/29/927/</guid>
      <description>画像収集スクリプト書いた
hogeimgダウンロード =&amp;amp;gt; id=nextなオブジェクトクリック =&amp;amp;gt; 以下くりかえし
リトライ回数と繰り返し回数は適宜修正すること</description>
    </item>
    
    <item>
      <title>opensslでstarttlsのSMTPをコマンド実行</title>
      <link>https://yaasita.github.io/2013/04/12/1030/</link>
      <pubDate>Fri, 12 Apr 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/04/12/1030/</guid>
      <description> こんな感じでやってみよう
openssl s_client -starttls smtp -crlf -quiet -connect email-smtp.us-east-1.amazonaws.com:587

expectで送る場合はこんな感じ
 </description>
    </item>
    
    <item>
      <title>更新日時順にソートしてからリネームするperlスクリプト</title>
      <link>https://yaasita.github.io/2013/04/01/1155/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/04/01/1155/</guid>
      <description> こんな感じ？
 </description>
    </item>
    
    <item>
      <title>拡張子を一気に変換</title>
      <link>https://yaasita.github.io/2013/03/30/1237/</link>
      <pubDate>Sat, 30 Mar 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/03/30/1237/</guid>
      <description> http://www.atmarkit.co.jp/flinux/rensai/linuxtips/248chngext.html </description>
    </item>
    
    <item>
      <title>DebianでVPN(PPTP)</title>
      <link>https://yaasita.github.io/2013/03/29/1258/</link>
      <pubDate>Fri, 29 Mar 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/03/29/1258/</guid>
      <description>こんな感じでできた
 Setting up a VPN-server on Amazon EC2 Debian etch に pptpdを導入  </description>
    </item>
    
    <item>
      <title>expectでメールを送ってみる</title>
      <link>https://yaasita.github.io/2013/02/24/1420/</link>
      <pubDate>Sun, 24 Feb 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/02/24/1420/</guid>
      <description> こんな感じか？
 </description>
    </item>
    
    <item>
      <title>apacheのcombinedログのパース処理</title>
      <link>https://yaasita.github.io/2013/02/10/1463/</link>
      <pubDate>Sun, 10 Feb 2013 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2013/02/10/1463/</guid>
      <description> こんな感じか？
 やっぱり面倒だからLTSVにするか </description>
    </item>
    
    <item>
      <title>起動後一定時間経ったら○○の処理をする</title>
      <link>https://yaasita.github.io/2012/12/27/1805/</link>
      <pubDate>Thu, 27 Dec 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/12/27/1805/</guid>
      <description> というスクリプトの例
uptimeから取ってくる
以下は3時間経ったらhoge.shを実行する
 </description>
    </item>
    
    <item>
      <title>Web上でプログラミングの勉強が出来るサイト</title>
      <link>https://yaasita.github.io/2012/11/25/1910/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/11/25/1910/</guid>
      <description> http://www.codecademy.com
http://www.codeschool.com/ </description>
    </item>
    
    <item>
      <title>phpでctagsを使う</title>
      <link>https://yaasita.github.io/2012/11/22/1990/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/11/22/1990/</guid>
      <description> phpが入ってるディレクトリで
ctags -a -R --langmap=PHP:.php --php-types=c+f+d+v+i .

でOKみたい
↓で種類みれる
ctags --list-kinds=php

こうすればtagsファイルが作られる
参考リンク
http://blog.veryposi.info/programing/php/php-ctags-vim/ </description>
    </item>
    
    <item>
      <title>twitterのbotを作る</title>
      <link>https://yaasita.github.io/2012/10/09/2109/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/10/09/2109/</guid>
      <description>そんなに難しくないと思った・・・
CONSUMER_KEYとCONSUMER_SECRETの取得 アプリの登録を行う
このページから飛んで適当に入力する
ユーザに許可してもらいアクセストークンをもらう スクリプト実行⇒authページ⇒許可を押す⇒数値をメモ⇒スクリプトに入力
#!/usr/bin/env ruby # coding: utf-8 require &#39;rubygems&#39; require &#39;oauth&#39; OAUTH_CONSUMER_KEY=&#39;XXXXXXXXXXXXXXXXXXXXXXXXXX&#39; OAUTH_CONSUMER_SECRET=&#39;XXXXXXXXXXXXXXXXXXXXXXXX&#39; consumer = OAuth::Consumer.new( OAUTH_CONSUMER_KEY , OAUTH_CONSUMER_SECRET , { :site=&amp;amp;amp;gt;&amp;quot;http://twitter.com&amp;quot; }) #optprm = { :oauth_callback=&amp;amp;amp;gt;&amp;quot;（コールバック先のURL）&amp;quot; } request_token = consumer.get_request_token puts &amp;quot;Access this URL and approve =&amp;amp;amp;gt; #{request_token.authorize_url}&amp;quot; print &amp;quot;Input OAuth Verifier: &amp;quot; oauth_verifier = gets.chomp.strip access_token = request_token.get_access_token( :oauth_verifier =&amp;amp;amp;gt; oauth_verifier ) puts &amp;quot;Access token: #{access_token.token}&amp;quot; puts &amp;quot;Access token secret: #{access_token.secret}&amp;quot;  後はもらったアクセストークン＆コンシューマIDでスクリプトを書く twitter のgemでもoauthのgemでも簡単なことをやる場合はあんま変わんない感じ</description>
    </item>
    
    <item>
      <title>rubyのバージョン管理 rbenv試してみた</title>
      <link>https://yaasita.github.io/2012/09/26/2171/</link>
      <pubDate>Wed, 26 Sep 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/09/26/2171/</guid>
      <description> rvmとかあるらしいけど今回はrbenvを使ってみます 
cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo &#39;export PATH=&#34;$HOME/.rbenv/bin:$PATH&#34;&#39; &amp;amp;gt;&amp;amp;gt; ~/.bash_profile
echo &#39;eval &#34;$(rbenv init -)&#34;&#39; &amp;amp;gt;&amp;amp;gt; ~/.bash_profile

ここで、シェルのリスタート
次にrbenv installが使えるようにbuildプラグインをインストール 
mkdir -p ~/.rbenv/plugins
cd ~/.rbenv/plugins
git clone git://github.com/sstephenson/ruby-build.git

これでrbenv installコマンドが使えるようになります
インストールできるバージョンを確認 
rbenv install -l
 インストール 
rbenv install 1.9.3-xxxxx
 使用中のバージョンを確認 
rbenv versions
 バージョンの切り替え 
rbenv global 1.9.2-p290
 リフレッシュ変更を反映 
rbenv rehash
 </description>
    </item>
    
    <item>
      <title>とっても分かりやすいRailsチュートリアル</title>
      <link>https://yaasita.github.io/2012/09/22/2232/</link>
      <pubDate>Sat, 22 Sep 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/09/22/2232/</guid>
      <description> http://japanese.railstutorial.org/chapters/beginning </description>
    </item>
    
    <item>
      <title>vimでgitのブラウジングすると便利だよ</title>
      <link>https://yaasita.github.io/2012/07/23/2330/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/07/23/2330/</guid>
      <description> という話
gitvというプラグイン:Gitvコマンドからどうぞ
3方向マージ(3 way merge)もGdiffで一発
http://d.hatena.ne.jp/cohama/20120417/1334679297
http://yuku-tech.hatenablog.com/entry/20110427/1303868482 </description>
    </item>
    
    <item>
      <title>Ruby on Railsのインストール</title>
      <link>https://yaasita.github.io/2012/03/23/2878/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/03/23/2878/</guid>
      <description>必要なパッケージのインストール適当に以下のパッケージをインストール 
build-essential imagemagick zlib1g-dev libssl-dev libreadline-dev libmagick-dev libmagickcore-dev
libmagickwand-dev sqlite3 libsqlite3-dev automake bison mysql-server mysql-client libmysqld-dev libmysqlclient-dev libcurl4-openssl-dev
libapr1-dev libaprutil1-dev libxslt-dev libxml2-dev
※この時点ではRubyは入れない RVMのインストールRVMはRubyのバージョンのスイッチとか簡単に出来るので便利
公式サイトどおりに以下のコマンドですぐインストールされる 
curl -L get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
 Rubyのインストール
rvm install ruby
rvm list
rvm use 1.9.3 --default
必要なGemインストール
gem install bundler
gem install rails
gem install unicron
その他の設定あとJavaScriptエンジンが足りないとか起こられたら こちらを参照して設定する
Gemfileに以下を追記 
gem &#39;execjs&#39;
gem &#39;therubyracer&#39;

rails new hoge</description>
    </item>
    
    <item>
      <title>perlのワンライナーでファイルの一括リネーム</title>
      <link>https://yaasita.github.io/2012/03/21/2899/</link>
      <pubDate>Wed, 21 Mar 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/03/21/2899/</guid>
      <description> メモしておく
以下の例はファイルの拡張子を残して連番にする例
リネーム前確認
perl -le &#39;for(@ARGV){$n=$o=$_;$n=~s/.+(\..+)/sprintf(&#34;%04d$1&#34;,++$i)/e;print &#34;$o = $n&#34;}&#39; *

リネーム
perl -le &#39;for(@ARGV){$n=$o=$_;$n=~s/.+(\..+)/sprintf(&#34;%04d$1&#34;,++$i)/e;rename $o,$n}&#39; *
 </description>
    </item>
    
    <item>
      <title>github使ってみた</title>
      <link>https://yaasita.github.io/2012/03/19/2919/</link>
      <pubDate>Mon, 19 Mar 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/03/19/2919/</guid>
      <description>今更だけどgithub使ってみたときのメモ
とりあえず初期設定は下記参考リンク見ながらやればOK
以下はリポジトリの作成→アップロードまで簡易版のメモ
gitの設定名前とe-mailを設定 git config --global user.name &#34;Firstname Lastname&#34;
git config --global user.email &#34;your_email@youremail.com&#34;
githubのユーザーＩＤとアクセストークンの設定 ※アクセストークンはAccount Settings→左メニューのAccount Settingsで見れる git config --global github.user username
git config --global github.token 0123456789yourf0123456789token
sshの設定.ssh/configに以下を書いておく Host github.com
User git
Hostname github.com
IdentityFile ~/.ssh/YOUR_PRIVATE_KEY
リポジトリの作成githubにログインして&#34;New Repository&#34;を押せばOK リポジトリにpushmkdir repname
cd repname
git init
touch README
git add README
git commit -m &#39;first commit&#39;
git remote add origin git@github.com:yourid/repname.git
git push -u origin master

感想
コマンドから簡単にWebのホスティングサービスにアップロードできるのは超便利</description>
    </item>
    
    <item>
      <title>Catalyst&#43;lighttpd&#43;fastcgiで動かしてみる</title>
      <link>https://yaasita.github.io/2012/02/05/3025/</link>
      <pubDate>Sun, 05 Feb 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/02/05/3025/</guid>
      <description>Catalyst+lighttpd+fastcgiで動かす場合の設定メモ
今回は下の図のように動かす
Catalystはスタンドアロンで動かすほうが早い気がする
bin-path指定で動かす場合はこちらを参照

conf編集/etc/lighttpd/conf-enabled/10-fastcgi.confを編集 今回のサーバーではlighttpdは普通のWebサーバーとして使っているので、ポートで切り分ける以下を追加 あとserver.port文を消す $SERVER[&#34;socket&#34;] == &#34;192.168.0.4:5000&#34; {
#server.port = 5000
fastcgi.server = (
&#34;&#34; =&amp;amp;gt; ( # the extension is empty because we want to match on any extension
&#34;myserver1&#34; =&amp;amp;gt; (
&#34;host&#34; =&amp;amp;gt; &#34;192.168.0.4&#34;,
&#34;port&#34; =&amp;amp;gt; 5001,
&#34;check-local&#34; =&amp;amp;gt; &#34;disable&#34;
)
)
)
}
$SERVER[&#34;socket&#34;] == &#34;192.168.0.4:4000&#34; {
}
Catalystの起動ポート越しにやりとりするからパーミッションとかは適当でOK script/helloworld_fastcgi.pl --listen 192.168.0.4:5001 --keeperr 2
デーモン化する/etc/init.dにスクリプトを書けば自動起動する こちらを参考に適当にスクリプト書けばOK 
参考リンク
Deploying Catalyst Applications
Deploying Catalyst applications with lighttpd and FastCGI</description>
    </item>
    
    <item>
      <title>コマンド補完を強力にしてくれるbash_completion</title>
      <link>https://yaasita.github.io/2012/01/24/3132/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2012/01/24/3132/</guid>
      <description> インストールはaptでできる（bash-completion）
.bashrcに以下の記述をすればOKだけどDebianの場合は予め書いてあった
if [ -f /etc/bash_completion ] &amp;amp;&amp;amp; ! shopt -oq posix; then
. /etc/bash_completion
fi

その他詳しいことは
man dh_bash-completion
参考リンク
http://d.hatena.ne.jp/orangeclover/20110204/1296769974
http://d.hatena.ne.jp/wadap/20080601/1212312418 </description>
    </item>
    
    <item>
      <title>変数のスコープは狭い方が良い？</title>
      <link>https://yaasita.github.io/2011/05/29/3843/</link>
      <pubDate>Sun, 29 May 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/05/29/3843/</guid>
      <description> カーゴカルトみたいな感じか
たしかにそうだと思った
分裂勘違い君劇場
中途半端に優秀なプログラマが「正しいプログラミングテクニック」だと妄信しがちな３つポイント  </description>
    </item>
    
    <item>
      <title>perlで日付文字を解析するのに便利なモジュール</title>
      <link>https://yaasita.github.io/2011/05/22/3946/</link>
      <pubDate>Sun, 22 May 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/05/22/3946/</guid>
      <description> Date::Parse というらしいとても便利
#!/usr/bin/perl
use Date::Parse;
$unix_time=str2time (&#34;May 15 01:19:02&#34;,&#34;JST&#34;);
print $unix_time;
 </description>
    </item>
    
    <item>
      <title>fork爆弾を試してみる</title>
      <link>https://yaasita.github.io/2011/05/08/4129/</link>
      <pubDate>Sun, 08 May 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/05/08/4129/</guid>
      <description> sleepだけなら大丈夫かな？と思って以下のスクリプトを実行してみた
→結果すぐに応答なしになってkillallも効かない状態に＼(^o^)／
電源を切るしかなくなった
#!/bin/bash
while :; do
$0 &amp;amp;
sleep 10m
done &amp;amp;

詳しくはWikipediaで </description>
    </item>
    
    <item>
      <title>Linuxでランダムに壁紙を変更するスクリプト書いた</title>
      <link>https://yaasita.github.io/2011/05/08/4173/</link>
      <pubDate>Sun, 08 May 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/05/08/4173/</guid>
      <description> いろいろソフトとかあるみたいだけどスクリプトでやってみる
#!/usr/bin/perl
use strict;
use warnings;
##################################
# ランダムに壁紙を変更するスクリプト
##################################
my $WALLPAPER_DIR=shift;
##################################
chdir $WALLPAPER_DIR or die $!;
my @pic_lst=(,);
my $random_num=int rand(scalar @pic_lst);
system &#34;hsetroot -full $pic_lst[$random_num]&#34; and die $!;
このスクリプトをrandom_wallpaper.plとして保存した
.xsessionrcに書いておけばOK
while true
do
/usr/local/bin/random_wallpaper.pl /jitaku/local/pic/Linux_wallpaper/ || exit
sleep 30m
done &amp;amp;

参考リンク
ペンギンの杜 〜 Linux ソフト集 〜アミューズメント/壁紙
美女LinuxをUbuntu(GNOME)の壁紙にする
参考記事
xsessionrcのプロセス制御 </description>
    </item>
    
    <item>
      <title>xsessionrcのプロセス制御</title>
      <link>https://yaasita.github.io/2011/05/08/4151/</link>
      <pubDate>Sun, 08 May 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/05/08/4151/</guid>
      <description>前回、前々回でwhileでループさせた後xsessionで壁紙やらステータスバーを変更してたけど、それだといろいろと不具合があることが分かったので修正する。
修正後のxsessionrcは以下のようになった
#!/bin/bash
#xsetroot -solid DarkSlateBlue
#hsetroot -full /usr/share/lxde/wallpapers/garasunodice.jpg
D_NUM=`echo $DISPLAY | cut -f 2 -d:`
PIDFILE=~/.xsession_${D_NUM}.pid
for psnum in $(cat $PIDFILE)
do
cmd=`ps -p $psnum | tail -1 `
if echo $cmd | grep Xsession  /dev/null ; then
kill $psnum
fi
done
rm -f $PIDFILE
while true
do
DATE=`date +&#34;%Y/%m/%d %H:%M&#34;`
LOAD=`loadav.pl`
xsetroot -name &#34;Load Average:$LOAD $DATE&#34; || exit
sleep 30s || exit
done &amp;amp;
echo $!  $PIDFILE</description>
    </item>
    
    <item>
      <title>よく使うCGIスクリプト</title>
      <link>https://yaasita.github.io/2011/04/18/4319/</link>
      <pubDate>Mon, 18 Apr 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/04/18/4319/</guid>
      <description> 無料で使えてとても助かってる
フォトアルバム pipipiga
UTF-8用のファイルとか用意していてくれる
http://popilol.lolipop.jp/NiconicoPHP/
Fuploader
FLASHで出来てる　アップローダ
100Mまでアップロード可能
http://www.yumemaboroshi.net/cgi4905/
UTF-8+LFへの変換は
nkf -w8 -Lu ファイル名でOK
wikiはPukiWikiが設置が簡単で良いと思う </description>
    </item>
    
    <item>
      <title>suidperlを使ってSUIDがセットされたperlスクリプトを動かす</title>
      <link>https://yaasita.github.io/2011/03/27/4571/</link>
      <pubDate>Sun, 27 Mar 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/03/27/4571/</guid>
      <description> Debianにて
perl-suidをインストール
シェバンを以下にして
#!/usr/bin/suidperl

sbinを動かすなら
PATHの設定も忘れずに・・・
$ENV{PATH}=&#34;/usr/sbin/&#34;;

というかsuidperlをインストールするくらいならsudoとか使った方がいいのかなぁ・・・
参考リンク
http://d.hatena.ne.jp/hogem/20080227/1204125414 </description>
    </item>
    
    <item>
      <title>cronの各処理の実行時間を測定してみた</title>
      <link>https://yaasita.github.io/2011/02/25/4736/</link>
      <pubDate>Fri, 25 Feb 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/02/25/4736/</guid>
      <description> なんかcron.dailyの実行がやけに重いなーとおもったので各スクリプトのどの処理が重いか調べてみた
1.timeプログラムのインストール
まずtimeプログラムが必要ですbashからなら普通に打てるのですがbinに入っているものじゃないとエラーになったのでインストール
debianならtimeパッケージをインストールすれば/usr/bin/timeが出来ました
2.実行時間測定スクリプトの作成
次に/tmpに以下のスクリプトを置き
time.pl
#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say);
use Time::HiRes;
my $runpg=shift;
say &#34;### $runpg START ### &#34;,Time::HiRes::time;
system &#34;/usr/bin/time $runpg&#34; and die $!;
say &#34;### $runpg END ### &#34;,Time::HiRes::time;

3.anacrontabの編集
/etc/anacrontabを編集（/etc/crontabの人はそちらを)
# 1 5 cron.daily nice run-parts -v /etc/cron.daily
1 5 cron.daily nice run-parts --list /etc/cron.daily | xargs -i /tmp/time.pl {}
ポイントはrun-partsを--listにして実行ファイル一覧を出力させてそれを引数として実行時間を計るプログラムに渡す </description>
    </item>
    
    <item>
      <title>perl日本語ドキュメント</title>
      <link>https://yaasita.github.io/2011/01/30/4801/</link>
      <pubDate>Sun, 30 Jan 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/01/30/4801/</guid>
      <description> http://pjp.64p.org/ </description>
    </item>
    
    <item>
      <title>ctagsを使ってみる</title>
      <link>https://yaasita.github.io/2011/01/22/4822/</link>
      <pubDate>Sat, 22 Jan 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/01/22/4822/</guid>
      <description> タグファイル(tags)を作ればCtrl+]で飛べる
使い方は
ctags --language-force=perl hoge.pl
こうすれば同じ場所にtagsファイルが作られる
基本的には拡張子で判断してくれるらしいから
--language-forceは不要かも
対応言語は以下のコマンドで出力できる
ctags --list-languages
ちなみにcscopeというC言語専用だけど高機能な解析ツールもあるらしい・・・
参考リンク
http://hp.vector.co.jp/authors/VA025040/ctags/ctags_j.html </description>
    </item>
    
    <item>
      <title>radikoを聞くperlスクリプト書いた</title>
      <link>https://yaasita.github.io/2011/01/17/4864/</link>
      <pubDate>Mon, 17 Jan 2011 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2011/01/17/4864/</guid>
      <description> ポイントはforkして指定した時間で落とすこと
#!/usr/bin/perl
################################################
# radiko を聞くスクリプト
# 引数で制御する
#
# ヘルプを表示するにはh
# radiko.pl -h
################################################
use strict;
use warnings;
use Getopt::Std;
my %opt;
getopts(&#34;hc:f:t:&#34;,\%opt);
if (exists $opt{h}){
print </description>
    </item>
    
    <item>
      <title>perlでルーターからWAN側のIPアドレスを取得してみる</title>
      <link>https://yaasita.github.io/2010/10/16/5527/</link>
      <pubDate>Sat, 16 Oct 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/10/16/5527/</guid>
      <description> このときに対象にしたルーターはNP-BBRM
#!/usr/bin/perl
use strict;
use warnings;
use LWP::UserAgent;
my $ua = LWP::UserAgent-new;
$ua-timeout(10);
my $req = HTTP::Request-new(GET = &#39;http://192.168.0.1/Status.htm&#39;);
$req-authorization_basic(&#39;admin&#39;,&#39;hoge&#39;);
my $response = $ua-request($req);
if ($response-is_success){
my $data = $response-content;
$data=~s///g;
$data=~s/\&amp;amp;nbsp;//g;
$data=~/IP.+?(\d{1,3}[\.\d]+)\s/;
print $1,&#34;\n&#34;;
}
else {
die $response-status_line;
}
 </description>
    </item>
    
    <item>
      <title>perlで一時ファイルを使用する</title>
      <link>https://yaasita.github.io/2010/10/16/5487/</link>
      <pubDate>Sat, 16 Oct 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/10/16/5487/</guid>
      <description> #!/usr/bin/perl
use strict;
use warnings;
use File::Temp;
my $temp = File::Temp-new(DIR=&#39;/tmp&#39;,SUFFIX=&#39;.tmp&#39;);
print $temp-filename;
print $temp &#34;hoge&#34;;
コンストラクタにDIRを指定すると一時ファイルを作るディレクトリを指定
SUFFIXは一時ファイルの末尾につける文字
UNLINK=0を指定するとプロうグラムが終了しても一時ファイルを削除しない
$temp-filenameでファイルネームを取得できる
ちなみに$tempはすでにファイルハンドルなのですぐに書き込みができる
※ちなみにnewdirというディレクトリ版のコンストラクタもあるこちらはCLEANUPで自動削除の有無を切り替えできる
参考リンク
http://perldoc.perl.org/File/Temp.html
http://isoya.at.webry.info/200812/article_3.html
http://haginov.blog35.fc2.com/blog-entry-141.html
あとopen関数の第3引数にundefを指定してもできるみたい
http://d.hatena.ne.jp/dayflower/20061225/1167041087 </description>
    </item>
    
    <item>
      <title>perlで読み書き両用でパイプをオープンしたい</title>
      <link>https://yaasita.github.io/2010/10/16/5507/</link>
      <pubDate>Sat, 16 Oct 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/10/16/5507/</guid>
      <description> イメージ的にはこんな感じ
例えば$dataの中にS-JISコードのデータがあってnkfでutf-8に直してまた$dataに戻したいと思ったところ
open (FH,&#34;|nkf -w8&#34;);
print FH $data;
とすればnkfに渡るが出力がキャッチできない
open (FH,&#34;|nkf -w8|&#34;);
とかは出来ない
これについてperlfaq8に載っていた
How can I open a pipe both to and from a command?
の部分
よく分からないがIPC::Open2を使うと良いらしい </description>
    </item>
    
    <item>
      <title>bzrで知ってると便利なコマンド</title>
      <link>https://yaasita.github.io/2010/10/10/5631/</link>
      <pubDate>Sun, 10 Oct 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/10/10/5631/</guid>
      <description> bzr uncommit これでチェックインの取り消しが出来る
色付き差分表示
bzr cdiff
履歴付きmv（ただ管理下のファイルをmvしたときは対象フォルダの履歴がそこで終わってしまうため）
bzr mv 
前に書いた記事
参考リンク
http://bbs2ch.sourceforge.jp/?page=%B3%AB%C8%AF%BC%D4%B8%FE%A4%B1%BE%F0%CA%F3 </description>
    </item>
    
    <item>
      <title>pingで生存確認してからsmbmountする</title>
      <link>https://yaasita.github.io/2010/10/02/5673/</link>
      <pubDate>Sat, 02 Oct 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/10/02/5673/</guid>
      <description> 今まではsmbmountを試して駄目だったら後続の処理を止めてたけど
pingしてからsmbmountすればもっと早くできると思う
こんな感じ
#!/bin/bash
TargetIP=192.168.0.2
ping -c 1 -w 1 $TargetIP  /dev/null || exit 0
mount //$TargetIP/hoge /var/windows/ -o sec=none  /dev/null 2&amp;amp;1
if [ $? -eq 0 ]
then
rsync -a --delete /var/windows/ /var/samba/foo/
umount /var/windows/ || exit 1
else
exit 0
fi
exit
 </description>
    </item>
    
    <item>
      <title>init.d/とか各ランレベルごとの起動スクリプトについて</title>
      <link>https://yaasita.github.io/2010/09/26/5694/</link>
      <pubDate>Sun, 26 Sep 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/09/26/5694/</guid>
      <description>前回rep2の話でスタートアップとシャットダウン時に行うスクリプトについて書いた
今回は/etc/init.d/rcを使わずにやる（正式な？）方法で起動時、終了時のスクリプトを実行してみる
まず、Linuxは/etc/inittabの定義に従って、/etc/init.d/rcをランレベルを引数にして実行する。
その後、/etc/rc$runlevel.dの中にあるディレクトリを順番に実行する。$runlevelは0～6の数値
（たとえばrc1.d,rc2.d,rc3.d,rc4.d,rc5.d,rc6.d）
/etc/init.d/rcの中を読めば分かるが、大まかな挙動は以下の通り。
1.現在のランレベルと前回のランレベルを取得する。
2.現在のランレベルに対応するディレクトリのKで始まるスクリプトを探し、前回のランレベルで実行されているなら（頭文字がSで始まるスクリプトが存在しているのなら）それを止める。
3.次に、Sで始まるディレクトリを探し、前回のランレベルで起動していないと判明したらstart、もしくはstopをかける。
ちなみに0,6はstopを引数にしてSから始まるスクリプトを順次実行する。
実行する順番はSもしくはKから始まる次の2桁の数値の若い順。
SとKではKが最初に実行される。
前回のスクリプトをこの方法で実現するなら
下記のようなスクリプトを用意すればOK
init.d/my_script
rc0.d/K01my_script@
rc2.d/S99my_script@
rc6.d/K01my_script@
my_scriptの中身は↓
#! /bin/sh
### BEGIN INIT INFO
#
# Default-Start: 2
# Default-Stop: 0 6
# Short-Description: rep2
### END INIT INFO
#
PATH=/bin:/usr/bin:/sbin:/usr/sbin
case &#34;$1&#34; in
start)
# rep2 HDD -&amp;amp;gt; memory
mkdir /dev/shm/rep2mem
rsync -av --delete /var/www/rep2mem_bk/ /dev/shm/rep2mem/
;;
restart|force-reload)
# nothing to do
:
;;
stop)
#rep2 memory -&amp;amp;gt; HDD</description>
    </item>
    
    <item>
      <title>perlのエラーコードを参照したりする</title>
      <link>https://yaasita.github.io/2010/09/19/5715/</link>
      <pubDate>Sun, 19 Sep 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/09/19/5715/</guid>
      <description> systemの結果コードは$?で参照できる
以下引用
変数 $@, $!, $^E, $? は Perl プログラムの実行中に
発生した、異なる種類のエラー情報を保持します。
変数はエラーを報告した副システムと Perl プロセスとの「距離」
の順番に並んでいます。
これらはそれぞれ、Perl インタプリタ、C ライブラリ、
オペレーティングシステム、外部プログラムによって検出された
エラーに対応しています。
$@　→　evalのエラー
@! → システムコールのエラー closeとか
@^E → システムコールでエラーになったときの詳細な内容が格納されているらしい
$? → system終了ステータスとかCloseとかの終了ステータスを保持する
参考リンク
http://www.perldoc.jp/docs/perl/5.10.0/perlvar.pod.pod </description>
    </item>
    
    <item>
      <title>LWP::UserAgentを使ってみる</title>
      <link>https://yaasita.github.io/2010/06/20/6305/</link>
      <pubDate>Sun, 20 Jun 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/06/20/6305/</guid>
      <description> UserAgentとRefererを設定して診断君を取得する
参考リンク
http://search.cpan.org/~gaas/libwww-perl-5.836/lib/LWP/UserAgent.pm
#!/usr/local/bin/perl
use LWP::UserAgent;
use HTTP::Headers;
use feature qw(say);
$ua = LWP::UserAgent-&amp;amp;gt;new (
timeout =&amp;amp;gt; 5,
agent =&amp;amp;gt; &#39;Mozilla/5.0 (Windows; U; Windows NT 6.0; ja; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3 ( .NET CLR 3.5.30729)&#39;
);
$ua-&amp;amp;gt;default_header(
&#39;Referer&#39; =&amp;amp;gt; &#34;hoge&#34;,
&#39;Accept-Language&#39; =&amp;amp;gt; &#34;no, en&#34;);
$res=$ua-&amp;amp;gt;get(&#39;http://taruo.net/e/&#39;);
if ($res-&amp;amp;gt;is_success){
say $res-&amp;amp;gt;code;
say $res-&amp;amp;gt;message;
say $res-&amp;amp;gt;content;
} </description>
    </item>
    
    <item>
      <title>C/MigemoをMSVC 2010でコンパイルしてみる</title>
      <link>https://yaasita.github.io/2010/06/13/6407/</link>
      <pubDate>Sun, 13 Jun 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/06/13/6407/</guid>
      <description> vimにインストールするためMSVC 2010でコンパイルしてみた
まずは↓からMicrosoft Visual Studio Express C++をダウンロード&amp;amp;amp;インストール
http://www.microsoft.com/japan/msdn/vstudio/express/
（ちなみにインストールするとメイリオフォントもインストールされる Firefoxとかだと文字がにじむサイトとかでるかも・・・）
そんでkaoriyaさんのHPから「ソースコード 1.3(予定) 開発版」をダウンロード解凍して cmigemo-1.3c\compile\vs2003のCMigemo.slnをMSVS 2010で開く→変換ウィザードでプロジェクトを変換
プロジェクトを開いたらReleaseに変更

そんでCMigemoを右クリック→リビルドすると cannot open include file &#39;afxres.h&#39;というエラーが出るのでこんな感じで直す
修正前 #include &#34;afxres.h&#34;
修正後 #include 
#define IDC_STATIC -1
あとはvs2003\CMigemo\Release\CMigemo.exeとvs2003\MigemoDLL\Release\migemo.dllを保存してvimにインストール
辞書ファイルはCygwinで作成するかkaoriyaさんの「バイナリ(DLL) 1.2 リリース版 for Windows 」をダウンロードしてもおｋ
ちなみにmigemo.vimは1.2版のを使った方が調子が良かった </description>
    </item>
    
    <item>
      <title>rsyncを（ほぼ）毎日やるのでスクリプトを書いた</title>
      <link>https://yaasita.github.io/2010/05/08/6754/</link>
      <pubDate>Sat, 08 May 2010 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2010/05/08/6754/</guid>
      <description>最初にYYYYMMDDのディレクトリにフルバックアップする作業は手作業でやる必要がある
#!/usr/bin/perl
use feature qw(say);
use warnings;
use strict;
### INITIAL SETTING ##########
our $BACKUP_DIR=&#34;/mnt&#34;;
our $EXC_FILE=&#34;/mnt/exc.txt&#34;;
##############################
if ($BACKUP_DIR!~/\/$/){
$BACKUP_DIR.=&#34;/&#34;;
}
chdir $BACKUP_DIR or die $!;
my ($today,$target);
$today=`date +%Y%m%d`;
chomp $today;
say &#34;*** START BACKUP!!! ***&#34;;
system &#34;mkdir $today 2&amp;amp;gt; /dev/null&#34;;
{
#前回バックアップディレクトリの探索
opendir DIR,&#34;./&#34; or die $!;
my @list;
@list = readdir DIR;
close DIR;
@list = grep {-d $_ and !/\./} @list; $target=&#34;&#34;;
for (reverse sort @list){</description>
    </item>
    
    <item>
      <title>携帯でrep2見てるときに外部リンクを通勤ブラウザ以外に設定する</title>
      <link>https://yaasita.github.io/2009/12/12/7717/</link>
      <pubDate>Sat, 12 Dec 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/12/12/7717/</guid>
      <description>通勤ブラウザは重いしイマイチ使い勝手が良くなかったのでGoogleのGWT(Google Wireless Transcoder)を使う
rep2/lib/ShowThreadK.php を編集すればおｋ
650行目あたりの
// 通勤ブラウザ
if ($_conf[&#39;k_use_tsukin&#39;]) {
$tsukin_url = &#39;http://www.sjk.co.jp/c/w.exe?y=&#39; . urlencode($url);
if ($_conf[&#39;through_ime&#39;]) {
$tsukin_url = P2Util::throughIme($tsukin_url);
}
$ext_pre_hts[] = &#39;&amp;amp;lt;a href=&#34;&#39; . hs($tsukin_url) . &#39;&#34;&amp;amp;gt;通&amp;amp;lt;/a&amp;amp;gt;&#39;;
}
↑を↓の様に変更
// 通勤ブラウザ
if ($_conf[&#39;k_use_tsukin&#39;]) {
// $tsukin_url = &#39;http://www.sjk.co.jp/c/w.exe?y=&#39; . urlencode($url);
$tsukin_url = &#39;http://www.google.co.jp/gwt/x?u=&#39; . urlencode($url);
if ($_conf[&#39;through_ime&#39;]) {
$tsukin_url = P2Util::throughIme($tsukin_url);
}
// $ext_pre_hts[] = &#39;&amp;amp;lt;a href=&#34;&#39; . hs($tsukin_url) . &#39;&#34;&amp;amp;gt;通&amp;amp;lt;/a&amp;amp;gt;&#39;;
$ext_pre_hts[] = &#39;&amp;amp;lt;a href=&#34;&#39; .</description>
    </item>
    
    <item>
      <title>perlモジュールを作るための雛形を作る h2xs コマンド</title>
      <link>https://yaasita.github.io/2009/12/06/7820/</link>
      <pubDate>Sun, 06 Dec 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/12/06/7820/</guid>
      <description>↓みたいな感じで雛形を作る
h2xs -X -A HogeModule
参考リンク
http://torus.jp/memo/x200311/PerlModule.rd.html
モジュールの最後にPODも追加してくれて便利
__END__
# Below is stub documentation for your module. You&#39;d better edit it!
=head1 NAME
HogeModule - Perl extension for blah blah blah
=head1 SYNOPSIS
use HogeModule;
blah blah blah
=head1 DESCRIPTION
Stub documentation for Okyama, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.
Blah blah blah.
=head2 EXPORT
None by default.</description>
    </item>
    
    <item>
      <title>perlでWindows内のファイル属性の変更</title>
      <link>https://yaasita.github.io/2009/11/22/8026/</link>
      <pubDate>Sun, 22 Nov 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/11/22/8026/</guid>
      <description> 使用方法はこんな感じで
#!/usr/bin/perl
use Win32::File;
Win32::File::SetAttributes(&#34;hoge.txt&#34;,READONLY);
使える関数は以下の通り
GetAttributes
SetAttributes
使える値は↓みたいなのがあるらしい（下はデフォルトでExport）
ARCHIVE
COMPRESSED
DIRECTORY
HIDDEN
NORMAL
OFFLINE
READONLY
SYSTEM
TEMPORARY
以下参考リンク
CPAN
http://search.cpan.org/~jdb/Win32-File-0.06/File.pm
紹介Blog
http://memo.freedom-lite.com/?p=187 </description>
    </item>
    
    <item>
      <title>JavaScriptで作られたスライドパズル</title>
      <link>https://yaasita.github.io/2009/11/03/8189/</link>
      <pubDate>Tue, 03 Nov 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/11/03/8189/</guid>
      <description> これはすごいと思った
http://www.geocities.jp/recyclebin5385/slidepuzzle.html
ブログ
http://recyclebin5385.blog13.fc2.com/blog-entry-7.html </description>
    </item>
    
    <item>
      <title>perlの難読化ツール２ ppencode</title>
      <link>https://yaasita.github.io/2009/10/11/8431/</link>
      <pubDate>Sun, 11 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/10/11/8431/</guid>
      <description> 前回の投稿では記号だけで表すってモジュールを紹介したけど、予約語だけでプログラミングってのもある
ソースとか説明は↓
http://namazu.org/~takesako/ppencode/
JavaScriptによるデモは↓
http://www.namazu.org/~takesako/ppencode/demo.html
動作原理についての説明は↓
http://d.hatena.ne.jp/masutaro/20080128/1201507016 </description>
    </item>
    
    <item>
      <title>perlの難読化モジュールAcme::EyeDrops</title>
      <link>https://yaasita.github.io/2009/10/11/8451/</link>
      <pubDate>Sun, 11 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/10/11/8451/</guid>
      <description> perlは記号だけでプログラミングが可能です。どうやるかはevalと論理演算を駆使すればできるらしい・・・
例えば・・・
「H」という文字列を作りたい場合は
&amp;amp;nbsp;`←バッククォート　16進数では60
(←括弧　16進数では28
をXORですると・・・
16進数の48になります。。。
こんな感じでプログラミングしていくみたいです
print &#34;`&#34; ^ &#34;(&#34;,&#34;\n&#34;;
↑をやればHと表示されるはず
参考記事
http://d.hatena.ne.jp/shinichiro_h/20061107
そんで、本題Acme::EyeDropsについて
これは上記のテクニックを使ってプログラムを難読化してくれるモジュールみたい
さっそく試す
１．ActivePerlならPPMでAcme-EyeDropsを検索してインストール
２．適当にperlソースを書く（ここではhoge.plとする）
３．以下のようにして吐き出させる
#!/usr/bin/perl
use Acme::EyeDrops qw(sightly);
print sightly( { Shape&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; =&amp;amp;gt; &#39;camel&#39;,
SourceFile&amp;amp;nbsp; =&amp;amp;gt; &#39;hoge.pl&#39; ,
Compact =&amp;amp;gt; 1
} ); このモジュールのすごいところはバイナリファイルだってAA化できちゃうってこと
詳しくはこちら
好きなShapeは
map_japan
map_world3
mongers
music
writing_perl
tpr
camel
あたり </description>
    </item>
    
    <item>
      <title>2chのスレ中にどのレスが一番アンカーが付けられたか検索する</title>
      <link>https://yaasita.github.io/2009/09/27/8552/</link>
      <pubDate>Sun, 27 Sep 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/09/27/8552/</guid>
      <description> こんな感じでどうでしょうか？
単純に&amp;amp;gt;&amp;amp;gt;1をgrepすると&amp;amp;gt;&amp;amp;gt;10や&amp;amp;gt;&amp;amp;gt;100も引っかかることに注意
#!/usr/bin/perl
use feature qw(say);
open (FH,&#34;input.txt&#34;) or die $!;
@list=&amp;amp;lt;FH&amp;amp;gt;;
close FH;
@list = grep {/\&amp;amp;gt;\&amp;amp;gt;\d+/} @list; for (1..1000){
$num=$_;
$num=&#39;&amp;amp;gt;&amp;amp;gt;&#39;.$num;
$coun{$num} = grep {/\&amp;amp;gt;\&amp;amp;gt;\d+/ and ($num eq $&amp;amp;amp;)} @list;
}
for (sort {$coun{$b} &amp;amp;lt;=&amp;amp;gt; $coun{$a}} keys %coun){
printf (&#34;%-5s =&amp;amp;gt; %03d\n&#34;,$_,$coun{$_});
last if $i++&amp;amp;gt;=10;
} </description>
    </item>
    
    <item>
      <title>PerlのIDEで有名なもの</title>
      <link>https://yaasita.github.io/2009/06/20/9221/</link>
      <pubDate>Sat, 20 Jun 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/06/20/9221/</guid>
      <description> * EPIC
* PerlBuilder
* PerlComposer
* Perl Editor
* Perl Express
* Open Perl IDE
* OptiPerl
* Zeus
Perl ExpressはApacheとの連携とか出来て良い感じだった。
日本語回りは駄目だが・・・
http://japan.zdnet.com/news/devsys/story/0,2000056182,20361311,00.htm </description>
    </item>
    
    <item>
      <title>perlのourについて</title>
      <link>https://yaasita.github.io/2009/06/15/9281/</link>
      <pubDate>Mon, 15 Jun 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/06/15/9281/</guid>
      <description> ちょっとあやふやにしてる部分があったのでメモ
１．ourを使うとそのレキシカルスコープ内では完全修飾を
しなくてもアクセス可能（use strict時の話ね)
２．結局はグローバル変数の定義です
３．ourの有効範囲はレキシカルスコープなんでパッケージも越えてしまう
#!/usr/bin/perl -l
use strict;
use warnings;
{
my $test=10;
print $test;
{
our $test=20;
print $test;
}
print $test;
}
print $main::test;
参考リンク
http://perldoc.jp/docs/perl/5.10.0/perlfunc.pod </description>
    </item>
    
    <item>
      <title>perlで定数を宣言するには？</title>
      <link>https://yaasita.github.io/2009/06/10/9383/</link>
      <pubDate>Wed, 10 Jun 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/06/10/9383/</guid>
      <description> １．use constantモジュールを使う
#!/usr/bin/perl
use constant TEISU =&amp;amp;gt; 777;
use constant {
HOGE =&amp;amp;gt; &#39;あああ&#39;,
HAGE =&amp;amp;gt; &#39;いいい&#39;
};

２．型グロブとリファレンスを駆使して上書き禁止の変数にする
#!/usr/bin/perl -l
*TEISU=\777;
*KENSAKU=\(quotemeta &#39;てすと&#39;);
print $TEISU;

参考リンク
http://www2u.biglobe.ne.jp/~MAS/perl/waza/const.html
http://chaichan.web.infoseek.co.jp/perlnote/perlnote2008-03-153.htm
http://www.rfs.jp/sb/perl/02/02.html#TRY!%20%E5%AE%9A%E6%95%B0%E3%81%AE%E5%AE%A3%E8%A8%80 </description>
    </item>
    
    <item>
      <title>perlでランダムな文字列を生成するモジュール</title>
      <link>https://yaasita.github.io/2009/05/18/9522/</link>
      <pubDate>Mon, 18 May 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/05/18/9522/</guid>
      <description> その名もString::Random
参考リンク
http://d.hatena.ne.jp/fbis/20080114/1200307393 </description>
    </item>
    
    <item>
      <title>Perlパッケージに含まれる便利なツール郡</title>
      <link>https://yaasita.github.io/2009/05/09/9602/</link>
      <pubDate>Sat, 09 May 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/05/09/9602/</guid>
      <description> http://www.linux.or.jp/JF/JFdocs/LFS-BOOK/appendixa/perl.html
これに加えWindows版のPerlにはpl2batというperlスクリプトをbatファイルにするツールがあります </description>
    </item>
    
    <item>
      <title>perlでDBMファイルを取り扱う</title>
      <link>https://yaasita.github.io/2009/04/26/9664/</link>
      <pubDate>Sun, 26 Apr 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/04/26/9664/</guid>
      <description> 最近はtieという関数を使うらしい・・・
#!/usr/bin/perl
use feature qw(say);
use SDBM_File;
use Fcntl;
tie (%HA,&#39;SDBM_File&#39;,&#34;test&#34;,O_RDWR|O_CREATE,0644);
%HA=(one=1,two=2,three=3);
while ( ($a,$b)=each %HA){
say &#34;$a - $b&#34;;
}
untie %HA;
参考リンク
http://www.lr.pi.titech.ac.jp/~abekawa/perl/perl_bigdata.html
http://perldoc.jp/docs/perl/5.10.0/perltie.pod
http://www.ecopig.jp/comucale/dbm.htm
http://search.cpan.org/~nwclark/perl-5.8.9/ext/SDBM_File/SDBM_File.pm </description>
    </item>
    
    <item>
      <title>HTTP::Liteモジュール</title>
      <link>https://yaasita.github.io/2009/04/04/9828/</link>
      <pubDate>Sat, 04 Apr 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/04/04/9828/</guid>
      <description> Net::HTTPより簡単なHTTPモジュールあったよー
＼(^O^)／
参考リンク
http://perldoc.jp/docs/modules/HTTP-Lite-2.1.4/HTTP/Lite.pod </description>
    </item>
    
    <item>
      <title>新しい構文上の機能を有効にするプラグマ（perl)</title>
      <link>https://yaasita.github.io/2009/04/04/9808/</link>
      <pubDate>Sat, 04 Apr 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/04/04/9808/</guid>
      <description> use featureってやつだな
sayとか便利
参考リンク
http://perldoc.jp/docs/modules/feature-1.11/feature.pod </description>
    </item>
    
    <item>
      <title>perlで良く使うモジュールNet::HTTP</title>
      <link>https://yaasita.github.io/2009/03/30/9848/</link>
      <pubDate>Mon, 30 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/30/9848/</guid>
      <description> ここでメモっておく
 use Net::HTTP;
my $s = Net::HTTP-new(Host = &#34;www.perl.com&#34;) || die $@;
$s-write_request(GET = &#34;/&#34;, &#39;User-Agent&#39; = &#34;Mozilla/5.0&#34;);
my($code, $mess, %h) = $s-read_response_headers;
while (1) {
my $buf;
my $n = $s-read_entity_body($buf, 1024);
die &#34;read failed: $!&#34; unless defined $n;
last unless $n;
print $buf;
}
CPANリンク
http://search.cpan.org/~gaas/libwww-perl-5.825/lib/Net/HTTP.pm </description>
    </item>
    
    <item>
      <title>perlのモジュール・・・名前空間の話</title>
      <link>https://yaasita.github.io/2009/03/22/9951/</link>
      <pubDate>Sun, 22 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/22/9951/</guid>
      <description> ちょっとウヤムヤにしておいたけどここで理解しておこう
まあつまり
use Module::hoge (LIST)
ってやってLISTにインポートしたい関数を書いておきなさいというわけですな
参考リンク
http://adiary.blog.abk.nu/0148
http://d.hatena.ne.jp/perlcodesample/20090205/1232879205
http://perldoc.jp/docs/perl/5.10.0/perlmod.pod </description>
    </item>
    
    <item>
      <title>Windowsの共有ファイルにperlでアクセスするには</title>
      <link>https://yaasita.github.io/2009/03/22/9971/</link>
      <pubDate>Sun, 22 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/22/9971/</guid>
      <description> 普通にopen,opendirが使えるみたい

open (FH,&#34;//192.168.0.11/share/hoge.txt&#34;);
opendir (DIR,&#34;192.168.0.11/share&#34;);

まあ目的はローカルにあるファイルを共有フォルダへコピーだったので
こんな感じで

use File::Copy;
$dir=&#39;//192.168.0.11/share/&#39;;
copy $backup_filename,$dir; </description>
    </item>
    
    <item>
      <title>TMTOWTDIの話</title>
      <link>https://yaasita.github.io/2009/03/21/10032/</link>
      <pubDate>Sat, 21 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/21/10032/</guid>
      <description> there&#39;s more than one way to do it 略して
TMTOWTDI
perlのスローガン
意味は「やり方はいくらでもある」みたいな
うーんためになる
よくアドレスを忘れるからメモ
努力、忍耐、謙遜　(Larry Wall)
http://www.oreilly.co.jp/BOOK/osp/OpenSource_Web_Version/chapter10/chapter10.html </description>
    </item>
    
    <item>
      <title>perlでリターンキーを待たずにキーのデータを一つ読み取るには?</title>
      <link>https://yaasita.github.io/2009/03/08/10095/</link>
      <pubDate>Sun, 08 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/08/10095/</guid>
      <description> Term::ReadKeyを使えばいいらしい
使い方：
ReadModeで読み方を指定　引数は0～5のどれか
0・・・元々の設定に戻す
1・・・普通のモード
2・・・1と同じだがechoされない（自分が入力したものが見れないからパスワード入力などに使える）
3・・・cbreakモード　Ctrl＋Cで止めるとかできる
4・・・rowモード　Ctrl＋Cで止めるとか無理。改行コード変換はしてくれる。
5・・・4と同じだが改行コード変換はしてくれない。（Windows環境では4と5は同じ）
ReadKeyで読み込む　引数は0、-1、0より大きい値のどれか
0・・・getc見たいに1文字よみます（引数省略時のデフォルト）
-1・・・ノンブロッキングリード
引数0・・・引数秒だけwaitし、時間になったらundefを返す
例
#!/usr/bin/perl
use Term::ReadKey;
print $Term::ReadKey::VERSION;
print &#34;\n&#34;;
ReadMode 3;
while (1){
$char = ReadKey(5);
last if not defined $char;
printf (&#34;%1s is %X &#34;,$char,ord $char);
print &#34;\n&#34;;
}
参考サイト
http://search.cpan.org/~stsi/TermReadKey/ReadKey.pm
http://perldoc.jp/docs/perl/5.10.0/perlfaq8.pod
http://www.jp-z.jp/perlmemo/IF_Term-ReadKey.html </description>
    </item>
    
    <item>
      <title>perldoc.jp</title>
      <link>https://yaasita.github.io/2009/03/07/10115/</link>
      <pubDate>Sat, 07 Mar 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/03/07/10115/</guid>
      <description> http://perldoc.jp/docs/perl/5.10.0/ </description>
    </item>
    
    <item>
      <title>perlのワンライナー</title>
      <link>https://yaasita.github.io/2009/02/28/10178/</link>
      <pubDate>Sat, 28 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/02/28/10178/</guid>
      <description>よく忘れるのでメモ
↓は普通の使い方
perl -e &#39;print &amp;quot;hello&amp;quot;&#39;  ↓test.txtの中身を表示 -nオプションは
こんな感じの意味
perl -ne &#39;print&#39; test.txt while (&amp;lt;&amp;gt;) { ... # your program goes here }  ↓test.txtの中身を表示 -pオプションは
-nの最後にプリント文をかます様なイメージ
perl -pe &#39;&#39; test.txt while (&amp;lt;&amp;gt;) { ... # your program goes here print; }  ライン処理を追加する（print文の後に改行＋&amp;lt;&amp;gt;後にchmop）
perl -lpe &#39;&#39; test.txt  -iオプションは対象のファイルを上書きする
注意するのは-iはその後に変更前のファイル名を取るので
まとめないこと（-ipleは駄目）
上がtest.txtの頭に行番号を付加する
下が変更前のtest.txtをtest.txt.backとして残す
perl -i -ple &#39;s/^(.*$)/$.$1/&#39; test.txt perl -i.back -ple &#39;s/^(.*)/$. \: $1/&#39; test.txt  参考リンク
 http://blog.</description>
    </item>
    
    <item>
      <title>perlの数値回りのはなしー</title>
      <link>https://yaasita.github.io/2009/02/21/10258/</link>
      <pubDate>Sat, 21 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/02/21/10258/</guid>
      <description> printf &#34;%u\n&#34;,~0;
チルダ＋0で上限値が出る？みたいね
まあCOBOLで言うところのHIGH-VALUEみたいなもんか
追記
上限値が出るっていうかあれです
ビット演算のビット反転効果があったみたいですね
http://www.rfs.jp/sb/perl/02/bit.html
参考リンク
http://questionbox.jp.msn.com/qa2174949.html
http://perldoc.jp/docs/perl/5.8.8/perlop.pod </description>
    </item>
    
    <item>
      <title>perlでプログレスバー的なものを作る</title>
      <link>https://yaasita.github.io/2009/02/15/10300/</link>
      <pubDate>Sun, 15 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/02/15/10300/</guid>
      <description> ポイントは$lと\rです。
$|・・・出力をバッファリングするかどうか（0以外はバッファリングしない。つまりprint文は直ぐ出すということ）
\r・・・キャリッジリターンまあ頭にカーソル戻すよーみたいな意味

#!/usr/bin/perl
$max=125;
$split=50;
$| = 1;
$ps=int($max/$split+1);
for (1..$split){
print &#34;[&#34;,&#34;=&#34; x $_,&#34; &#34; x ($split-$_),&#34;]&#34;;
print &#34;\r&#34;;
sleep 1;
if ($_==$split){
print &#34;[&#34;,&#34;=&#34; x $split,&#34;]\n&#34;;
exit;
}
}

参考リンク
http://perl.g.hatena.ne.jp/bosh/20080107/p1
http://www.geocities.co.jp/SiliconValley-Sunnyvale/6128/perl/evalue.html </description>
    </item>
    
    <item>
      <title>perlでSJISマッチング</title>
      <link>https://yaasita.github.io/2009/02/07/10340/</link>
      <pubDate>Sat, 07 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/02/07/10340/</guid>
      <description> /\Qあああああ\E/
みたいに\Qと\Eで挟むと良いらしい・・・
まあ何でかと言うと\Qと\Eの間はメタ文字を打ち消す効果があるからだけど
http://saboten009.blogspot.com/2008/02/perl.html </description>
    </item>
    
    <item>
      <title>perlで今実行しているファイル名を調べる</title>
      <link>https://yaasita.github.io/2009/02/07/10360/</link>
      <pubDate>Sat, 07 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/02/07/10360/</guid>
      <description> 実行中のプログラム名（ファイル名）
を参照する特殊変数は？
$0っていう変数で出来るお

#!/usr/bin/perl
print $0,&#34;\n&#34;;
 </description>
    </item>
    
    <item>
      <title>perlでファイルハンドルを切り替えたいとか</title>
      <link>https://yaasita.github.io/2009/01/11/10461/</link>
      <pubDate>Sun, 11 Jan 2009 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2009/01/11/10461/</guid>
      <description>そういことがたまにあるはず
そんな時はuse FileHandle;が良いですよ
こんな感じで使うんだ
#!/usr/local/bin/perl
use FileHandle;
print &#34;Which write file? (a or b)\n&#34;;
$in=&amp;amp;lt;STDIN&amp;amp;gt;;
chomp $in;
my $fh = new FileHandle;
if ($in eq &#34;a&#34;){
$fh -&amp;amp;gt; open(&#34;&amp;amp;gt;a.txt&#34;);
}
elsif ($in eq &#34;b&#34;){
$fh -&amp;amp;gt; open(&#34;&amp;amp;gt;b.txt&#34;);
}
else{
print &#34;No File!!\n&#34;;
exit 0;
}
print $fh &#34;foo bar!\n&#34;;
$fh -&amp;amp;gt; close();
STDOUTとファイルぐらいの切り替えならこんな感じでselect使うのもありかもね
print &#34;Write Result? (y or n)\n&#34;;
$input_keyboard2=&amp;amp;lt;STDIN&amp;amp;gt;;
chomp $input_keyboard2;
if ($input_keyboard2 eq &#34;y&#34;){
open (FH2 ,&#34;&amp;amp;gt;res.txt&#34;);</description>
    </item>
    
    <item>
      <title>FLASH版CookieみたいなSharedObjectについて</title>
      <link>https://yaasita.github.io/2008/12/14/10834/</link>
      <pubDate>Sun, 14 Dec 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/12/14/10834/</guid>
      <description> とあるゲームをやっていたときにふと思ったのでメモ。
ゲームをプレイしてある面で止める→次にブラウザ立ち上げてみる→続きからPLAYできる→Cookieを消してみる→続きから出来る
なぜ？それはFLASHのSharedObjectというデータを読み込んでいるからなのさ
どこに保存されているの？
WindowsXPなら
C:\Documents and Settings\＜ユーザー名＞\Application Data\Macromedia\Flash Player\#SharedObjects
とかだな多分
Linuxなら
/home/username/.macromedia/Flash_Player/とか探せばいいみたいね
参考リンク
http://www.gravity-works.jp/gravica/web/000077.shtml </description>
    </item>
    
    <item>
      <title>cshの限界について</title>
      <link>https://yaasita.github.io/2008/12/07/10856/</link>
      <pubDate>Sun, 07 Dec 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/12/07/10856/</guid>
      <description>配列を参照するのにforeach文というものがあります
これはperlとかphpにあったりします。そんでcshにもあるのですが・・・
なぜかcshのforeach文に指定できる配列数の上限は997なのです
この997配列がMAXというのはOSやハードウェアの仕様によらずに、どの環境でも同じでした。
つまりcshの言語仕様ってことらしい。なぜ？？なんでだろーなんでだろー
いろいろなシェル（一部perlで検証してみた）
イナバの物置風にforeachの捌ける配列MAXを探す
※スクリプト中に使われるファイル（list.txt,list2.txt)は複数行あるテキストファイルです。このファイルに例えば3行あれば3個の配列を用意します（空行は除く）。
つまりcshが997が限界なのかを検証するには997行のファイルと998行のファイルを用意すればいいのです。
まずはbash　全然平気

#!/bin/bash
array=(`cat list.txt`)
for line in ${array[@]}
do
echo $line
done
echo &#34;やっぱりbash ${#array[@]} 人のっても大丈夫&#34;

続いてzsh　まあbashの強化版だし平気みたい

#!/usr/bin/zsh
array=(`cat list.txt`)
for line in ${array[@]}
do
echo $line
done
echo &#34;やっぱりzsh ${#array[@]} 人のっても大丈夫&#34;

cshとは違うのだよcshとは　みたいな感じで余裕でクリア

#!/bin/tcsh
set array=`cat list.txt`
foreach i ($array)
echo $i
end
echo &#34;やっぱりtcsh ${#array} 人乗っても大丈夫&#34;

流石perlだどんな配列でもなんとも無いぜ！

#!/usr/bin/perl
open (FH,&#34;</description>
    </item>
    
    <item>
      <title>VirtualPCの設定ファイルとかの場所は？</title>
      <link>https://yaasita.github.io/2008/11/30/10916/</link>
      <pubDate>Sun, 30 Nov 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/11/30/10916/</guid>
      <description> ・使用しているバーチャルHDDは？
VirtualPCコンソール→設定(T)→ハードディスクのバーチャルハードディスクファイルってのを見れば分かると思う
・使用してるVirtualマシンは？（その他、復元ファイルなどは？）
\Documents and Settings\ユーザー名\Application Data\Microsoft\Virtual PC\Virtual Machines
を見ればいける </description>
    </item>
    
    <item>
      <title>解析テンプレ</title>
      <link>https://yaasita.github.io/2008/10/24/11060/</link>
      <pubDate>Fri, 24 Oct 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/10/24/11060/</guid>
      <description> 定番解析ソフトと解析勉強サイト
●デバッガ OllyDbg
Digital Travesiaで再配布
●プロセスメモリエディタ兼デバッガ スペシャルねこまんま57号
http://www.vector.co.jp/soft/win95/hardware/se254476.html
●プロセスメモリエディタ兼デバッガ うさみみハリケーン
http://hp.vector.co.jp/authors/VA028184/
●ヘキサエディタ Stirling
http://www.vector.co.jp/soft/win95/util/se079072.html
●PCゲーム解析指南+OllyDbg日本語化パッチ Digital Travesia
http://hp.vector.co.jp/authors/VA028184/
参考書
・解析魔法少女美咲ちゃん マジカル・オープン!
ISBN:4-7980-0853-2 2,730円 A5判 280 頁
・クラッカー・プログラム大全―禁断のシリアルナンバー解析テクニック
ISBN:4-88718-746-7 2625円 A5判 304頁
・はじめて読む8086
ISBN:4871482456 1,682円 286頁
購入回避推奨
ゲーム解析スレ・書評サイト等で酷評されている参考書
・いまどきのアセンブラプログラミング [橋本和明(著)]
・いまどきのアセンブラの教科書 [橋本和明(著)]
・アセンブラ読本 for Game ゼロからはじめるゲーム改造 [橋本和明(著)] </description>
    </item>
    
    <item>
      <title>perlの出力、入力関係</title>
      <link>https://yaasita.github.io/2008/07/06/11620/</link>
      <pubDate>Sun, 06 Jul 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/07/06/11620/</guid>
      <description> STDIN 標準入力：キーボードからの入力。 STDOUT 標準出力：ディスプレー (コンソール)。
STDERR 標準エラー出力：ディスプレー (コンソール)。
だそうですよ
print STDERR &#34;Erorr&#34;;
でエラー出力されるぽい
WindowsでもUNIXでもエラー出力をリダイレクトする際は
route 2 route.txt
みたいに2をつければおｋ </description>
    </item>
    
    <item>
      <title>＠wikiのデータバックアップをperlで自動化してみる</title>
      <link>https://yaasita.github.io/2008/07/05/11641/</link>
      <pubDate>Sat, 05 Jul 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/07/05/11641/</guid>
      <description>まず、ブラウザから保存までの過程を行い、パケットをキャプチャします。
今回、対象とするサイトはこちらです。キャプチャはWiresharkなどでも良いですが、今回はTCPのフローまで見る必要はありません。HTTPのリクエストヘッダさえ分かれば大丈夫なので、Live HTTP Headersなどで見たほうが便利です。（このソフトを使えばHTTPリクエストをGUI上で自由に変更できます。どのヘッダが必要か不要かも分かるので便利です）で、キャプチャしたものが以下のものです↓
Content-Length以下にはwikiidとpassというパスワードを送っています。submitのURLエンコードは「ダウンロード」という文字列を表しています。
ちなみにwikiidの項とpassの項とCookieは適当です。
POST /_mng/backup.php HTTP/1.1
Host: www34.atwiki.jp
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9) Gecko/2008052906 Firefox/3.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ja,en-us;q=0.7,en;q=0.3
Accept-Encoding: gzip,deflate
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
Referer: http://www34.atwiki.jp/_mng/backup2.php
Cookie: PHPSESSID=5684723debae48752efea5555565acdd
Content-Type: application/x-www-form-urlencoded
Content-Length: 93
wikiid=***********&amp;amp;amp;pass=*******&amp;amp;amp;submit=%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89


次にLive HTTP Headersのリプレイ機能を使って必要なヘッダが何かを判断します。まずCookieが必須かどうかを調べる必要があります。なぜならCookieが必要だった場合はCookie取得の処理が追加されるからです。いらなそうなヘッダを削除→リプレイで目的の結果になるかを確認　を繰り返してください。で、調べた結果、不要だということが分かりました。つまりPerlスクリプトではCookieヘッダは発行しません。ちなみにこの鯖はContent-Typeを指定しないとトップに戻されるようです。
-------------- wiki_back.pl ----------------------------------
#!/usr/bin/perl
use Net::HTTP;
### Initial Setting ###########################
$server =&#34;www34.atwiki.jp&#34;;
###############################################
$header{&#39;Host&#39;} = &#34;$server&#34;;
$header{&#39;User-Agent&#39;} = &#39;Mozilla/5.0 (Windows; U; Windows NT 5.</description>
    </item>
    
    <item>
      <title>ActivePerlでyahooにメールを送ろうか</title>
      <link>https://yaasita.github.io/2008/06/14/12134/</link>
      <pubDate>Sat, 14 Jun 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/06/14/12134/</guid>
      <description>Net::SMTPモジュールを使います。ただデフォルトでauthメソッドを使おうとしてもパケットを投げてくれないので、下のモジュールを新たにppmか何かでインストールして下さい。

次にコーディングに入ります。Net::SMTPについての説明はこちらを参照してください。
メールヘッダについてはTo:だけでいいかと思ったらうまく送信できなかったので、Thunderbirdのパケットをキャプチャしたものを丸パクリします。
Dataヘッダについては何でもいいかと思いますが、一応現在時を取得する方が親切設計でしょう。どれが必要なヘッダか不要なヘッダかは面倒なので調べていません。
Message-IDですがこちらを見る限り何でもいいそうです。好きな命名規則で良いでしょう。
＊参考
yahooの鯖はSMTPを拡張したESMTPで運用されています。ESMTPではグリーティングの際にEHLOコマンドを用います。（SMTPではHELOコマンド）
EHLOコマンドでは自分のホストを通知します。Thunderbirdでは
EHLO [192.168.0.6]
とグリーティングしますが、Net::SMTPでは
EHLO localhost.localdomain
とグリーティングします。まあどっちでも構いませんが、、、
http://www.atmarkit.co.jp/fnetwork/rensai/netpro06/netpro01.html
#!/usr/local/bin/perl
use Net::SMTP;
$user=&#34;??????&#34;;
$passwd=&#34;?????????????&#34;;
$maildata=Date: Sat, 14 Jun 2008 09:59:39 +0900
From: uesugi 
User-Agent: Thunderbird 2.0.0.14 (Windows/20080421)
MIME-Version: 1.0
To: yahoo 
Subject: This Mail Make Perl
Content-Type: text/plain; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit
END
$smtp = Net::SMTP-new(&#39;smtp.mail.yahoo.co.jp&#39;,Timeout=30,Debug=1);
$smtp-auth($user, $passwd) or die &#34;Auth Fail\n&#34;;
$smtp-mail(&#39;????????????????????@yahoo.co.jp&#39;);
$smtp-to(&#39;????????????????????@yahoo.co.jp&#39;);
$smtp-data();
$smtp-datasend(&#34;$maildata&#34;);
$smtp-datasend(&#34;\n&#34;);
$smtp-datasend(&#34;A simple test message\n&#34;);</description>
    </item>
    
    <item>
      <title>Debian(etch)でcpan設定</title>
      <link>https://yaasita.github.io/2008/06/14/12155/</link>
      <pubDate>Sat, 14 Jun 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/06/14/12155/</guid>
      <description>まずCPANを使う上で必要なソフトは下記のとおりです。先にインストールしておきます。
gzip,tar,unzip,make,lynx,wget,ncftpget(ncftpでインストール)
#cpan
で初回起動時の設定が入る。基本的にEnterでデフォルトの設定で問題ないと思います。
The next option deals with the charset your terminal supports. In
general CPAN is English speaking territory, thus the charset does not
matter much, but some of the aliens out there who upload their
software to CPAN bear names that are outside the ASCII range. If your
terminal supports UTF-8, you say no to the next question, if it
supports ISO-8859-1 (also known as LATIN1) then you say yes, and if it</description>
    </item>
    
    <item>
      <title>pearのコマンドとか・・・</title>
      <link>https://yaasita.github.io/2008/06/12/12177/</link>
      <pubDate>Thu, 12 Jun 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/06/12/12177/</guid>
      <description> phpのライブラリ管理のpear
よく使うコマンド備忘録
pear
PEARコマンド一覧表示
pear help command_type
command_typeの説明を表示
pear list
現在インストールされているパッケージ一覧
pear list-upgrades
更新ライブラリの確認
pear upgrade package
パッケージのアップグレード前述のpear list-upgradeで出てきたPACKAGE欄を
packageに入れる </description>
    </item>
    
    <item>
      <title>Linux版のvim7に日本語ヘルプを入れてみる</title>
      <link>https://yaasita.github.io/2008/06/07/12261/</link>
      <pubDate>Sat, 07 Jun 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/06/07/12261/</guid>
      <description> なんかkaoriyaさんのとこに
http://www.kaoriya.net/vimdoc_j/
という日本語ヘルプがあったので落としてくるそんで解凍とかする。
解凍したものを/usr/share/vim/vim71に放り込んでも拡張子が.jaxとかなっててうまくいかない
しょうがないから拡張子を.jax→.txtにする
一括変換とかシェルスクリプトでできそうだけど分からないからPerlで書く
#!/usr/local/bin/perl
$newdir=&#34;.&#34;;
chdir $newdir or die &#34;$newdir is not found!\n&#34;;
opendir(DIR, &#34;.&#34;);
@file = readdir(DIR);
closedir(DIR);
@file = sort {(stat ($a))[8]  (stat ($b))[8]} @file;
foreach(@file){
if($_=~/^\.$|^\.\.$|^rename\.pl$/){ next;
}
if ($_=~/\.jax$/){
$moto=$_;
$_=~s/\.jax$//;
system &#34;mv $moto $_.txt&#34;;
#print &#34;$moto $_.txt\n&#34;;
}
# print $_,&#34;\n&#34;;
# `mv $moto `;
} </description>
    </item>
    
    <item>
      <title>定期的に文章をバックアップする</title>
      <link>https://yaasita.github.io/2008/06/07/12240/</link>
      <pubDate>Sat, 07 Jun 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/06/07/12240/</guid>
      <description> なんか大事な文章を日付順にバックアップしておきたいときに書くシェルスクリプトとか・・・
#! /bin/bash
var=`LANG=C date +&#39;%Y%m%d%a&#39;`
cp /media/taihi1/komando.txt /media/taihi1/komando-bak/$var.txt </description>
    </item>
    
    <item>
      <title>COBOL符号付数値の表記方法</title>
      <link>https://yaasita.github.io/2008/04/19/12592/</link>
      <pubDate>Sat, 19 Apr 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/04/19/12592/</guid>
      <description> 10の位以上 &amp;amp;h3x 0 1 2 3 4 5 6 7 8 9
プラスの1の位 &amp;amp;h4x @ A B C D E F G H I
マイナスの1の位 &amp;amp;h5x p q r s t u v w x y 参考リンク </description>
    </item>
    
    <item>
      <title>ブロードバンドルータの設定や確認をperlで行う1</title>
      <link>https://yaasita.github.io/2008/03/18/12734/</link>
      <pubDate>Tue, 18 Mar 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/03/18/12734/</guid>
      <description> 市販されているブロードバンドルーターの多くがブラウザから設定を行うタイプだと思います。これはGUIにより容易に設定が行えますが、ポートの開閉やIPアドレスの定期的な確認などがしたいときには煩わしくプログラムで自動化したいと思うことがあります。
まずは下図の様な場合を想定し、目的のスクリプトを作成したいと思います。

ルーターはNP-BBRPでWAN側はPPPoE接続されています。今回は例としてNP-BBRPを想定しますが、どのルーターでも出来るように説明します。
まず、認証方法を確認します。ブラウザからログインして設定画面に行きます。
この場合http://192.168.0.1/にアクセスしログインします。下図のような画面が出てきました。ユーザー名、パスワード欄に適切なワードを入れてログインします。
 </description>
    </item>
    
    <item>
      <title>2chのスレを自動保存</title>
      <link>https://yaasita.github.io/2008/02/27/12879/</link>
      <pubDate>Wed, 27 Feb 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/02/27/12879/</guid>
      <description>2chのスレを自動で保存する方法を考えます。
スレの進行が早いところはすぐにDAT落ちしてしまいます。プログラムによって定期的にDATを取得できたら便利です。
いきいきwikiによるとUser-AgentをMonazilla/1.00 (ブラウザ名/バージョン)にするといいようです。
また鯖の転送量を減らす目的でgzipを推奨しています。
例としてJaneviewのリクエストヘッダを見て見ます。

こんな感じです。
これよりどこにアクセスし、DATを取得しているか分かります。
取得したdatはgzipに圧縮されているのでgunzipで展開します。（gunzipコマンドのあるLinux環境を想定しています）
ここで注意して欲しいのは必ずgzipで返ってくるとは限らない点です。gzipではなく生のDATが送られてきても対応できるようにします。
例としてDATを取得するスクリプトをいかに示します。定期的に取得する場合はcronなどで回して下さい。
#!/usr/bin/perl
use Net::HTTP;
### Initial Setting ###########################
$server =&#34;namidame.2ch.net&#34;;
$category =&#34;campus&#34;;
$unixtime =&#34;1234567890&#34;;
$backup_directory =&#39;/var/www/&#39;;
###############################################
unless($backup_directory=~/\/$/){
$backup_directory.=&#39;/&#39;;
}
$s = Net::HTTP-new(Host = &#34;$server&#34;) || die $@;
$s-max_line_length(0);
$s-keep_alive(300);
$s-write_request(GET = &#34;/$category/dat/$unixtime.dat&#34;, &#39;User-Agent&#39; = &#34;Monazilla/1.00 (perl/1.3)&#34; , &#39;Accept-Encoding&#39; = &#34;gzip&#34; );
($code, $mess, %h) = $s-read_response_headers;
unless($code eq &#34;200&#34;){
print &#34;Thread not found!\n&#34;;
exit;
}
open (FH,&#34;$backup_directory$unixtime.dat.gz&#34;) or die $!</description>
    </item>
    
    <item>
      <title>perlでURLデコード</title>
      <link>https://yaasita.github.io/2008/01/02/13025/</link>
      <pubDate>Wed, 02 Jan 2008 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2008/01/02/13025/</guid>
      <description> #!/usr/local/bin/perl
open (FH,&#34;access.log&#34;);
open (FH2,&#34;kekka.txt&#34;);
while(){
s/%([0-9A-Fa-f][0-9A-Fa-f])/pack(&#39;H2&#39;,$1)/eg;
print FH2;
}
close FH;
close FH2;
s置換演算子のオプションeは置換後の文字列（ここではpack(&#39;H2&#39;,$1)）の評価を行う。
gオプションは繰り返しマッチさせる。 </description>
    </item>
    
    <item>
      <title>ActivePerlとLinuxのPerlで挙動が違う</title>
      <link>https://yaasita.github.io/2007/09/16/13892/</link>
      <pubDate>Sun, 16 Sep 2007 00:00:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2007/09/16/13892/</guid>
      <description> ブロードキャストアドレスを指定したsend関数で挙動の違いがあります。
たとえばUDPパケットを送ろうと、次のようなsocketを作ります。
socket(SOCKET, PF_INET, SOCK_DGRAM, 0) ;
そして次のように送ろうとします。
send(SOCKET, $data, 0, $sock_addr) ;この時もし$sock_addrがブロードキャスアドレスだった場合
WindowsのActivePerlなら問題なくブロードキャストできます。
LinuxのPerlだった場合はSocketの生成後に
setsockopt(SOCKET, SOL_SOCKET, SO_BROADCAST,1) ;としてソケットオプションSO_BROADCASTを指定しなければエラーを返し、送信できません。
ソケットについては以下を参照して下さい。
Socket(2)
Socket(7) </description>
    </item>
    
  </channel>
</rss>