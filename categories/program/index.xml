<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/program/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 14 Jan 2018 03:41:21 +0900</lastBuildDate>
    <atom:link href="/categories/program/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GoogleHomeでPCつける</title>
      <link>https://yaasita.github.io/2018/01/14/google-home/</link>
      <pubDate>Sun, 14 Jan 2018 03:41:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/14/google-home/</guid>
      <description>Mojoliciousで受けてコマンド叩くだけ
IFTTTはこんな感じにして


Mojolicious側のコントローラはこんな感じで受けた

喋りたくない時もあるので、JavaScriptでも叩けるようにした(適当な場所にHTML置いておいた)
function hogeop(){ postjson({key: &#39;huga&#39;}) } function postjson(j) { fetch(&amp;quot;/google&amp;quot;, { method: &amp;quot;POST&amp;quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(j) }).then(res =&amp;gt; res.json()).then(res =&amp;gt; { console.log(res) }); }  結論: こうやって家電を操作できるのは楽しい
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書の有効期限チェック</title>
      <link>https://yaasita.github.io/2017/11/24/ssl-check/</link>
      <pubDate>Fri, 24 Nov 2017 01:54:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/24/ssl-check/</guid>
      <description>なんか必要だったので、シェルとかでも良いけど
 </description>
    </item>
    
    <item>
      <title>maildropの管理UIを作った</title>
      <link>https://yaasita.github.io/2017/09/29/maildrop-admin/</link>
      <pubDate>Fri, 29 Sep 2017 02:38:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/09/29/maildrop-admin/</guid>
      <description>フロントをVue.jsでこんな感じの構成

動作の様子

maildropの設定ファイル(~/.mailfilter)でも良いんだけどちょっと
日付が入れられないのとエントリーが増えてくるとちょっと管理しきれなくなった
一旦こんな感じのJSONを経由することでマシにした感じ
 &amp;quot;JUNKMAIL&amp;quot;: [ { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*atmarkit.co.jp&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; }, { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*facebookmail.com&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; },  サーバサイドの実装
https://github.com/yaasita/maildrop-admin
.mailfilterへの変換処理
  function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img0&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img0&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>iptablesの変更をWebからやる</title>
      <link>https://yaasita.github.io/2017/08/22/imap-iptables/</link>
      <pubDate>Tue, 22 Aug 2017 02:17:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/22/imap-iptables/</guid>
      <description>httpsのほかにもう一個ポートのアクセス制限を面倒見たくなかったのでなんとなくやってみた
httpsでWebUIにアクセスしたらIP許可リストに入れるって処理

PerlのCGIからGo言語で書いたバイナリを呼んでiptablesを更新する的な処理
GoとPerl間はJSONで受け渡す
Goで書いたのはSUIDビット立てたバイナリで叩きたいと思ったから
（なんかうまくいかなくて結局sudoでやったけど)
https://github.com/yaasita/mail-iptables
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>edit-slack.vimちょっと書き直した</title>
      <link>https://yaasita.github.io/2017/08/10/edit-slack/</link>
      <pubDate>Thu, 10 Aug 2017 02:35:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/10/edit-slack/</guid>
      <description>edit-slack.vim をちょっと直した
主な変更点は以下の通り
reactionを表示するようにした

アップロードされたファイルのダウンロードリンクを表示

キーワード検索ができるようにした
例) vim slack://sw/hogehoge vim slack://sw/from:@yamasita vim slack://sw/on:today  取っ散らかってたコードをちょっと直した
https://github.com/yaasita/edit-slack/compare/v0.2.0...v0.8.1
ちょっと見ない間にSlackもなんか変わってて、今までのTest tokenがlegacy tokenって名前になってたり、botアクセス、userアクセスで細かくAPI使用制限がされてるようになってた(前からか？)
 function callback(data){ photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>githubからコードスニペットを探す</title>
      <link>https://yaasita.github.io/2017/07/15/github-code-search/</link>
      <pubDate>Sat, 15 Jul 2017 23:53:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/15/github-code-search/</guid>
      <description>githubのAPIでコードスニペット探すと捗る
  </description>
    </item>
    
    <item>
      <title>AWSで監視してSlackに流す設定</title>
      <link>https://yaasita.github.io/2017/06/22/aws-monitor/</link>
      <pubDate>Thu, 22 Jun 2017 04:17:15 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/22/aws-monitor/</guid>
      <description>EC2 -&amp;gt; CloudWatch -&amp;gt; SNS -&amp;gt; Lambda -&amp;gt; Slackみたいなよくある設定例

Slack Customize Slack =&amp;gt; Custom Integrations から Incoming WebHooks 選んで適当にチャンネル選んで追加
URLをメモっておく
EC2 とりあえずaws cli入れて、この辺の監視スクリプトをcronに登録すればOK
apt-get install awscli # カスタムメトリクス用スクリプト apt-get install unzip libwww-perl libdatetime-perl curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O unzip CloudWatchMonitoringScripts-1.2.1.zip rm CloudWatchMonitoringScripts-1.2.1.zip cd aws-scripts-mon cp awscreds.template awscreds.conf vim awscreds.conf # keyIDとSecretKeyを書いておく  こんな感じのやつをcronに登録
~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --swap-util --disk-path=/ --disk-space-util --from-cron  んで即座に反映されるはず
 カスタムメトリクスをパブリッシュする
  CloudWatch ダッシュボード作ったりアラーム書いたりしておく
通知はSNSのTopicsを指定する(後述)
SNS Topicsを新しく作ってTopicネームくらいは適当に埋めておく後で、Lambda側で指定するのでTopicさえあればOK</description>
    </item>
    
    <item>
      <title>tumblrの画像を貼るときに直リンクしてはいけない</title>
      <link>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</link>
      <pubDate>Sun, 07 May 2017 02:49:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/05/07/dont-use-direct-link-in-tumblr/</guid>
      <description>なぜか？画像のURLはたまに変わりリンク切れしてしまうから
ちゃんとAPIを叩いてポストIDから画像リンクを取得した方が良い
 </description>
    </item>
    
    <item>
      <title>Vue.jsのちょっとしたこと</title>
      <link>https://yaasita.github.io/2017/04/14/vuejs-tips/</link>
      <pubDate>Fri, 14 Apr 2017 15:57:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/14/vuejs-tips/</guid>
      <description> v-on=&amp;ldquo;click&amp;rdquo;とmodelは一緒に使えない  watchで監視する
 https://github.com/vuejs/vue/issues/1146
   ある要素だけが繰り返すわけじゃないときはtemplateで挟むとよい &amp;lt;template v-for=&amp;quot;item in items&amp;quot;&amp;gt; &amp;lt;a&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;b&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;/template&amp;gt;  https://jp.vuejs.org/v2/guide/list.html
hash操作はリアクティブにならない https://jp.vuejs.org/v2/guide/reactivity.html
vm.b = 2 // NG Vue.set(object, key, value) // OK  </description>
    </item>
    
    <item>
      <title>ginを使ってechoをLiveReload</title>
      <link>https://yaasita.github.io/2017/04/03/gin-live-reload/</link>
      <pubDate>Mon, 03 Apr 2017 00:05:20 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/03/gin-live-reload/</guid>
      <description> Golangのweb frame workの Echo のライブリロード
ginがproxyしてくれるのでechoサーバのポートを教えてくれればよろしくリコンパイルしてくれる
gin --appPort 8080 r go run server.go  CompileDaemonだとこんな感じか
go get github.com/githubnemo/CompileDaemon CompileDaemon -command=&amp;quot;./run.sh&amp;quot; -include=&amp;quot;*.go&amp;quot;   参考リンク  https://github.com/codegangsta/gin
 https://github.com/githubnemo/CompileDaemon
 https://goo.gl/gp6L9z
  </description>
    </item>
    
    <item>
      <title>複数ファイルアップロードの実装</title>
      <link>https://yaasita.github.io/2017/04/02/multiple-upload/</link>
      <pubDate>Sun, 02 Apr 2017 04:18:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/02/multiple-upload/</guid>
      <description>multiple指定してuploadフォーム作るときの話
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;files&amp;quot; multiple /&amp;gt;  で複数ファイル選択できるが
Perl CGIで受けるときに↓みたいにすると
my @files = $q-&amp;gt;param(&#39;files&#39;); for my $filename (@files) { my $fn = decode(&amp;quot;UTF-8&amp;quot;, $filename); move($q-&amp;gt;tmpFileName($filename), &amp;quot;/path/to/dir&amp;quot;); }  iOSで選択するとfilenameが全部image.jpgでPOSTされてしまう可能性があるのでダメ
(AndroidとかはOK)
なのでこんな感じにする
my @fhs = $q-&amp;gt;upload(&#39;files&#39;); my %fname_count; for my $fh (@fhs){ my $out_filename = non_overlapping_filenames(&amp;quot;$fh&amp;quot;); my $io_handle = $fh-&amp;gt;handle; open (my $wr,&amp;quot;&amp;gt;&amp;quot;, $out_filename) or die $!; while (&amp;lt;$io_handle&amp;gt;){ print $wr $_; } close $wr; push(@result, decode(&amp;quot;UTF-8&amp;quot;,&amp;quot;$fh&amp;quot;)); }  あと古めのアンドロイドはmultiple指定しても複数ファイル選択ができない</description>
    </item>
    
    <item>
      <title>Vue.jsとモーダルウィンドウ</title>
      <link>https://yaasita.github.io/2017/03/04/vuejs-modal/</link>
      <pubDate>Sat, 04 Mar 2017 02:29:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/03/04/vuejs-modal/</guid>
      <description> 参考実装 slotで後から要素を上書きすればOK
 https://github.com/yaasita/vuejs-modal
参考リンク  https://jp.vuejs.org/v2/examples/modal.html
  </description>
    </item>
    
    <item>
      <title>Vue.jsでドラッグ＆ドロップリスト</title>
      <link>https://yaasita.github.io/2017/02/20/draggable-list/</link>
      <pubDate>Mon, 20 Feb 2017 23:17:28 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/20/draggable-list/</guid>
      <description> Vue.js 2.1.10でやってみる
https://github.com/yaasita/vuejs-dad-box
 並び変え終わったらdragendで
var request_url = &amp;quot;https://hogehogehoge&amp;quot; var req = new XMLHttpRequest(); req.open(&#39;POST&#39;, request_url, false); req.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;); req.send(JSON.stringify(this.boxes));  とかやってどっかに飛ばす
んで後ろ側で
$sort_json = json_decode(file_get_contents(&amp;quot;php://input&amp;quot;),true);  とかやって受けた
実際は毎回更新させるのは重いだろうし、交換したDOM二つだけをjsonに乗せるとか工夫の余地あり
参考リンク  多分Vue.js 1 時代のやつ
 Vue.jsのリストレンダリングとhtml5のドラッグ＆ドロップの実装
  ネイティブ HTML5 ドラッグ＆ドロップ
  </description>
    </item>
    
    <item>
      <title>Vue.js内のメソッドはコロン省略しない方が良い</title>
      <link>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs/</link>
      <pubDate>Fri, 17 Feb 2017 02:06:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/17/do-not-omit-colon-in-vuejs/</guid>
      <description>InternetExplorer11で
SCRIPT1003: &#39;:&#39; がありません。  というエラーになるから
// OK var ok = new Vue({ el: &#39;#example1&#39;, data: { }, methods: { HogeMethod: function(){ } } }); // NG var ng = new Vue({ el: &#39;#example2&#39;, data: { }, methods: { HogeMethod(){ } } });  chromeとかMicrosoft Edgeとかなら良いんだけどね</description>
    </item>
    
    <item>
      <title>relをtumblrテーマに加える</title>
      <link>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</link>
      <pubDate>Tue, 14 Feb 2017 01:05:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/14/add-rel-to-tumblr/</guid>
      <description>tumblrのテーマをDefaultにしてみた
一点気になったのは
リンクがこんな感じでrel属性が指定されてない
&amp;lt;a href=&amp;quot;{PreviousPage}&amp;quot; class=&amp;quot;left&amp;quot;&amp;gt; &amp;lt;a rel=&amp;quot;next&amp;quot; href=&amp;quot;{NextPage}&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;  これだとvimiumの[[, ]]コマンドで辿れないのでそこだけ修正した
 修正後のテーマ
 https://gist.github.com/yaasita/40831000ea20c85f20eeccaa7de5c9c3
  参考リンク
 rel=”next”とrel=”prev” の使い方
   </description>
    </item>
    
    <item>
      <title>閉じるボタンとVue.js</title>
      <link>https://yaasita.github.io/2017/02/07/close-button-with-vuejs/</link>
      <pubDate>Tue, 07 Feb 2017 23:59:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/02/07/close-button-with-vuejs/</guid>
      <description>box並べて閉じるボタンつけて、押されたらDOM消して何かするみたいなよくあるインターフェイス
Vue.js使って書いてみた
すごい便利
 https://github.com/yaasita/vuejs-close-button</description>
    </item>
    
    <item>
      <title>新旧リダイレクト</title>
      <link>https://yaasita.github.io/2017/01/16/redirect-githubpage/</link>
      <pubDate>Mon, 16 Jan 2017 23:36:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/16/redirect-githubpage/</guid>
      <description> middlemanからの移行に際してリンクが壊れまくった
GoogleのSearch Console
https://yaasita.tumblr.com/post/155945715637 
とりあえずJavaScriptで新URL案内すればいいか
 こんな感じ
https://yaasita.tumblr.com/post/155945774152 
旧ページ  記事ページ
 https://yaasita.github.io/2010/08/30/5917.html
  タグページ
 https://yaasita.github.io/tags/soft.html
  年ページ
 https://yaasita.github.io/2008.html
   </description>
    </item>
    
    <item>
      <title>ore_markdownを画像埋め込みに対応させた</title>
      <link>https://yaasita.github.io/2017/01/15/ore_markdown_update2/</link>
      <pubDate>Sun, 15 Jan 2017 02:47:40 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/15/ore_markdown_update2/</guid>
      <description>またore_markdown-goの修正
こんな感じに画像データをBase64にして埋め込めばHTMLファイル一枚で完結しそうだったので修正した
&amp;lt;img src=&amp;quot;data:image/png;base64,(base64文字列)&amp;quot; alt=&amp;quot;img1&amp;quot;&amp;gt;  修正内容
吐き出されたHTMLの例
https://gist.githubusercontent.com/yaasita/d9b55cff5e52197adf4840cf702e5bd6/raw/c6a3c2f96f4360ad3fa526c6c5ae5302acd26769/preview.html
保存してHTMLを表示させれば画像がみれるはず</description>
    </item>
    
    <item>
      <title>ansibleで作ったロール</title>
      <link>https://yaasita.github.io/2017/01/09/my-ansible-role/</link>
      <pubDate>Mon, 09 Jan 2017 16:24:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/09/my-ansible-role/</guid>
      <description>成果物  ec2でスワップファイル置くとかするやつ
 https://github.com/yaasita/ansible_role_amazon-ec2
  aptのproxy設定
 https://github.com/yaasita/ansible_role_apt-proxy
  ブラックホールメールサーバ作るときの設定
 https://github.com/yaasita/ansible_role_blackhole-postfix
  adminユーザ作るとき
 https://github.com/yaasita/ansible_role_admin-server
  centosでよくやる設定
 https://github.com/yaasita/ansible_role_common_centos
  Ubuntuでよくやる設定
 https://github.com/yaasita/ansible_role_common_ubuntu
  Dockerコンテナにするときによくやる設定
 https://github.com/yaasita/ansible_role_docker-care
  munin-node入れるとき
 https://github.com/yaasita/ansible_role_munin
  mysql
 https://github.com/yaasita/ansible_role_mysql
  nagios nrpe
 https://github.com/yaasita/ansible_role_nagios-nrpe
  ネットワーク設定
 https://github.com/yaasita/ansible_role_network
  proxy設定(主にaptの)
 https://github.com/yaasita/ansible_role_proxy
  railsの初期設定
 https://github.com/yaasita/ansible_role_rails
  rbenv</description>
    </item>
    
    <item>
      <title>ore_markdownをGo言語で書き直した</title>
      <link>https://yaasita.github.io/2017/01/06/ore_markdown_to_golang/</link>
      <pubDate>Fri, 06 Jan 2017 15:44:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/01/06/ore_markdown_to_golang/</guid>
      <description> 久々に ore_markdownを書き直した
感想とか  Ruby(Gem: github-markdown)→Go(russross/blackfriday)で書き直し
 スタティックファイルもgo-bindataでバイナリに閉じ込めた
 OS間の違いを意識するのがめんどくさいのでVimでの判定は全部やめてGo側に寄せた
 早くて良い
  成果物とかライブラリ  作ったもの
 https://github.com/yaasita/ore_markdown
 https://github.com/yaasita/ore_markdown-go
  blackfriday
 https://github.com/russross/blackfriday
 https://godoc.org/github.com/russross/blackfriday
  go-bindata
 https://github.com/jteeuwen/go-bindata
   </description>
    </item>
    
  </channel>
</rss>
