<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>soft on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/soft/</link>
    <description>Recent content in soft on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 04 Apr 2021 05:08:25 +0900</lastBuildDate>
    
	<atom:link href="https://yaasita.github.io/categories/soft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>skypeログをエクスポート出来るようになってた</title>
      <link>https://yaasita.github.io/2021/04/04/skype-log-2021/</link>
      <pubDate>Sun, 04 Apr 2021 05:08:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/04/04/skype-log-2021/</guid>
      <description>これは便利
こちらの手順に従えば、アップロードファイルと、メッセージのjsonが手に入る
https://support.skype.com/ja/faq/FA34894/skype-huairutochiyatsutolu-li-woekusupotosurufang-fa
よく見ると、結構昔の奴も入ってるので昔からサーバー側でログを取ってたみたいね</description>
    </item>
    
    <item>
      <title>mpdとncmpc</title>
      <link>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</link>
      <pubDate>Sat, 20 Mar 2021 14:39:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</guid>
      <description>mpd と ncmpc の設定メモ
インストール apt install mpd ncmpc  セットアップ /etc/mpd.confの設定
http経由で聞くのでoutputはhttpにします
 ~/.config/ncmpc/config
タグで管理してないのでファイル名だけ表示します
host = &amp;quot;127.0.0.1&amp;quot; port = 6600 list-format = &amp;quot;%file%&amp;quot; status-format = &amp;quot;%file%&amp;quot; text-editor = vim  /var/lib/mpd/music/ に音楽ファイルを入れる(symlinkでも可)
ncmpcで起動 Ctrl-UでDBのアップデート
歌詞表示 歌詞表示するなら ncmpcpp の方が楽ですが、最初からvimキーバインドなncmpcが好きなのでこちらを使っています
方法は以下の記事通り歌詞検索用のスクリプトを配置するだけ
https://www.use-strict.de/using-ncmpc-to-fetch-and-read-lyrics.html
debianのパッケージは以下のオプションでビルドされてるので
-Dlyrics_plugin_dir=&amp;quot;/usr/lib/ncmpc/lyrics/&amp;quot;  /usr/lib/ncmpc/lyrics/01-test.sh
みたいなファイルをおきます
これが歌詞検索の際に実行されます
こんなファイルを置いて
#!/bin/bash echo &amp;quot;$@&amp;quot; echo &amp;quot;あいうおえ&amp;quot;  artist, titleを設定
eyeD3 -a backnumber hoge.mp3 eyeD3 -t 高嶺の花子さん takane.mp3  すると第一引数にartist, 第二引数にtitleが入ります

この画面で、Sを押すと歌詞を~/.cache/ncmpc/lyrics/保存できたりもします</description>
    </item>
    
    <item>
      <title>apacheのmod-auth-openidcについて</title>
      <link>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</link>
      <pubDate>Fri, 01 Jan 2021 22:37:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</guid>
      <description>BASIC認証かけるみたいに簡単にGoogle認証を追加できた
公式サイト
https://www.mod-auth-openidc.org/
インストール
apt install libapache2-mod-auth-openidc  設定 /etc/apache2/mods-enabled/auth_openidc.conf
OIDCRedirectURI https://hoge.example.jp/oidc/redirect_uri OIDCCryptoPassphrase hogehoge-foobar OIDCProviderMetadataURL https://accounts.google.com/.well-known/openid-configuration OIDCScope &amp;quot;openid email&amp;quot; OIDCClientID xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com OIDCClientSecret XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  リバースプロキシ的に使う例
/adminかつ、プライベートIP以外の場合はGoogle認証で hogehoge@gmail.com のみ許可
&amp;lt;VirtualHost *:443&amp;gt; ServerName hoge.example.jp &amp;lt;Location /&amp;gt; Require all granted &amp;lt;/Location&amp;gt; &amp;lt;Location /oidc/&amp;gt; AuthType openid-connect Require valid-user &amp;lt;/Location&amp;gt; &amp;lt;Location /admin&amp;gt; AuthType openid-connect Require claim email:hogehoge@gmail.com Require ip 192.168.0.0/24 &amp;lt;/Location&amp;gt; ProxyRequests Off ProxyPreserveHost On ProxyPass / http://127.0.0.1:8080/ keepalive=On RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot; RequestHeader unset X-Forwarded-For RequestHeader unset X-Forwarded-Server RequestHeader unset X-Forwarded-Host # SSL設定等が続く .</description>
    </item>
    
    <item>
      <title>postfixのReceived headerを隠す</title>
      <link>https://yaasita.github.io/2020/12/06/postfix-received-header/</link>
      <pubDate>Sun, 06 Dec 2020 01:11:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/12/06/postfix-received-header/</guid>
      <description>この回答通りなんだけど
一応補足とか
自分の環境だと、送信メールサーバーがセカンダリメールサーバーと兼任している
以下のように設定した
/etc/postfix/master.cf
smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no -o smtpd_client_restrictions=$mua_client_restrictions -o smtpd_helo_restrictions=$mua_helo_restrictions -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=smtpscleanup smtpscleanup unix n - y - 0 cleanup -o header_checks=regexp:/etc/postfix/header_checks  /etc/postfix/header_checks
/^Received:.*/ IGNORE  最初はsmtp_header_checksをmain.cfに書けば良いかなーと思ったんだけど、
これだと外から入ってきたメール(後にプライマリサーバーにrelayされる)も一律削除されてしまうので都合が悪かった</description>
    </item>
    
    <item>
      <title>hettyはmitmproxyの代わりになる？</title>
      <link>https://yaasita.github.io/2020/10/04/hetty/</link>
      <pubDate>Sun, 04 Oct 2020 00:50:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/10/04/hetty/</guid>
      <description>mitmproxyみたいにhttpsのリクエストを覗くツール
https://github.com/dstotijn/hetty
使い方は, CAの鍵と証明書を用意して
hetty -cert cacert.pem -key cakey.pem  でOK
8080でlistenするのでhttp proxyとして指定する
管理画面はproxyとて設定したブラウザで以下のURLから見れる
http://hetty.proxy/
感想
 mitmproxyより重い気がする GUIでリクエストを見れるのは便利 mitmdumpとかしないでも簡単に見れるのはとても嬉しい 検索機能は今後追加予定？ リクエストをreplyする機能も追加予定みたい  まとめ
今後に期待
今はmitmweb使う方が良いと思う</description>
    </item>
    
    <item>
      <title>chromebookのLinuxが新しくなってた</title>
      <link>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</link>
      <pubDate>Sun, 30 Aug 2020 04:28:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</guid>
      <description>Linuxを消して、また入れたら良くなってた
 Debianが10になった 日本語が打てる(ただ表示はバグる) 絵文字が見れる ターミナルがタブに対応した  </description>
    </item>
    
    <item>
      <title>DoHを試す</title>
      <link>https://yaasita.github.io/2020/05/10/doh/</link>
      <pubDate>Sun, 10 May 2020 03:22:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/10/doh/</guid>
      <description>DNS over HTTPSを試す
こんな構成で作る
Nginx -&amp;gt; doh-httpproxy -&amp;gt; systemd-resolved  インストール
doh-proxy pip3でインストールすればOK
pip3 install doh-proxy  以下のような設定でserviceを作る
/etc/systemd/system/doh-httpproxy.service
[Unit] Description=doh-httpproxy After=nginx.service [Install] WantedBy=multi-user.target [Service] ExecStart=/usr/local/bin/doh-httpproxy --upstream-resolver=127.0.0.53 --port 8080 --listen-address 127.0.0.1 Nginx側設定例
server { listen 443 ssl http2; server_name doh.example.net; ssl_certificate /etc/letsencrypt/live/doh.example.net/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/doh.example.net/privkey.pem; location /dns-query { proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } }  確認
curl --doh-url https://doh.example.net/dns-query google.co.jp  </description>
    </item>
    
    <item>
      <title>microk8sとskaffold</title>
      <link>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</link>
      <pubDate>Sun, 29 Mar 2020 03:24:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</guid>
      <description>microk8sとskaffoldをこんな感じで使う

インストール
snap install microk8s --class microk8s.kubectl config view --raw &amp;gt; ~/.kube/config  必要サービスの起動
microk8s.enable dns registry storage skaffold dev --no-prune=false --cache-artifacts=false --default-repo localhost:32000 -f skaffold.yaml  こんな感じにやると、リポジトリ部分を読み替えてくれるので便利
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>GKEでCloud SQL Proxyをsocketで使う</title>
      <link>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</link>
      <pubDate>Fri, 28 Feb 2020 04:08:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</guid>
      <description>GKEでもGAEみたいにCloud SQLに繋げたい場合の話
公式ドキュメントのサンプルだとこんな感じにport接続にしてる
https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/master/cloudsql/mysql_wordpress_deployment.yaml
socket接続の場合はこんな感じ
 参考
k8s サイドカーコンテナについて</description>
    </item>
    
    <item>
      <title>続 chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/17/backslash-with-vim/</link>
      <pubDate>Fri, 17 Jan 2020 17:22:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/17/backslash-with-vim/</guid>
      <description>前回 の続き
以下をvimrcに追記して事なきを得た
inoremapって非ASCII文字でも行けるみたい
inoremap ¥ \ cnoremap ¥ \  </description>
    </item>
    
    <item>
      <title>再度hugoアップデート</title>
      <link>https://yaasita.github.io/2019/12/24/hugo-update2/</link>
      <pubDate>Tue, 24 Dec 2019 17:58:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/12/24/hugo-update2/</guid>
      <description>前回からまたアップデート
hugoのバージョンを 0.56.3 =&amp;gt; v0.62.0 まで上げた
注意点としては, v0.58.0 から .Pagesの挙動が変わっているので
以下の通り、.Site.RegularPages に変更する必要がある
Building sites … WARN 2019/12/23 17:34:34 In the next Hugo version (0.58.0) we will change how $home.Pages behaves. If you want to list all regular pages, replace .Pages or .Data.Pages with .Site.RegularPages in your home page template. あとインラインのHTMLがデフォルトで削除されるので使ってたらコレもconfig.tomlへ追記
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true hardWraps = true 最近非互換のバージョンアップ多くない？
アップデートがめんどくさくなってきたな。。。</description>
    </item>
    
    <item>
      <title>on_ac_powerコマンドについて</title>
      <link>https://yaasita.github.io/2019/08/16/on-ac-power/</link>
      <pubDate>Fri, 16 Aug 2019 04:45:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/16/on-ac-power/</guid>
      <description>debian10にした関係でLinuxネタが続く
PCがバッテリーで動いてるかどうか判定するのにon_ac_powerってコマンドがある
そんで、バッテリー駆動の場合は電力を節約したいので、anacronとかを動かなくする制御がはいってる
例えば、/etc/cron.daily/mlocate の場合
if which on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then ON_BATTERY=0 on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || ON_BATTERY=$? if [ &amp;quot;$ON_BATTERY&amp;quot; -eq 1 ]; then exit 0 fi fi  こんな感じでon_ac_powerが1を返したらバッテリー駆動と判断しすぐに処理を止めてしまう
んで LB-C110B っていうひと昔前のノートPCだとこの判定が狂ってしまい常にバッテリー駆動と判定されてしまった
このままだと永遠にlocateコマンドが使えないので、divertで退避させた
dpkg-divert --divert /sbin/on_ac_power.disable --rename /sbin/on_ac_power ln -s /bin/true /sbin/on_ac_power  おしまい</description>
    </item>
    
    <item>
      <title>各種サーバの中間証明書の扱い</title>
      <link>https://yaasita.github.io/2019/08/14/ssl-capath/</link>
      <pubDate>Wed, 14 Aug 2019 10:20:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/08/14/ssl-capath/</guid>
      <description>中間証明書をどう設定するか問題
postfix smtpd_tls_cert_file = /etc/letsencrypt/live/example.net/cert.pem smtpd_tls_key_file = /etc/letsencrypt/live/example.net/privkey.pem smtpd_tls_CAfile = /etc/letsencrypt/live/example.net/chain.pem  Let&amp;rsquo;s Encryptの場合こんな感じ
smtpd_tls_CAfileに中間証明書を指定する
smtpd_tls_cert_fileにfullchain.pemを指定するやり方はNG
dovecot 10-ssl.conf
ssl_ca = &amp;lt;/etc/letsencrypt/live/example.net/chain.pem  これはダメ
この設定はクライアント証明書用ですので
正しくは、こんな感じに、まとめたやつを指定すればOK
ssl_cert = &amp;lt;/etc/letsencrypt/live/example.net/fullchain.pem  apache SSLCACertificateFileという設定はクライアント証明書用なのでここに入れない
SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem  dovecot同様に中間証明書もまとめて指定する
まとめ この問題はスマホのK-9 Mailでメール読もうとしたときに判明した
(突然CertPathValidatorExceptionって怒られた)
thunderbirdでメール読んでた時には発生しなかったのでなんだろなーと思ったんだけどこっちは多めにroot証明書入ってるみたいね

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   サーバー設定後はこんな感じで中間証明書まで確認したほうが良いかも
openssl s_client -connect example.org:465 -showcerts  thunderbirdだけで確認すると痛い目を見るよと言うお話でした</description>
    </item>
    
    <item>
      <title>hugoアップデート</title>
      <link>https://yaasita.github.io/2019/03/12/hugo-update/</link>
      <pubDate>Tue, 12 Mar 2019 23:00:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/03/12/hugo-update/</guid>
      <description>久々にhugoをアップデート v0.41 =&amp;gt; v0.54まで上げた
ワーニング潰し アップデートに伴い
.Prev と .Nextが非推奨になったぽい マニュアル, コミット
なのでこれはそれぞれ以下のように修正すればOK(意味が逆なので分かりにくいけど)
 .Prev =&amp;gt; .NextPage .Next =&amp;gt; .PrevPage  OGP設定 某会社でこのブログのRSSフィードをSlackに流していると聞いたので設定してみました
上手く表示できてますか？
修正箇所
themes/hugo-theme-geppaku/layouts/partials/header.html
 {{ if .IsHome }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;website&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}&amp;quot; /&amp;gt; {{ else }} &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Title }}&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot; /&amp;gt; &amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;{{ .Site.BaseURL }}{{ .Page.Dir }}&amp;quot; /&amp;gt; {{ end }} &amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;{{ .</description>
    </item>
    
    <item>
      <title>最近使ってる集中アプリ</title>
      <link>https://yaasita.github.io/2019/02/08/concentration/</link>
      <pubDate>Fri, 08 Feb 2019 00:52:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2019/02/08/concentration/</guid>
      <description>いろいろ試してみた
 Forest: 広告が邪魔 Focus To-Do: 複雑でよく分からなかった ブロックタイマー: なんか画面が付きっぱなしになる FLIP: 勉強用かな操作がむずい Studyplus: なんかポモドーロぽいの使えなかった  で結局Focus To-DoのWindowsアプリ版を使ってる</description>
    </item>
    
    <item>
      <title>skypeのログフォーマットが変わってた</title>
      <link>https://yaasita.github.io/2018/12/02/skype2json/</link>
      <pubDate>Sun, 02 Dec 2018 01:28:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/12/02/skype2json/</guid>
      <description>のでちょっとスクリプト修正した
https://github.com/yaasita/skype2json
修正点  yarnじゃなくても良いと聞いたのでnpmにだけにした フォーマットが歴代合わせて3つあったので、3つスクリプト書いた(年代は適当) libに共通関数をまとめた  なんか新しいフォーマットだと
nsp_dataってカラムにjsonで突っ込んでるみたいね。json型が無いSQLiteのツライところ
まとめ ころころフォーマットが変わるけどSQLiteになってるからSkypeは簡単にバックアップ出来て良い
LINEはどうしたもんか</description>
    </item>
    
    <item>
      <title>vimとtranslate-shellを連携する</title>
      <link>https://yaasita.github.io/2018/11/23/translate/</link>
      <pubDate>Fri, 23 Nov 2018 00:54:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/23/translate/</guid>
      <description>translate-shellが便利だ
vimrcにこんな感じに書く
 英単語の意味をちょっと調べる  翻訳  なんか微妙に画面がバグってるけど、本当はちゃんと表示されてる
まとめ こういうちょっとした改善大事</description>
    </item>
    
    <item>
      <title>mitmproxyが便利</title>
      <link>https://yaasita.github.io/2018/11/10/mitmproxy/</link>
      <pubDate>Sat, 10 Nov 2018 03:22:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/10/mitmproxy/</guid>
      <description>とっても便利なmitmproxyを使ってみた
概要 こんな感じでHTTPSなサイトも中間に入りこんでくれる
（root証明証を予め信頼しておく必要がある)
browser &amp;lt;---(指定のCA鍵で再署名)---- mitmproxy &amp;lt;---(HTTPSを一旦解く)----- web server  インストール apt install mitmproxy  設定 プライベートCAをやってるなら
 /etc/ssl/demoCA/private/cakey.pem /etc/ssl/demoCA/cacert.pem  この２ファイルを結合する
こんな感じで mitmproxy-ca.pem って名前でどっかのディレクトリに置く
-----BEGIN ENCRYPTED PRIVATE KEY----- ... -----END ENCRYPTED PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- 実行 こんな感じで実行できる &amp;ndash;view-filter で表示させたいURLを絞れる
(hogedirの中にmitmproxy-ca.pemが入ってる)
mitmproxy --set confdir=/path/to/hogedir --view-filter m3u  画面中ではVimぽいキーバインドで色々操作できる
リクエストを選んで、wでストリームを保存できる
dump mitmproxyだけだと長いURLとかは省略されちゃったりするので、完全なものを見る場合にmitmdumpを使う
# getだけ抽出 mitmdump -nr /tmp/save -w outfile &amp;quot;~m get&amp;quot; # リクエスト一覧 mitmdump -nr /tmp/save  まとめ HTTPSのデバッグ時にめっちゃ便利</description>
    </item>
    
    <item>
      <title>全文検索n-gram</title>
      <link>https://yaasita.github.io/2018/09/29/n-gram/</link>
      <pubDate>Sat, 29 Sep 2018 04:25:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/29/n-gram/</guid>
      <description>N-gramについて
検索とインデックスについて作った
検討資料用にどうぞ
https://gist.github.com/yaasita/ea31d7bbfc839fc859fd7d713800088b</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
  </channel>
</rss>