<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>soft on # cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/soft/</link>
    <description>Recent content in soft on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 21 Dec 2024 02:00:01 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/categories/soft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vimでGitHub Copilot</title>
      <link>https://yaasita.github.io/2024/12/21/vim-copilot/</link>
      <pubDate>Sat, 21 Dec 2024 02:00:01 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/12/21/vim-copilot/</guid>
      <description>Microsoft傘下のGitHub、「GitHub Copilot」を無料に（制限あり）
https://www.itmedia.co.jp/news/articles/2412/19/news111.html
ということで使ってみる
以下インストール
https://github.com/github/copilot.vim
vimrcはこんな感じ
常に補完が効くのは嫌なので使うときだけ有効にする
候補表示はCtrl-c
let g:copilot_filetypes = { &#39;*&#39;: v:false } imap &amp;lt;C-c&amp;gt; &amp;lt;Plug&amp;gt;(copilot-next) command! -nargs=0 ToggleCopilot call ToggleCopilot() function! ToggleCopilot() if exists(&#39;g:copilot_filetypes&#39;) unlet g:copilot_filetypes else let g:copilot_filetypes = { &#39;*&#39;: v:false } endif Copilot status endfunction :Copilot setup で設定
~/.config/github-copilot/ に credentials が入る
あとチャットはここから出来る
https://github.com/copilot</description>
    </item>
    
    <item>
      <title>pulseaudioのリモートプレイ設定</title>
      <link>https://yaasita.github.io/2024/12/08/pulseaudio/</link>
      <pubDate>Sun, 08 Dec 2024 19:03:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/12/08/pulseaudio/</guid>
      <description>概要 サウンドデバイスを持たない端末でもネットワーク経由でオーディオストリームを流せる
インストール apt install pulseaudio pavucontrol-qt スタート/ストップ pulseaudio --start pactl stat paplay -v hoge.wav pulseaudio --kill 設定 設定ファイル場所: /etc/pulse/
pavucontrol-qt 起動
プロファイルタブ選択 -&amp;gt; ミュートになってる箇所外す
再生タブと出力デバイスタブ両方確認
自動起動しないように以下を消しておく
ちなみにfirefoxとかpaplayすると勝手に立ち上がる
/etc/systemd/user/default.target.wants/pulseaudio.service /etc/systemd/user/sockets.target.wants/pulseaudio.socket 参考リンク
https://zenn.dev/noraworld/articles/disable-pulseaudio-autospawn
リモート接続 https://wiki.archlinux.jp/index.php/PulseAudio/%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB
server側 https://gist.github.com/yaasita/749060cb303f5f65a56e714d68bd95bf#file-default-pa load-module module-native-protocol-tcp auth-anonymous=1 を追加 client側 https://gist.github.com/yaasita/749060cb303f5f65a56e714d68bd95bf#file-client-conf default-server = 192.168.0.10 を指定する サーバー本体とclientが同一サーバーの場合は変更の必要なし 上記設定したら server側はpulseaudio &amp;ndash;start
client側は特に起動する必要なし(pulseaudioデーモンすら不要)
あとはclient側で paplay hoge.wav でテスト</description>
    </item>
    
    <item>
      <title>vim-lsp設定</title>
      <link>https://yaasita.github.io/2024/09/21/vim-lsp/</link>
      <pubDate>Sat, 21 Sep 2024 23:43:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/09/21/vim-lsp/</guid>
      <description>よく使うやつ
perl cpan i PLS
if executable(&#39;pls&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;perl&#39;, \ &#39;cmd&#39;: [&#39;pls&#39;], \ &#39;allowlist&#39;: [&#39;perl&#39;], \ }) endif bash npm i -g bash-language-server
if executable(&#39;bash-language-server&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;bash-language-server&#39;, \ &#39;cmd&#39;: [&#39;bash-language-server&#39;, &#39;start&#39;], \ &#39;allowlist&#39;: [&#39;sh&#39;, &#39;bash&#39;], \ }) endif vim npm i -g vim-language-server
if executable(&#39;vim-language-server&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;vm-ls&#39;, \ &#39;cmd&#39;: [&#39;vim-language-server&#39;, &#39;--stdio&#39;], \ &#39;allowlist&#39;: [&#39;vim&#39;], \ }) endif terraform https://www.</description>
    </item>
    
    <item>
      <title>muttでHTMLメールを扱う</title>
      <link>https://yaasita.github.io/2024/08/22/mutt/</link>
      <pubDate>Thu, 22 Aug 2024 02:50:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/08/22/mutt/</guid>
      <description>Your browser does not support the video tag. ~/.muttrc に以下追記
# html mailを読むための設定 set mailcap_path=~/.mutt/mailcap auto_view text/html alternative_order text/plain text/html # HTMLメールを開く vで添付画面へ行ってそこでctrl-sを押すとHTMLを保存 macro attach \cs &amp;quot;&amp;lt;pipe-entry&amp;gt;cat &amp;gt; /tmp/mutt-mail.html&amp;quot; # HTML内のリンクを表示 macro index \cv |urlview macro pager \cv |urlview ~/.mutt/mailcap
text/html; w3m -I %{charset} -T text/html; copiousoutput; 参考リンク https://wiki.archlinux.jp/index.php/Mutt</description>
    </item>
    
    <item>
      <title>thunderbirdでHTMLメールを作る</title>
      <link>https://yaasita.github.io/2024/08/21/html-mail/</link>
      <pubDate>Wed, 21 Aug 2024 03:04:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/08/21/html-mail/</guid>
      <description>設定箇所は2ヶ所
ツール -&amp;gt; 設定
アカウント設定の方にもある</description>
    </item>
    
    <item>
      <title>opendkimメモ</title>
      <link>https://yaasita.github.io/2024/07/06/dkim/</link>
      <pubDate>Sat, 06 Jul 2024 03:52:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/07/06/dkim/</guid>
      <description>DKIMの公開鍵取得 opendkim-testkeyとかで検証する際に、DNSはroot DNSサーバーから自力で名前解決しようとするのでDNSキャッシュサーバー使いたかったら以下を指定
/etc/opendkim.conf
Nameservers 192.168.0.10 thunderbirdの拡張も同じ挙動だった
公開鍵を作る場合 2048bitを指定しておく方がいい
(最近のopendkimはデフォルトで2048bit)
opendkim-genkey -D /etc/postfix/dkim/ -b 2048 -d example.jp -s mail unboundに入れるときは長いので分割する
local-data: &#39;mail._domainkey.example.jp. IN TXT &amp;quot;v=DKIM1; k=rsa; &amp;quot; &amp;quot;p=xxxxxxxx...&amp;quot; &amp;quot;xxxxxxx...&amp;quot;&#39; ローカルでの検証 opendkim-testmsg &amp;lt; mail.eml </description>
    </item>
    
    <item>
      <title>shotcutで編集すると音ズレ</title>
      <link>https://yaasita.github.io/2024/04/21/shotcut/</link>
      <pubDate>Sun, 21 Apr 2024 04:22:59 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/04/21/shotcut/</guid>
      <description>編集前にこれやっておくと良いかもしれない
ffmpeg -i input.mp4 output.mp4 </description>
    </item>
    
    <item>
      <title>codeiumがとても良い</title>
      <link>https://yaasita.github.io/2023/11/21/codeium/</link>
      <pubDate>Tue, 21 Nov 2023 02:41:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/11/21/codeium/</guid>
      <description>codeium がとても良い
個人利用なら無料 vimにも対応 対応言語が豊富 など
競合との比較はこちら
https://codeium.com/compare
とりあえず自分がVimに入れてる設定
if v:version &amp;gt;= 900 let g:codeium_disable_bindings = 1 let g:codeium_manual = v:true let g:codeium_enabled = v:false imap &amp;lt;script&amp;gt;&amp;lt;silent&amp;gt;&amp;lt;nowait&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Right&amp;gt; codeium#Accept() imap &amp;lt;Down&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(1)&amp;lt;CR&amp;gt; imap &amp;lt;Up&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(-1)&amp;lt;CR&amp;gt; imap &amp;lt;Left&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Clear()&amp;lt;CR&amp;gt; imap &amp;lt;C-A&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Complete()&amp;lt;CR&amp;gt; set statusline=%&amp;lt;%f\ %2*%{&amp;amp;mod&amp;amp;&amp;amp;&amp;amp;bt!=#&#39;terminal&#39;?&#39;[+]&#39;:&#39;&#39;}%0*%{&amp;amp;ro?&#39;[RO]&#39;:&#39;&#39;}%h%w%=codeium:%3{codeium#GetStatusString()}\ %{&#39;[&#39;.(&amp;amp;fenc!=&#39;&#39;?&amp;amp;fenc:&amp;amp;enc).&#39;][&#39;.&amp;amp;ff.&#39;]&#39;}\ %2*%y%0*%6l,%c%V%1*%8P endif 手動で有効にする設定を入れて
Ctrl-Aで保管候補出す
矢印で保管候補の決定</description>
    </item>
    
    <item>
      <title>npmのmysql2パッケージでTLS有効にしてRDS接続</title>
      <link>https://yaasita.github.io/2023/10/19/node-mysql2/</link>
      <pubDate>Thu, 19 Oct 2023 01:16:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/10/19/node-mysql2/</guid>
      <description>nodeのmysql2パッケージには
こんな感じで、ssl接続のオプションに&amp;quot;Amazon RDS&amp;quot;を指定できるが
RDSの証明書更新を行うと不都合があるよという話
証明書更新は以下のrds-ca-2019を置き換える話ね
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html
これ、パッケージ内にCA証明書が入ってるんだけど更新後の証明書が入ってない
そんで、CA証明書更新のPRは出てるんだけど、これ適用するとaurora serverlessとかRDS proxy経由の検証が失敗する
なぜなら、証明書のチェーンがこんな感じになってるので
C = US, O = &amp;#34;Starfield Technologies, Inc.&amp;#34;, OU = Starfield Class 2 Certification Authority C = US, ST = Arizona, L = Scottsdale, O = &amp;#34;Starfield Technologies, Inc.&amp;#34;, CN = Starfield Services Root Certificate Authority - G2 C = US, O = Amazon, CN = Amazon Root CA 1 C = US, O = Amazon, CN = Amazon RSA 2048 M02 CN = *.</description>
    </item>
    
    <item>
      <title>apacheのautoindex経由で画像のスライドショー</title>
      <link>https://yaasita.github.io/2022/09/15/slideshow/</link>
      <pubDate>Thu, 15 Sep 2022 03:58:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/09/15/slideshow/</guid>
      <description>apacheのmod_autoindexが有効な状態でスライドショーを作る
こんな状態のディレクトリに
こんな感じのHTMLを置いて
スライドショー的に見る</description>
    </item>
    
    <item>
      <title>mitmproxyを使うときのブラウザ設定</title>
      <link>https://yaasita.github.io/2022/08/24/mitmproxy-chrome/</link>
      <pubDate>Wed, 24 Aug 2022 02:39:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/08/24/mitmproxy-chrome/</guid>
      <description>なんかたまにgoogleにつながらなくなるとき
chrome系のやつならこの辺を弄ってみるとうまくいくかもしれない
chrome://settings/security</description>
    </item>
    
    <item>
      <title>hugoのshortcode</title>
      <link>https://yaasita.github.io/2022/07/25/hugo-shortcode/</link>
      <pubDate>Mon, 25 Jul 2022 00:52:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/07/25/hugo-shortcode/</guid>
      <description>ここにあるように定型文を登録しておくと省力化できる
https://gohugo.io/content-management/shortcodes/
例えば、config.tomlにこんな感じで書いておけば
[params] imagesite = &amp;quot;img.yaasita.net&amp;quot; markdownの中で
https://{{&amp;lt; param imagesite &amp;gt;}}/hoge/hoge こう書くと
https://img.yaasita.net/hoge/hoge みたいに展開される</description>
    </item>
    
    <item>
      <title>budibaseをmicrok8sで動かす</title>
      <link>https://yaasita.github.io/2022/06/08/budibase/</link>
      <pubDate>Wed, 08 Jun 2022 02:37:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/06/08/budibase/</guid>
      <description>budibaseをローカルのmicrok8sで動かしたときのメモ
# 必要なプラグインをON microk8s.enable dns:192.168.0.10 microk8s.enable ingress microk8s.enable metallb # 192.168.0.150-192.168.0.180 みたいに指定 microk8s.enable storage # kubectlで動かせるように microk8s.config &amp;gt; ~/.kube/config # インストール helm show values budibase/budibase &amp;gt; config.yaml # hostを指定 vim config.yaml helm install --create-namespace --namespace budibase budibase budibase/budibase -f config.yaml あとはingress部分を作る
# 証明書を作って kubectl create secret tls &#39;cloud.yaasita.net&#39; --key=privkey.pem --cert=fullchain.pem ingressをこんな感じで作っておく</description>
    </item>
    
    <item>
      <title>systemd-nspawnのtmpディレクトリ</title>
      <link>https://yaasita.github.io/2021/12/12/systemd-nspawn-tmpdir/</link>
      <pubDate>Sun, 12 Dec 2021 06:03:17 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/12/12/systemd-nspawn-tmpdir/</guid>
      <description>systemd-nspawnで/tmpのtmpfs mountを止める方法について昔こんな記事書いた
systemd-nspawnでのtmpディレクトリの扱いについて
今は状況が変わってて、
https://github.com/systemd/systemd/pull/10294/files
こんな感じで、&amp;ldquo;SYSTEMD_NSPAWN_TMPFS_TMP&amp;rdquo; って環境変数に0を入れておけば、/tmpディレクトリをtmpfsにしない
/etc/systemd/system/systemd-nspawn@.service
にこんな感じで追加したらmachinectlからもできる
Environment=SYSTEMD_NSPAWN_TMPFS_TMP=0 </description>
    </item>
    
    <item>
      <title>microk8sでargocdを動かす</title>
      <link>https://yaasita.github.io/2021/11/28/microk8s/</link>
      <pubDate>Sun, 28 Nov 2021 06:09:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/11/28/microk8s/</guid>
      <description>microk8s で ArgoCD を動かすときのメモ
まず手順通りにマニフェストを設定したら
kubectl patch svc argocd-server -n argocd -p &#39;{&amp;quot;spec&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;NodePort&amp;quot;}}&#39; ClusterIP から NodePortに変更
こんな感じの表示になったら
$ kubectl get svc argocd-server -n argocd argocd-server NodePort 10.152.183.43 &amp;lt;none&amp;gt; 80:30444/TCP,443:30983/TCP 20h 以下のURLでアクセス
https:// (ホストのIP) :30983
まあkubectl port-forward でやってもいいけど
ついでに dashbord も同様にできる
kubectl patch svc kubernetes-dashboard -n kube-system -p &#39;{&amp;quot;spec&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;NodePort&amp;quot;}}&#39; kubectl get svc kubernetes-dashboard -n kube-system $ kubectl get svc kubernetes-dashboard -n kube-system NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes-dashboard NodePort 10.</description>
    </item>
    
    <item>
      <title>dircolorsの設定</title>
      <link>https://yaasita.github.io/2021/09/20/dircolors/</link>
      <pubDate>Mon, 20 Sep 2021 17:40:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/09/20/dircolors/</guid>
      <description>dircolorsは
ls --color=auto したときの色を設定するコマンド
以下のコマンドで設定を書き出して
dircolors -p &amp;gt; ~/.dir_colors 好きな設定に編集する
vi ~/.dircolors .bashrcに以下のように書いておいた
if [[ &amp;quot;$TERM&amp;quot; =~ ^xterm ]] || [[ &amp;quot;$TERM&amp;quot; =~ ^screen ]];then alias egrep=&#39;egrep --color=auto&#39; alias grep=&#39;grep --color=auto&#39; alias ls=&#39;ls --color=auto&#39; eval &amp;quot;$(dircolors -b ~/.dircolors)&amp;quot; fi 参考
lsコマンドで表示されるファイルの色を変更するには </description>
    </item>
    
    <item>
      <title>skypeログをエクスポート出来るようになってた</title>
      <link>https://yaasita.github.io/2021/04/04/skype-log-2021/</link>
      <pubDate>Sun, 04 Apr 2021 05:08:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/04/04/skype-log-2021/</guid>
      <description>これは便利
こちらの手順に従えば、アップロードファイルと、メッセージのjsonが手に入る
https://support.skype.com/ja/faq/FA34894/skype-huairutochiyatsutolu-li-woekusupotosurufang-fa
よく見ると、結構昔の奴も入ってるので昔からサーバー側でログを取ってたみたいね</description>
    </item>
    
    <item>
      <title>mpdとncmpc</title>
      <link>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</link>
      <pubDate>Sat, 20 Mar 2021 14:39:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</guid>
      <description>mpd と ncmpc の設定メモ
インストール apt install mpd ncmpc セットアップ /etc/mpd.confの設定
http経由で聞くのでoutputはhttpにします
~/.config/ncmpc/config
タグで管理してないのでファイル名だけ表示します
host = &amp;quot;127.0.0.1&amp;quot; port = 6600 list-format = &amp;quot;%file%&amp;quot; status-format = &amp;quot;%file%&amp;quot; text-editor = vim /var/lib/mpd/music/ に音楽ファイルを入れる(symlinkでも可)
ncmpcで起動 Ctrl-UでDBのアップデート
歌詞表示 歌詞表示するなら ncmpcpp の方が楽ですが、最初からvimキーバインドなncmpcが好きなのでこちらを使っています
方法は以下の記事通り歌詞検索用のスクリプトを配置するだけ
https://www.use-strict.de/using-ncmpc-to-fetch-and-read-lyrics.html
debianのパッケージは以下のオプションでビルドされてるので
-Dlyrics_plugin_dir=&amp;quot;/usr/lib/ncmpc/lyrics/&amp;quot; /usr/lib/ncmpc/lyrics/01-test.sh
みたいなファイルをおきます
これが歌詞検索の際に実行されます
こんなファイルを置いて
#!/bin/bash echo &amp;quot;$@&amp;quot; echo &amp;quot;あいうおえ&amp;quot; artist, titleを設定
eyeD3 -a backnumber hoge.mp3 eyeD3 -t 高嶺の花子さん takane.mp3 すると第一引数にartist, 第二引数にtitleが入ります
この画面で、Sを押すと歌詞を~/.cache/ncmpc/lyrics/保存できたりもします
ファイル名が引数に入らないので、直接ファイルを探せないですが、ファイル名を工夫すれば、mp3ファイルタグ内の歌詞情報を引っ張ることも可能だと思います</description>
    </item>
    
    <item>
      <title>apacheのmod-auth-openidcについて</title>
      <link>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</link>
      <pubDate>Fri, 01 Jan 2021 22:37:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</guid>
      <description>BASIC認証かけるみたいに簡単にGoogle認証を追加できた
公式サイト
https://www.mod-auth-openidc.org/
インストール
apt install libapache2-mod-auth-openidc 設定 /etc/apache2/mods-enabled/auth_openidc.conf
OIDCRedirectURI https://hoge.example.jp/oidc/redirect_uri OIDCCryptoPassphrase hogehoge-foobar OIDCProviderMetadataURL https://accounts.google.com/.well-known/openid-configuration OIDCScope &amp;quot;openid email&amp;quot; OIDCClientID xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com OIDCClientSecret XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX リバースプロキシ的に使う例
/adminかつ、プライベートIP以外の場合はGoogle認証で hogehoge@gmail.com のみ許可
&amp;lt;VirtualHost *:443&amp;gt; ServerName hoge.example.jp &amp;lt;Location /&amp;gt; Require all granted &amp;lt;/Location&amp;gt; &amp;lt;Location /oidc/&amp;gt; AuthType openid-connect Require valid-user &amp;lt;/Location&amp;gt; &amp;lt;Location /admin&amp;gt; AuthType openid-connect Require claim email:hogehoge@gmail.com Require ip 192.168.0.0/24 &amp;lt;/Location&amp;gt; ProxyRequests Off ProxyPreserveHost On ProxyPass / http://127.0.0.1:8080/ keepalive=On RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot; RequestHeader unset X-Forwarded-For RequestHeader unset X-Forwarded-Server RequestHeader unset X-Forwarded-Host # SSL設定等が続く .</description>
    </item>
    
    <item>
      <title>postfixのReceived headerを隠す</title>
      <link>https://yaasita.github.io/2020/12/06/postfix-received-header/</link>
      <pubDate>Sun, 06 Dec 2020 01:11:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/12/06/postfix-received-header/</guid>
      <description>この回答通りなんだけど
一応補足とか
自分の環境だと、送信メールサーバーがセカンダリメールサーバーと兼任している
以下のように設定した
/etc/postfix/master.cf
smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no -o smtpd_client_restrictions=$mua_client_restrictions -o smtpd_helo_restrictions=$mua_helo_restrictions -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=smtpscleanup smtpscleanup unix n - y - 0 cleanup -o header_checks=regexp:/etc/postfix/header_checks /etc/postfix/header_checks
/^Received:.*/ IGNORE 最初はsmtp_header_checksをmain.cfに書けば良いかなーと思ったんだけど、
これだと外から入ってきたメール(後にプライマリサーバーにrelayされる)も一律削除されてしまうので都合が悪かった</description>
    </item>
    
  </channel>
</rss>
