<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/categories/soft/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 29 Sep 2018 04:25:33 +0900</lastBuildDate>
    <atom:link href="/categories/soft/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>全文検索n-gram</title>
      <link>https://yaasita.github.io/2018/09/29/n-gram/</link>
      <pubDate>Sat, 29 Sep 2018 04:25:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/29/n-gram/</guid>
      <description>N-gramについて
検索とインデックスについて作った
検討資料用にどうぞ
https://gist.github.com/yaasita/ea31d7bbfc839fc859fd7d713800088b</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書のchain検証</title>
      <link>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</link>
      <pubDate>Sun, 23 Sep 2018 01:02:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</guid>
      <description>以下のようなチェインを検証したい時
AddTrust |_ ca1 |_ ca2 |_ hoge  こんな感じにコマンドを打つ
openssl verify -trusted /etc/ssl/certs/AddTrust_External_Root.pem \ -untrusted ca/ca1.pem \ -untrusted ca/ca2.pem \ hoge.pem*  verify -CAfileを指定して検証する例を見るけど、
インストールされてるデフォルトのrootCAも見ちゃうから
-no-CAfile, -no-CApathで無効化しなきゃだったりするのでこっちの方が良さそう</description>
    </item>
    
    <item>
      <title>Hugoをアップデート</title>
      <link>https://yaasita.github.io/2018/09/16/hugo-new-version/</link>
      <pubDate>Sun, 16 Sep 2018 15:48:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/16/hugo-new-version/</guid>
      <description>なんかこんなプルリクも来てたのでthemeもちょいと修正
たまにはhugoのbuild logみてwarning潰してかないとだな</description>
    </item>
    
    <item>
      <title>ubuntu18.04でDKIM設定</title>
      <link>https://yaasita.github.io/2018/08/18/dkim/</link>
      <pubDate>Sat, 18 Aug 2018 17:40:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/18/dkim/</guid>
      <description>インストール apt install opendkim opendkim-tools  opendkim設定 mkdir /etc/postfix/dkim/ opendkim-genkey -D /etc/postfix/dkim/ -d example.com -s mail # -d ドメイン # -s セレクタ chgrp opendkim /etc/postfix/dkim/* chmod g+r /etc/postfix/dkim/*  /etc/opendkim.conf
Syslog yes LogWhy Yes UMask 007 Canonicalization relaxed/relaxed Mode sv Socket inet:8891@localhost PidFile /var/run/opendkim/opendkim.pid OversignHeaders From TrustAnchorFile /usr/share/dns/root.key UserID opendkim KeyTable file:/etc/postfix/dkim/keytable SigningTable file:/etc/postfix/dkim/signingtable  /etc/postfix/dkim/keytable
mail._domainkey.example.net example.net:mail:/etc/postfix/dkim/mail.private  /etc/postfix/dkim/signingtable
example.net mail._domainkey.example.net  反映
systemctl restart opendkim.service  postfix設定 以下追記</description>
    </item>
    
    <item>
      <title>クライアント証明書&#43;HTTP2</title>
      <link>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</link>
      <pubDate>Sun, 29 Jul 2018 16:36:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</guid>
      <description>SSLRequire は 非推奨みたいなので
クライアント証明書とIP制限を今風に書き直す
あとCNとかも検証するようにした
こんな感じ
&amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI SSLVerifyClient optional &amp;lt;RequireAny&amp;gt; Require ip 192.168.100.0/24 &amp;lt;RequireAll&amp;gt; Require ssl-verify-client Require expr &amp;quot;%{SSL_CLIENT_S_DN_CN} == &#39;hogeclient&#39;&amp;quot; &amp;lt;/RequireAll&amp;gt; &amp;lt;/RequireAny&amp;gt; &amp;lt;/Directory&amp;gt;  あと
Protocols http/1.1 h2  のようにhttp/1.1を先にしないと
curl: (92) HTTP/2 stream 1 was not closed cleanly: HTTP_1_1_REQUIRED (err 13)  こんなエラーになるので注意
参考リンク
 reqexprの説明
 mod_ssl変数一覧
  </description>
    </item>
    
    <item>
      <title>PerlでElasticsearch</title>
      <link>https://yaasita.github.io/2018/07/04/es-perl/</link>
      <pubDate>Wed, 04 Jul 2018 03:06:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/04/es-perl/</guid>
      <description>perlでElasticsearch
mojoliciousでの例
 </description>
    </item>
    
    <item>
      <title>クライアント証明書とIP制限</title>
      <link>https://yaasita.github.io/2018/05/26/client-auth/</link>
      <pubDate>Sat, 26 May 2018 03:49:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/05/26/client-auth/</guid>
      <description>外からはクライアント証明書を要求して、中からは素通しさせたいケース
Apache2.4ならこんな感じ
SSLCACertificateFile /etc/apache2/ssl/example.crt &amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI Require ip 192.168.100.0/24 SSLVerifyClient require Satisfy any &amp;lt;/Directory&amp;gt;  curlで確認
curl https://example.net --key client.key --cert cert.crt --http1.1  作るときは /usr/lib/ssl/misc/CA.pl -newreq とかで適当に作る
鍵とセットなら良いのでcommon nameとかは適当
参考リンク プライベートCA作るまで</description>
    </item>
    
    <item>
      <title>vimのterminalモード</title>
      <link>https://yaasita.github.io/2018/05/19/vim-terminal/</link>
      <pubDate>Sat, 19 May 2018 05:16:04 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/05/19/vim-terminal/</guid>
      <description>メモ
 tmuxパカパカ開くよりは良い気がする
 以下のマッピング追加してペーストできるようにした
if has(&#39;terminal&#39;) tnoremap &amp;lt;C-T&amp;gt; &amp;lt;C-W&amp;gt;&amp;quot;&amp;quot; tnoremap &amp;lt;C-Q&amp;gt; &amp;lt;C-W&amp;gt;N endif  ubuntu18.04でもちょい古くてなんか挙動が少し違うから手動で入れた方が良い
 ビルド
apt-get build-dep vim apt-get install libperl-dev python-dev python3-dev ruby-dev git clone --depth 1 git@github.com:vim/vim.git cd vim make make install   参考リンク
【(Neo)Vim】terminal mode のマッピングについての闇とその解決法
結論：すごく便利だと思います</description>
    </item>
    
    <item>
      <title>Apacheでリバースプロキシ</title>
      <link>https://yaasita.github.io/2018/02/04/apache-header/</link>
      <pubDate>Sun, 04 Feb 2018 16:27:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/02/04/apache-header/</guid>
      <description>Apacheでリバースプロキシするときこんな感じに書いた方が良いよという話
&amp;lt;VirtualHost *:443&amp;gt; ServerName example.net &amp;lt;Proxy *&amp;gt; Require all granted &amp;lt;/Proxy&amp;gt; ProxyRequests Off ProxyPreserveHost On ProxyPass / http://192.168.0.1:8080/ keepalive=On ProxyPassReverse / http://192.168.0.1:8080/ RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot; RequestHeader unset X-Forwarded-For RequestHeader unset X-Forwarded-Server RequestHeader unset X-Forwarded-Host Include /path/to/common.conf &amp;lt;/VirtualHost&amp;gt;  X-Forwarded-Forとかを一旦unsetしないと、
X-Forwarded-Forとかをクライアント側から指定されると、追加されて判別が困難になる
curl -H &amp;quot;X-Forwarded-For: 1.2.3.4&amp;quot;  みたいな感じで指定されると
 x-forwarded-for: &amp;quot;1.2.3.4, 192.168.0.100&amp;quot;  こんな感じに追加されて http://192.168.0.1:8080 側にわたってしまう</description>
    </item>
    
    <item>
      <title>プライベートCA作るまで</title>
      <link>https://yaasita.github.io/2018/01/31/private-ca/</link>
      <pubDate>Wed, 31 Jan 2018 18:04:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/31/private-ca/</guid>
      <description>Debian9でやってみた
cd /etc/ssl /usr/lib/ssl/misc/CA.pl -newca /usr/lib/ssl/misc/CA.pl -newreq /usr/lib/ssl/misc/CA.pl -sign # /tmp/ca.pemを入れてもらう openssl x509 -outform PEM -in demoCA/cacert.pem -out /tmp/ca.pem # 変換 openssl x509 -outform PEM -in newcert.pem -out /etc/nginx/ssl/hogehoge.crt # パスフレーズ解除 openssl rsa -in newkey.pem -out /etc/nginx/ssl/hogehoge.key  データベースおかしくなったら
index.txt空っぽすればOK
rm demoCA/index.txt touch demoCA/index.txt  /etc/ssl/openssl.cnf は こんな感じ
証明書の管理は
chromeなら設定 =&amp;gt; 詳細設定 =&amp;gt; SSLの管理からやる
windowsの場合はファイル名を指定して実行 =&amp;gt; certlm.msc と同じこと
あと注意点として、chromeはsubjectAltNameを見るので注意
(EnableCommonNameFallbackForLocalAnchorsってやつを設定するとできるようだけど)</description>
    </item>
    
    <item>
      <title>GoogleHomeでPCつける</title>
      <link>https://yaasita.github.io/2018/01/14/google-home/</link>
      <pubDate>Sun, 14 Jan 2018 03:41:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/14/google-home/</guid>
      <description>Mojoliciousで受けてコマンド叩くだけ
IFTTTはこんな感じにして


Mojolicious側のコントローラはこんな感じで受けた

喋りたくない時もあるので、JavaScriptでも叩けるようにした(適当な場所にHTML置いておいた)
function hogeop(){ postjson({key: &#39;huga&#39;}) } function postjson(j) { fetch(&amp;quot;/google&amp;quot;, { method: &amp;quot;POST&amp;quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(j) }).then(res =&amp;gt; res.json()).then(res =&amp;gt; { console.log(res) }); }  結論: こうやって家電を操作できるのは楽しい
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>systemd-nspawnアドベントカレンダー</title>
      <link>https://yaasita.github.io/2017/12/19/systemd-nspawn-adcal/</link>
      <pubDate>Tue, 19 Dec 2017 04:34:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/19/systemd-nspawn-adcal/</guid>
      <description>書きました
https://qiita.com/advent-calendar/2017/systemd-nspawn</description>
    </item>
    
    <item>
      <title>gpgでサブキーを指定して暗号化</title>
      <link>https://yaasita.github.io/2017/12/04/gpg-specify-subkey/</link>
      <pubDate>Mon, 04 Dec 2017 23:27:01 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/04/gpg-specify-subkey/</guid>
      <description>gpgで副鍵(subkey)を新しく作ったとする(addkey)
でいざ使うと思ったら、やむ負えない事情により古い副鍵で暗号化しなきゃいけなくなったとする
こんな感じの状態ね
pub rsa2048 2017-04-09 [SC] XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX uid [ultimate] yamasita &amp;lt;yamasita@example.net&amp;gt; sub rsa2048 2017-04-09 [E] sub elg2048 2017-12-04 [E]  んで、普通にgpg -e で暗号化すると新しい elg2048 の方が使われてしまう
rsa2048を使いたくなったらこんな感じでrsa2048の方のIDを指定して暗号化する
gpg --recipient BBBBBBBBBBB12345! -v -e memo  IDは&amp;ndash;edit-keysとかやれば見れるお
あと、注意点として副鍵は追加しても古い鍵はしばらく残しておくこと
送信側がすぐ、新しい鍵を入れてくれるとも限らないし古い鍵で暗号化されたものを復号化できなくなる
主鍵は、副鍵を署名するだけのものであって、副鍵の秘密鍵は取っておかなきゃいけないのです</description>
    </item>
    
    <item>
      <title>TeratermからConEmuへ移行した</title>
      <link>https://yaasita.github.io/2017/12/02/teraterm-to-conemu/</link>
      <pubDate>Sat, 02 Dec 2017 04:36:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/02/teraterm-to-conemu/</guid>
      <description>長年使ってたTeratermからConEmuへ移行した
SSHクライアントはputtyを使ってる
WSL経由でも良かったんだけど、なんかVimのvisualモードで背景色が変わらなかったり表示が微妙だったので結局putty使った
良かった点  絵文字も表示できる
 タブが便利(TeratermもCollectorで出来るけどこっちの方が使いやすい)
 F1キーをリモート側に送るとかそういう設定がしやすい
  微妙な点  Alt-Vでペーストしてたけどこれが使えない(設定方法が分からない)
  まとめ ConEmu入れた後putty設定したり、微妙に面倒だけど使いやすい</description>
    </item>
    
    <item>
      <title>Teratermでreject clipbordのエラー</title>
      <link>https://yaasita.github.io/2017/11/16/teraterm-copy/</link>
      <pubDate>Thu, 16 Nov 2017 06:33:07 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/16/teraterm-copy/</guid>
      <description> teraterm + Tmuxでコピーをすると
Reject clipboard write access from remoteのエラーが出る
これはOSC52っていう制御文字を使ってリモートからOSのクリップボードを書き込むことができる機能がブロックされてるよって事
直すには Setup -&amp;gt; Addtional settings -&amp;gt; Control Sequenceタブ
と進んで該当箇所を設定すればOK
その下にNotifyの設定もある

参考リンク  リモートの tmux でコピーした内容のローカルのクリップボードへの反映
   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>s3fsとIPアドレス制限だけのpublic bucket</title>
      <link>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</link>
      <pubDate>Tue, 07 Nov 2017 01:36:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</guid>
      <description>s3fsを使ってこんな感じのバケットポリシーのs3をマウントするときのやつ
(hogehogeバケットとその中身を特定IPアドレスの人に開放する)
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Id&amp;quot;: &amp;quot;Policy1509977001523&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } }, { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge/*&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } } ] }  んでs3fsはこんな感じ
s3fs -o public_bucket=1,rw,allow_other,umask=0022,endpoint=ap-northeast-1,default_acl=public-read hogehoge /mnt  public_bucketがポイント</description>
    </item>
    
    <item>
      <title>S/MIMEの設定</title>
      <link>https://yaasita.github.io/2017/08/12/smime/</link>
      <pubDate>Sat, 12 Aug 2017 17:25:39 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/12/smime/</guid>
      <description>StartSSL CSR作る
emailaddressにS/MIME設定したいアドレスを入れる
openssl req -newkey rsa:2048 -keyout yourname.key -out yourname.csr  証明書が送られてくるのでこんな感じでまとめて
-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----  pkcs12に変換してthunderbirdにインポートする
openssl pkcs12 -export -in sakusei.pem -out email.pfx  なんか送られてきた中間証明書がCRLFとLFが混在してるので直した
チェーンはこんな感じになってた
StartCom Certification Authority |_ StartCom Certification Authority ECC |_ StartCom CC2 ICA |_ 自分のメールアドレス  そういやCAAレコードを検証しなかったけどいいのかね？
でここまでやって気づいたんだけどStartComの証明書が失効扱いで全然検証通らなかった
これはGmailも同じなのでStartCom使うのは中止
COMODO 今度COMODOを使うことになったんだけど既にChromeだとKEYGEN要素が使えないらしくFirefoxでアクセスするしかない
(コードもselect[_moz-type=&amp;ldquo;-mozilla-keygen&amp;rdquo;]になってるし)
こっちはフォームから申請して、リンククリックすればすぐに証明書がFirefoxに入るのでそれをエクスポートしてthunderbirdに入れればOK
チェーンはこんな感じ
COMODO RSA Certification Authority |_COMODO RSA Client Authentication and Secure Email CA |_ 自分のメールアドレス  まとめ Let&amp;rsquo;s EncryptがS/MIME対応してほしい</description>
    </item>
    
    <item>
      <title>apacheのログフォーマット</title>
      <link>https://yaasita.github.io/2017/07/22/apache-log/</link>
      <pubDate>Sat, 22 Jul 2017 17:53:24 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/22/apache-log/</guid>
      <description>apacheのログフォーマットはJSONにしておいた方がパースが楽という話
こんな感じにする
LogFormat &amp;quot;\ { \ \&amp;quot;host\&amp;quot;:\&amp;quot;%V\&amp;quot;, \ \&amp;quot;method\&amp;quot;:\&amp;quot;%m\&amp;quot;, \ \&amp;quot;port\&amp;quot;:\&amp;quot;%p\&amp;quot;, \ \&amp;quot;processingTime\&amp;quot;:\&amp;quot;%D\&amp;quot;, \ \&amp;quot;protocol\&amp;quot;:\&amp;quot;%H\&amp;quot;, \ \&amp;quot;query\&amp;quot;:\&amp;quot;%q\&amp;quot;, \ \&amp;quot;referer\&amp;quot;:\&amp;quot;%{Referer}i\&amp;quot;, \ \&amp;quot;remoteIP\&amp;quot;:\&amp;quot;%a\&amp;quot;, \ \&amp;quot;request\&amp;quot;:\&amp;quot;%U\&amp;quot;, \ \&amp;quot;responseByte\&amp;quot;:\&amp;quot;%B\&amp;quot;, \ \&amp;quot;status\&amp;quot;:\&amp;quot;%&amp;gt;s\&amp;quot;, \ \&amp;quot;time\&amp;quot;:\&amp;quot;%t\&amp;quot;, \ \&amp;quot;unixtime\&amp;quot;:\&amp;quot;%{%s}t\&amp;quot;, \ \&amp;quot;userAgent\&amp;quot;:\&amp;quot;%{User-agent}i\&amp;quot;, \ \&amp;quot;user\&amp;quot;:\&amp;quot;%u\&amp;quot; \ }&amp;quot; \ leapache  吐き出し
CustomLog ${APACHE_LOG_DIR}/access-json.log leapache  https://blog.logentries.com/2014/08/json-logging-in-apache-and-nginx-with-logentries/</description>
    </item>
    
    <item>
      <title>gpg鍵を変えた</title>
      <link>https://yaasita.github.io/2017/04/09/update-gpg-key/</link>
      <pubDate>Sun, 09 Apr 2017 23:28:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/04/09/update-gpg-key/</guid>
      <description>https://keybase.io/yaasita
有効期限を付けて1年毎に交換するのは止めよう
keybase.ioの更新がめんどくさすぎる
失効証明書だけ取っておいてどっか保存しておけば十分な気がしてきた
ちなみに一回鍵消してもう一回連携やりなおしたら、Invitations が 24 まで増えたんだけどこれ無限増殖できるのでは・・・</description>
    </item>
    
  </channel>
</rss>
