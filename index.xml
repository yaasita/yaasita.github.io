<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 11 Nov 2018 01:33:21 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>徳丸さんのセキュリティ問題(CSRF)</title>
      <link>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</link>
      <pubDate>Sun, 11 Nov 2018 01:33:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/11/tokumaru-csrf/</guid>
      <description>徳丸さんがCSRFの問題を出していたので考えてみる
問題：間違ったCSRF対策～初級編～
解答
https://github.com/yaasita/tokumaru-csrf-20181110
なんか最初はXMLHttpRequestとか駆使して、chgmailform.phpからtoken引っこ抜こうと思ったんだけど
CORSとかCORBで無理なんすよね
でよく見るとtokenが無いときの考慮がないよってやつでした
まとめ 最近のブラウザは良く出来てる</description>
    </item>
    
    <item>
      <title>mitmproxyが便利</title>
      <link>https://yaasita.github.io/2018/11/10/mitmproxy/</link>
      <pubDate>Sat, 10 Nov 2018 03:22:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/11/10/mitmproxy/</guid>
      <description>とっても便利なmitmproxyを使ってみた
概要 こんな感じでHTTPSなサイトも中間に入りこんでくれる
（root証明証を予め信頼しておく必要がある)
browser &amp;lt;---(指定のCA鍵で再署名)---- mitmproxy &amp;lt;---(HTTPSを一旦解く)----- web server  インストール apt install mitmproxy  設定 プライベートCAをやってるなら
 /etc/ssl/demoCA/private/cakey.pem
 /etc/ssl/demoCA/cacert.pem
  この２ファイルを結合する
こんな感じで mitmproxy-ca.pem って名前でどっかのディレクトリに置く
-----BEGIN ENCRYPTED PRIVATE KEY----- ... -----END ENCRYPTED PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----  実行 こんな感じで実行できる &amp;ndash;view-filter で表示させたいURLを絞れる
(hogedirの中にmitmproxy-ca.pemが入ってる)
mitmproxy --set confdir=/path/to/hogedir --view-filter m3u  画面中ではVimぽいキーバインドで色々操作できる
リクエストを選んで、wでストリームを保存できる
dump mitmproxyだけだと長いURLとかは省略されちゃったりするので、完全なものを見る場合にmitmdumpを使う
# getだけ抽出 mitmdump -nr /tmp/save -w outfile &amp;quot;~m get&amp;quot; # リクエスト一覧 mitmdump -nr /tmp/save  まとめ HTTPSのデバッグ時にめっちゃ便利</description>
    </item>
    
    <item>
      <title>CircleCIのキャッシュについて</title>
      <link>https://yaasita.github.io/2018/10/19/circleci/</link>
      <pubDate>Fri, 19 Oct 2018 03:03:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/10/19/circleci/</guid>
      <description>先に結論だけ
 キャッシュは一度書き込むとupdate出来ない
 キャッシュクリアは名前を変えて対応する
  以下具体例
以下のようなキャッシュをした際に
古いバージョンのライブラリが入ってしまった場合
- restore_cache: keys: - v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }} - v2-dependencies- - run: name: install dependencies command: | python3 -m venv venv . venv/bin/activate pip install -r requirements.txt - save_cache: paths: - ./venv key: v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }}  これを解消しようとして、以下のようにしてもcacheはupdateされない
- restore_cache: keys: - v2-dependencies-{{ checksum &amp;quot;requirements.txt&amp;quot; }} - v2-dependencies- - run: name: install dependencies command: | python3 -m venv venv .</description>
    </item>
    
    <item>
      <title>全文検索n-gram</title>
      <link>https://yaasita.github.io/2018/09/29/n-gram/</link>
      <pubDate>Sat, 29 Sep 2018 04:25:33 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/29/n-gram/</guid>
      <description>N-gramについて
検索とインデックスについて作った
検討資料用にどうぞ
https://gist.github.com/yaasita/ea31d7bbfc839fc859fd7d713800088b</description>
    </item>
    
    <item>
      <title>skypeの会話ログをjsonに</title>
      <link>https://yaasita.github.io/2018/09/25/skype-log/</link>
      <pubDate>Tue, 25 Sep 2018 00:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/25/skype-log/</guid>
      <description>skypeの会話履歴をJSONにしておくやつ作った
https://github.com/yaasita/skype2json
logはsqliteで保存されている
こちらによるとskype for windows 10とskype for windows desktopの保存場所が違う

こっちが最近のやつ
場所: %localappdata%\Packages\Microsoft.SkypeApp_kzf8qxf38zg5c\LocalState

昔のやつ
場所: C:\Users\username\AppData\Roaming\Skype\username\main.db
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;skype1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;skype1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;skype2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;skype2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>SSL証明書のchain検証</title>
      <link>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</link>
      <pubDate>Sun, 23 Sep 2018 01:02:54 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/23/verify-certificate-chain/</guid>
      <description>以下のようなチェインを検証したい時
AddTrust |_ ca1 |_ ca2 |_ hoge  こんな感じにコマンドを打つ
openssl verify -trusted /etc/ssl/certs/AddTrust_External_Root.pem \ -untrusted ca/ca1.pem \ -untrusted ca/ca2.pem \ hoge.pem*  verify -CAfileを指定して検証する例を見るけど、
インストールされてるデフォルトのrootCAも見ちゃうから
-no-CAfile, -no-CApathで無効化しなきゃだったりするのでこっちの方が良さそう</description>
    </item>
    
    <item>
      <title>Hugoをアップデート</title>
      <link>https://yaasita.github.io/2018/09/16/hugo-new-version/</link>
      <pubDate>Sun, 16 Sep 2018 15:48:27 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/16/hugo-new-version/</guid>
      <description>なんかこんなプルリクも来てたのでthemeもちょいと修正
たまにはhugoのbuild logみてwarning潰してかないとだな</description>
    </item>
    
    <item>
      <title>perlのクロージャ</title>
      <link>https://yaasita.github.io/2018/09/06/perl-closure/</link>
      <pubDate>Thu, 06 Sep 2018 02:43:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/09/06/perl-closure/</guid>
      <description>これでも良いけど
{ my $count; sub func { return ++$count; } }  最近ならこうstate使って
use feature qw(:5.10); sub func { state $count; return ++$count; }  ただstateって配列とかには使えない</description>
    </item>
    
    <item>
      <title>ubuntu18.04でDKIM設定</title>
      <link>https://yaasita.github.io/2018/08/18/dkim/</link>
      <pubDate>Sat, 18 Aug 2018 17:40:23 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/18/dkim/</guid>
      <description>インストール apt install opendkim opendkim-tools  opendkim設定 mkdir /etc/postfix/dkim/ opendkim-genkey -D /etc/postfix/dkim/ -d example.com -s mail # -d ドメイン # -s セレクタ chgrp opendkim /etc/postfix/dkim/* chmod g+r /etc/postfix/dkim/*  /etc/opendkim.conf
Syslog yes LogWhy Yes UMask 007 Canonicalization relaxed/relaxed Mode sv Socket inet:8891@localhost PidFile /var/run/opendkim/opendkim.pid OversignHeaders From TrustAnchorFile /usr/share/dns/root.key UserID opendkim KeyTable file:/etc/postfix/dkim/keytable SigningTable file:/etc/postfix/dkim/signingtable  /etc/postfix/dkim/keytable
mail._domainkey.example.net example.net:mail:/etc/postfix/dkim/mail.private  /etc/postfix/dkim/signingtable
example.net mail._domainkey.example.net  反映
systemctl restart opendkim.service  postfix設定 以下追記</description>
    </item>
    
    <item>
      <title>プライベートCAでダメなaltname</title>
      <link>https://yaasita.github.io/2018/08/05/private-ca-invalid/</link>
      <pubDate>Sun, 05 Aug 2018 00:57:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/05/private-ca-invalid/</guid>
      <description>openssl.cnf
subjectAltName=@alt_names [ alt_names ] DNS.1 = *.example.com IP.1 = 192.168.0.1  ここに書ける値についてのお話
IPでこういうのはダメ
 IP.1 = 192.168.0.*
 IP.2 = 192.168.0.0/24
  IPアドレス範囲もダメ
こういうのはOKなのでテスト用の証明書だったらこの辺だけ書いて渡すのが良いのかな
 IP.1 = 127.0.0.1
 DNS.1 = localhost
  </description>
    </item>
    
    <item>
      <title>AlwaysOnSSLがダメぽい</title>
      <link>https://yaasita.github.io/2018/08/01/alwaysonssl-breaking/</link>
      <pubDate>Wed, 01 Aug 2018 01:03:14 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/08/01/alwaysonssl-breaking/</guid>
      <description>S/MIMEもSSL証明書も取れない
(´；ω；｀)ﾌﾞﾜｯ
トップページも繋がらないしもう駄目か・・・</description>
    </item>
    
    <item>
      <title>クライアント証明書&#43;HTTP2</title>
      <link>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</link>
      <pubDate>Sun, 29 Jul 2018 16:36:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/29/h2-plus-client-auth/</guid>
      <description>SSLRequire は 非推奨みたいなので
クライアント証明書とIP制限を今風に書き直す
あとCNとかも検証するようにした
こんな感じ
&amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI SSLVerifyClient optional &amp;lt;RequireAny&amp;gt; Require ip 192.168.100.0/24 &amp;lt;RequireAll&amp;gt; Require ssl-verify-client Require expr &amp;quot;%{SSL_CLIENT_S_DN_CN} == &#39;hogeclient&#39;&amp;quot; &amp;lt;/RequireAll&amp;gt; &amp;lt;/RequireAny&amp;gt; &amp;lt;/Directory&amp;gt;  あと
Protocols http/1.1 h2  のようにhttp/1.1を先にしないと
curl: (92) HTTP/2 stream 1 was not closed cleanly: HTTP_1_1_REQUIRED (err 13)  こんなエラーになるので注意
参考リンク
 reqexprの説明
 mod_ssl変数一覧
  </description>
    </item>
    
    <item>
      <title>PerlでElasticsearch</title>
      <link>https://yaasita.github.io/2018/07/04/es-perl/</link>
      <pubDate>Wed, 04 Jul 2018 03:06:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/07/04/es-perl/</guid>
      <description>perlでElasticsearch
mojoliciousでの例
 </description>
    </item>
    
    <item>
      <title>GCPでAWS Batch的な事をやる</title>
      <link>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</link>
      <pubDate>Wed, 20 Jun 2018 23:46:45 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/06/20/aws-batch-gcp/</guid>
      <description> こんな感じにS3になんか置いて、ファイルがあったら起動して、終わったらshutdownするみたいな奴

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   GCPはインスタンスの起動停止が早いので結構良い感じ
Lambda 処理するファイルが存在して、GCPが動いてたら起動かける

GCP キュー代わりのファイル消してから
bootしてから3分後に実行（ちょっとインターバルないとインスタンスに入るのが大変になる）
処理の最後でshutdownすればOK
/etc/systemd/system/gcp-calc.service
[Unit] Description=gcp-calc Wants=network-pre.target After=multi-user.target [Install] WantedBy=multi-user.target [Service] ExecStart=/root/run.sh Type=oneshot  /etc/systemd/system/gcp-calc.timer
[Unit] Description=gcp calc [Timer] OnBootSec=3min [Install] WantedBy=timers.target  </description>
    </item>
    
    <item>
      <title>クライアント証明書とIP制限</title>
      <link>https://yaasita.github.io/2018/05/26/client-auth/</link>
      <pubDate>Sat, 26 May 2018 03:49:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/05/26/client-auth/</guid>
      <description>外からはクライアント証明書を要求して、中からは素通しさせたいケース
Apache2.4ならこんな感じ
SSLCACertificateFile /etc/apache2/ssl/example.crt &amp;lt;Directory /var/www&amp;gt; Options Indexes FollowSymLinks MultiViews ExecCGI Require ip 192.168.100.0/24 SSLVerifyClient require Satisfy any &amp;lt;/Directory&amp;gt;  curlで確認
curl https://example.net --key client.key --cert cert.crt --http1.1  作るときは /usr/lib/ssl/misc/CA.pl -newreq とかで適当に作る
鍵とセットなら良いのでcommon nameとかは適当
参考リンク プライベートCA作るまで</description>
    </item>
    
    <item>
      <title>vimのterminalモード</title>
      <link>https://yaasita.github.io/2018/05/19/vim-terminal/</link>
      <pubDate>Sat, 19 May 2018 05:16:04 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/05/19/vim-terminal/</guid>
      <description>メモ
 tmuxパカパカ開くよりは良い気がする
 以下のマッピング追加してペーストできるようにした
if has(&#39;terminal&#39;) tnoremap &amp;lt;C-T&amp;gt; &amp;lt;C-W&amp;gt;&amp;quot;&amp;quot; tnoremap &amp;lt;C-Q&amp;gt; &amp;lt;C-W&amp;gt;N endif  ubuntu18.04でもちょい古くてなんか挙動が少し違うから手動で入れた方が良い
 ビルド
apt-get build-dep vim apt-get install libperl-dev python-dev python3-dev ruby-dev git clone --depth 1 git@github.com:vim/vim.git cd vim make make install   参考リンク
【(Neo)Vim】terminal mode のマッピングについての闇とその解決法
結論：すごく便利だと思います</description>
    </item>
    
    <item>
      <title>たまにはGDBM使う</title>
      <link>https://yaasita.github.io/2018/04/17/gdbm-file/</link>
      <pubDate>Tue, 17 Apr 2018 01:09:31 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/17/gdbm-file/</guid>
      <description>2018年にGDBM使う
perl標準モジュールにある
簡単なKVSならこれで
debianだと多分入ってるけど、libperl5.24が無い環境だとダメぽい
#!/usr/bin/perl use strict; use warnings; use feature qw(:5.10); use utf8; use GDBM_File ; my $filename = &amp;quot;gdm&amp;quot;; my %hash; tie %hash, &#39;GDBM_File&#39;, $filename, &amp;amp;GDBM_WRCREAT, 0640; $hash{hoge} = &amp;quot;huga&amp;quot;; say &amp;quot;$_ =&amp;gt; $hash{$_}&amp;quot; for keys %hash;  </description>
    </item>
    
    <item>
      <title>PerlのHTTP::Tiny</title>
      <link>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</link>
      <pubDate>Sat, 07 Apr 2018 04:17:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/libio-socket-ssl/</guid>
      <description>perlのHTTP::Tinyは標準モジュールなんだけど、IO::Socket::SSLが無くて
IO::Socket::SSL 1.42 must be installed for https support  が出ちゃう場合は
apt install libio-socket-ssl-perl  </description>
    </item>
    
    <item>
      <title>GoogleのCloud SDKの署名鍵エラー</title>
      <link>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</link>
      <pubDate>Sat, 07 Apr 2018 02:24:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/04/07/google-cloud-sdk-gpg/</guid>
      <description>GCP(google cloud platform)の署名鍵が変わってた
つーか元のgpg鍵の有効期限が切れてる
取得:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease [6,372 B] エラー:1 http://packages.cloud.google.com/apt cloud-sdk-xenial InRelease 公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 6A030B21BA07F4FB  なんか探してみると2018年4月1日に作った鍵にしてるみたい
gpg2 --search-keys BA07F4FB gpg: data source: http://gpg.NebrWesleyan.edu:11371 (1) Google Cloud Packages Automatic Signing Key &amp;lt;gc-team@google.com&amp;gt; 2048 bit RSA key BA07F4FB, created: 2018-04-01, expires: 2021-03-31  ということで追加して事なきを得た
gpg2 -a --export BA07F4FB | apt-key add - apt-key del A7317B0F  </description>
    </item>
    
    <item>
      <title>Let&#39;s Encryptのワイルドカード</title>
      <link>https://yaasita.github.io/2018/03/31/lets-wildcard/</link>
      <pubDate>Sat, 31 Mar 2018 03:38:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/31/lets-wildcard/</guid>
      <description>debian testingに
certbot 0.22.2が来てたので使ってみる
とりあえずこんな感じで行った
まだサーバを指定しなきゃいけないけど、これでワイルドカード手に入るのは良い
apt install certbot certbot certonly --manual -d yaasita.net -d *.yaasita.net --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory  </description>
    </item>
    
  </channel>
</rss>
