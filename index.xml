<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 21 Sep 2024 23:43:03 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vim-lsp設定</title>
      <link>https://yaasita.github.io/2024/09/21/vim-lsp/</link>
      <pubDate>Sat, 21 Sep 2024 23:43:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/09/21/vim-lsp/</guid>
      <description>よく使うやつ
perl cpan i PLS
if executable(&#39;pls&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;perl&#39;, \ &#39;cmd&#39;: [&#39;pls&#39;], \ &#39;allowlist&#39;: [&#39;perl&#39;], \ }) endif bash npm i -g bash-language-server
if executable(&#39;bash-language-server&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;bash-language-server&#39;, \ &#39;cmd&#39;: [&#39;bash-language-server&#39;, &#39;start&#39;], \ &#39;allowlist&#39;: [&#39;sh&#39;, &#39;bash&#39;], \ }) endif vim npm i -g vim-language-server
if executable(&#39;vim-language-server&#39;) au User lsp_setup call lsp#register_server({ \ &#39;name&#39;: &#39;vm-ls&#39;, \ &#39;cmd&#39;: [&#39;vim-language-server&#39;, &#39;--stdio&#39;], \ &#39;allowlist&#39;: [&#39;vim&#39;], \ }) endif terraform https://www.</description>
    </item>
    
    <item>
      <title>muttでHTMLメールを扱う</title>
      <link>https://yaasita.github.io/2024/08/22/mutt/</link>
      <pubDate>Thu, 22 Aug 2024 02:50:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/08/22/mutt/</guid>
      <description>Your browser does not support the video tag. ~/.muttrc に以下追記
# html mailを読むための設定 set mailcap_path=~/.mutt/mailcap auto_view text/html alternative_order text/plain text/html # HTMLメールを開く vで添付画面へ行ってそこでctrl-sを押すとHTMLを保存 macro attach \cs &amp;quot;&amp;lt;pipe-entry&amp;gt;cat &amp;gt; /tmp/mutt-mail.html&amp;quot; # HTML内のリンクを表示 macro index \cv |urlview macro pager \cv |urlview ~/.mutt/mailcap
text/html; w3m -I %{charset} -T text/html; copiousoutput; 参考リンク https://wiki.archlinux.jp/index.php/Mutt</description>
    </item>
    
    <item>
      <title>thunderbirdでHTMLメールを作る</title>
      <link>https://yaasita.github.io/2024/08/21/html-mail/</link>
      <pubDate>Wed, 21 Aug 2024 03:04:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/08/21/html-mail/</guid>
      <description>設定箇所は2ヶ所
ツール -&amp;gt; 設定
アカウント設定の方にもある</description>
    </item>
    
    <item>
      <title>opendkimメモ</title>
      <link>https://yaasita.github.io/2024/07/06/dkim/</link>
      <pubDate>Sat, 06 Jul 2024 03:52:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/07/06/dkim/</guid>
      <description>DKIMの公開鍵取得 opendkim-testkeyとかで検証する際に、DNSはroot DNSサーバーから自力で名前解決しようとするのでDNSキャッシュサーバー使いたかったら以下を指定
/etc/opendkim.conf
Nameservers 192.168.0.10 thunderbirdの拡張も同じ挙動だった
公開鍵を作る場合 2048bitを指定しておく方がいい
(最近のopendkimはデフォルトで2048bit)
opendkim-genkey -D /etc/postfix/dkim/ -b 2048 -d example.jp -s mail unboundに入れるときは長いので分割する
local-data: &#39;mail._domainkey.example.jp. IN TXT &amp;quot;v=DKIM1; k=rsa; &amp;quot; &amp;quot;p=xxxxxxxx...&amp;quot; &amp;quot;xxxxxxx...&amp;quot;&#39; ローカルでの検証 opendkim-testmsg &amp;lt; mail.eml </description>
    </item>
    
    <item>
      <title>windowsでファイルリスト作成</title>
      <link>https://yaasita.github.io/2024/06/11/windows-dir/</link>
      <pubDate>Tue, 11 Jun 2024 01:28:19 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/06/11/windows-dir/</guid>
      <description>こんな感じのbatファイルでOK
dir /S /A:d /B &amp;gt; %date:~0,4%%date:~5,2%%date:~8,2%-file-list.txt dir /S /B *.pdf &amp;gt;&amp;gt; %date:~0,4%%date:~5,2%%date:~8,2%-file-list.txt dir.bat</description>
    </item>
    
    <item>
      <title>nftablesでDNSサーバーのレート制限</title>
      <link>https://yaasita.github.io/2024/05/21/nftables-dns/</link>
      <pubDate>Tue, 21 May 2024 03:42:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/05/21/nftables-dns/</guid>
      <description>/etc/nftables.conf に書くやつ
まずはこんな感じで、どれくらいの流量が入って来るか測定しておく
meta l4proto {tcp, udp} th dport 53 counter accept それから以下のように制限する
meta l4proto {tcp, udp} th dport 53 ct state new meter dns_limit1 { ip saddr timeout 1h limit rate 20/minute } counter accept meta l4proto {tcp, udp} th dport 53 ct state new meter dns_limit2 { ip6 saddr timeout 1h limit rate 20/minute } counter accept ちなみにudpの場合はいつも ct state new にマッチするっぽい</description>
    </item>
    
    <item>
      <title>shotcutで編集すると音ズレ</title>
      <link>https://yaasita.github.io/2024/04/21/shotcut/</link>
      <pubDate>Sun, 21 Apr 2024 04:22:59 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/04/21/shotcut/</guid>
      <description>編集前にこれやっておくと良いかもしれない
ffmpeg -i input.mp4 output.mp4 </description>
    </item>
    
    <item>
      <title>ポケモン言えるかテスト</title>
      <link>https://yaasita.github.io/2024/04/21/pokemon/</link>
      <pubDate>Sun, 21 Apr 2024 04:06:53 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/04/21/pokemon/</guid>
      <description>初代ポケモン151匹を言えるかテストするサイトを作った
poke.html
コーディングはgemini</description>
    </item>
    
    <item>
      <title>IPv6回りのちょっとしたこと</title>
      <link>https://yaasita.github.io/2024/03/22/ipv6-tips/</link>
      <pubDate>Fri, 22 Mar 2024 02:58:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/03/22/ipv6-tips/</guid>
      <description>public NAT64サービス: https://nat64.net/
使用するキャッシュDNSサーバーだけ変えればOKなので使いやすい
IPv6 テストサイト: https://ipv6test.app/
curlで手軽にチェックできる
curl ipv6test.app curl v4.ipv6test.app curl v6.ipv6test.app tcpdumpでICMPv6を見る
tcpdump -n -X icmp6 </description>
    </item>
    
    <item>
      <title>ipv6のICMPリダイレクト</title>
      <link>https://yaasita.github.io/2024/02/17/ipv6-icmp/</link>
      <pubDate>Sat, 17 Feb 2024 05:35:13 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/02/17/ipv6-icmp/</guid>
      <description>ipv4ならカーネルパラメータ net.ipv4.conf.all.send_redirectsでICMPリダイレクトの送信を抑止できるが
ipv6はそういうオプションが無いらしい
https://askubuntu.com/questions/1164239/how-to-disable-ipv6-redirect
/etc/nftables.conf に以下追加してとりあえず ipv6-icmpを抑止する
chain output { type filter hook output priority filter; meta l4proto ipv6-icmp icmpv6 type nd-redirect counter drop } リダイレクトで曲がったルーティングの確認はこんな感じ
ip -6 route show cache </description>
    </item>
    
    <item>
      <title>Linuxネットワークの設定</title>
      <link>https://yaasita.github.io/2024/01/07/network/</link>
      <pubDate>Sun, 07 Jan 2024 06:22:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2024/01/07/network/</guid>
      <description>たまに忘れるのでメモ
Linuxで通信を見たいときに、あるホストをルーターにする場合
/etc/sysctl.conf に以下のような設定を入れる
net.ipv4.ip_forward = 1 net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.all.send_redirects = 0 が、ICMMP redirectの送信はallじゃなくてインターフェイス名をちゃんと指定する必要があるぽい
net.ipv4.conf.eth0.send_redirects = 0 ちなみにICMP redirectで曲がってしまったルーティングは
以下のコマンドで参照とクリアができる
ip route show cache ip route flush cache あとIPv6をsystemd-networkdで無効化する場合こんな感じ
[Match] Name=host0 [Network] DHCP=no LinkLocalAddressing=no Address=192.168.0.100/24 Gateway=192.168.0.10 IPv6PrivacyExtensions=no [IPv6] Address= Gateway= AddressGenerator=none 一時アドレス消す場合は以下のコマンド
ip -6 addr flush dev eth0 scope global dynamic </description>
    </item>
    
    <item>
      <title>tumblrの投稿は消えることがある</title>
      <link>https://yaasita.github.io/2023/12/23/tumblr/</link>
      <pubDate>Sat, 23 Dec 2023 01:11:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/12/23/tumblr/</guid>
      <description>tumblrの投稿は突然消える場合があるので注意
例えば以下の投稿は/posts APIで取得できるが
https://gist.github.com/yaasita/c1c8dcfda063305f3db70bfedee9e0cb
blogページからは消えている
https://yaasita.tumblr.com/post/165399040492/asagaonosakukisetu-mklater-xmixkox
なぜ発生するかは不明</description>
    </item>
    
    <item>
      <title>rana8を試す</title>
      <link>https://yaasita.github.io/2023/12/22/rana8/</link>
      <pubDate>Fri, 22 Dec 2023 02:20:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/12/22/rana8/</guid>
      <description>これ
https://web.arena.ne.jp/service/rana8poc.html
なんかほぼGoogleCloudのcloud runだった
サービスはサービスアカウントの鍵をもらって gcloudでdeployするみたいな奴
マニュアル通りやっても以下のようになって使えなかった
ERROR: (gcloud.run.deploy) User [xxxxxxxxxx@rana8-poc.iam.gserviceaccount.com] does not have permission to access projects instance [rana8-poc] (or it may not exist): Permission &#39;cloudbuild.locations.list&#39; denied on &#39;projects/rana8-poc/lo cations/global&#39; cloud runを素で使うより何が良いのかは分からない</description>
    </item>
    
    <item>
      <title>codeiumがとても良い</title>
      <link>https://yaasita.github.io/2023/11/21/codeium/</link>
      <pubDate>Tue, 21 Nov 2023 02:41:29 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/11/21/codeium/</guid>
      <description>codeium がとても良い
個人利用なら無料 vimにも対応 対応言語が豊富 など
競合との比較はこちら
https://codeium.com/compare
とりあえず自分がVimに入れてる設定
if v:version &amp;gt;= 900 let g:codeium_disable_bindings = 1 let g:codeium_manual = v:true let g:codeium_enabled = v:false imap &amp;lt;script&amp;gt;&amp;lt;silent&amp;gt;&amp;lt;nowait&amp;gt;&amp;lt;expr&amp;gt; &amp;lt;Right&amp;gt; codeium#Accept() imap &amp;lt;Down&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(1)&amp;lt;CR&amp;gt; imap &amp;lt;Up&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#CycleCompletions(-1)&amp;lt;CR&amp;gt; imap &amp;lt;Left&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Clear()&amp;lt;CR&amp;gt; imap &amp;lt;C-A&amp;gt; &amp;lt;Cmd&amp;gt;call codeium#Complete()&amp;lt;CR&amp;gt; set statusline=%&amp;lt;%f\ %2*%{&amp;amp;mod&amp;amp;&amp;amp;&amp;amp;bt!=#&#39;terminal&#39;?&#39;[+]&#39;:&#39;&#39;}%0*%{&amp;amp;ro?&#39;[RO]&#39;:&#39;&#39;}%h%w%=codeium:%3{codeium#GetStatusString()}\ %{&#39;[&#39;.(&amp;amp;fenc!=&#39;&#39;?&amp;amp;fenc:&amp;amp;enc).&#39;][&#39;.&amp;amp;ff.&#39;]&#39;}\ %2*%y%0*%6l,%c%V%1*%8P endif 手動で有効にする設定を入れて
Ctrl-Aで保管候補出す
矢印で保管候補の決定</description>
    </item>
    
    <item>
      <title>npmのmysql2パッケージでTLS有効にしてRDS接続</title>
      <link>https://yaasita.github.io/2023/10/19/node-mysql2/</link>
      <pubDate>Thu, 19 Oct 2023 01:16:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/10/19/node-mysql2/</guid>
      <description>nodeのmysql2パッケージには
こんな感じで、ssl接続のオプションに&amp;quot;Amazon RDS&amp;quot;を指定できるが
RDSの証明書更新を行うと不都合があるよという話
証明書更新は以下のrds-ca-2019を置き換える話ね
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html
これ、パッケージ内にCA証明書が入ってるんだけど更新後の証明書が入ってない
そんで、CA証明書更新のPRは出てるんだけど、これ適用するとaurora serverlessとかRDS proxy経由の検証が失敗する
なぜなら、証明書のチェーンがこんな感じになってるので
C = US, O = &amp;#34;Starfield Technologies, Inc.&amp;#34;, OU = Starfield Class 2 Certification Authority C = US, ST = Arizona, L = Scottsdale, O = &amp;#34;Starfield Technologies, Inc.&amp;#34;, CN = Starfield Services Root Certificate Authority - G2 C = US, O = Amazon, CN = Amazon Root CA 1 C = US, O = Amazon, CN = Amazon RSA 2048 M02 CN = *.</description>
    </item>
    
    <item>
      <title>紙飛行機飛ばすゲーム</title>
      <link>https://yaasita.github.io/2023/09/16/kami-hikouki/</link>
      <pubDate>Sat, 16 Sep 2023 03:20:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/09/16/kami-hikouki/</guid>
      <description>昔、ハマった紙飛行機飛ばすゲーム
https://yaasita.github.io/2010/12/24/5072/
似たやつはあった
https://www.silvergames.com/en/flight https://www.silvergames.com/en/paper-flight-2 android版もあったけどメンテされてなさそう
https://play.google.com/store/apps/details?id=com.armorgames.Flight
FLASHをエミュレータで動かすやつもあった
https://www.gameszap.com/game/6397/flight.html</description>
    </item>
    
    <item>
      <title>経済指標をチェック</title>
      <link>https://yaasita.github.io/2023/08/12/okasan-fx/</link>
      <pubDate>Sat, 12 Aug 2023 04:02:09 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/08/12/okasan-fx/</guid>
      <description>この重要経済指標をチェックしてる
https://www.okasan-online.co.jp/tradeinfo/indicator_event/economic_indicators/
以下の例はアメリカの★5のイベントを抽出するやつ</description>
    </item>
    
    <item>
      <title>perlでglobを使うときの注意</title>
      <link>https://yaasita.github.io/2023/08/02/perl-glob/</link>
      <pubDate>Wed, 02 Aug 2023 01:45:09 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/08/02/perl-glob/</guid>
      <description>スカラーコンテキストで評価する場合は注意
こんな感じでやると
#!/usr/bin/perl use strict; use warnings; use feature qw(:5.10); use utf8; testglob(); testglob(); sub testglob { my $path = glob(&amp;quot;~/hoge.txt&amp;quot;); say &amp;quot;file = $path&amp;quot;; } 結果はこうなる
file = /home/yamasita/hoge.txt Use of uninitialized value $path in concatenation (.) or string at test.pl line 12. file = 2回目はundefが返ってる
これはイテレーターになってるので、配列1個と、打ち止めのundefが返ってるから
というわけで、こういうときは配列で受け取ってイテレータを最後まで進めたほうが良い
my $path = @{[glob(&amp;quot;~/hoge.txt&amp;quot;)]}[0]; </description>
    </item>
    
    <item>
      <title>tumblrのoauth2</title>
      <link>https://yaasita.github.io/2023/08/01/tumblr-oauth-api/</link>
      <pubDate>Tue, 01 Aug 2023 01:22:00 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/08/01/tumblr-oauth-api/</guid>
      <description>これの通り
https://www.tumblr.com/docs/en/api/v2#oauth2-authorization
とりあえずAPI叩くまで解説
アプリの登録を以下のURLから行う
https://www.tumblr.com/oauth/register
次にパラメータを組み立てて認可リクエスト
scopeにoffline_accessがあるとrefresh_tokenがもらえて永続的に使えるけど、無い場合は認可リクエストからやり直す一時的なアクセストークンしかもらえない
let params = new URLSearchParams(); params.append(&#39;client_id&#39;, &#39;xxxxxxxxxxxxxxxxxxxxx&#39;); params.append(&#39;response_type&#39;, &#39;code&#39;); params.append(&#39;scope&#39;, &#39;basic offline_access&#39;); params.append(&#39;state&#39;, &#39;hogehoge1&#39;); let urlParams = params.toString(); console.log(`https://www.tumblr.com/oauth2/authorize?${urlParams}`) あとはリダイレクトURLにコードとstate付きで返ってくるので
https://example.com/?code=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;amp;state=hogehoge1#_=_ それみてアクセストークンと交換
コードの有効期限は結構短いので急ぐこと
curl -F grant_type=authorization_code -F code=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \ -F client_id=xxxxxxxxxxxxxxxxxxxxxxxxx \ -F client_secret=xxxxxxxxxxxxxxx https://api.tumblr.com/v2/oauth2/token リフレッシュトークンからアクセストークンを取得
ちなみにアクセストークンは40分くらいで有効期限が切れる
curl -F grant_type=refresh_token -F refresh_token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \ -F client_id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \ -F client_secret=xxxxxxxxxxxxxxxxxxxxxxxxxxx https://api.tumblr.com/v2/oauth2/token あと注意なんだけど、refresh_tokenは使ったら、上記APIから新しいrefresh_tokenが来るので次回はそれを使うこと
（一度使ったrefresh_tokenはもう使えなくなる)</description>
    </item>
    
    <item>
      <title>5chのスレをパースする</title>
      <link>https://yaasita.github.io/2023/07/22/5ch-parse/</link>
      <pubDate>Sat, 22 Jul 2023 02:29:04 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2023/07/22/5ch-parse/</guid>
      <description>utf8にしたhtmlファイルを渡す</description>
    </item>
    
  </channel>
</rss>
