<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 04 Apr 2021 05:08:25 +0900</lastBuildDate>
    
	<atom:link href="https://yaasita.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>skypeログをエクスポート出来るようになってた</title>
      <link>https://yaasita.github.io/2021/04/04/skype-log-2021/</link>
      <pubDate>Sun, 04 Apr 2021 05:08:25 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/04/04/skype-log-2021/</guid>
      <description>これは便利
こちらの手順に従えば、アップロードファイルと、メッセージのjsonが手に入る
https://support.skype.com/ja/faq/FA34894/skype-huairutochiyatsutolu-li-woekusupotosurufang-fa
よく見ると、結構昔の奴も入ってるので昔からサーバー側でログを取ってたみたいね</description>
    </item>
    
    <item>
      <title>mpdとncmpc</title>
      <link>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</link>
      <pubDate>Sat, 20 Mar 2021 14:39:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/03/20/mpd-ncmpc/</guid>
      <description>mpd と ncmpc の設定メモ
インストール apt install mpd ncmpc  セットアップ /etc/mpd.confの設定
http経由で聞くのでoutputはhttpにします
 ~/.config/ncmpc/config
タグで管理してないのでファイル名だけ表示します
host = &amp;quot;127.0.0.1&amp;quot; port = 6600 list-format = &amp;quot;%file%&amp;quot; status-format = &amp;quot;%file%&amp;quot; text-editor = vim  /var/lib/mpd/music/ に音楽ファイルを入れる(symlinkでも可)
ncmpcで起動 Ctrl-UでDBのアップデート
歌詞表示 歌詞表示するなら ncmpcpp の方が楽ですが、最初からvimキーバインドなncmpcが好きなのでこちらを使っています
方法は以下の記事通り歌詞検索用のスクリプトを配置するだけ
https://www.use-strict.de/using-ncmpc-to-fetch-and-read-lyrics.html
debianのパッケージは以下のオプションでビルドされてるので
-Dlyrics_plugin_dir=&amp;quot;/usr/lib/ncmpc/lyrics/&amp;quot;  /usr/lib/ncmpc/lyrics/01-test.sh
みたいなファイルをおきます
これが歌詞検索の際に実行されます
こんなファイルを置いて
#!/bin/bash echo &amp;quot;$@&amp;quot; echo &amp;quot;あいうおえ&amp;quot;  artist, titleを設定
eyeD3 -a backnumber hoge.mp3 eyeD3 -t 高嶺の花子さん takane.mp3  すると第一引数にartist, 第二引数にtitleが入ります

この画面で、Sを押すと歌詞を~/.cache/ncmpc/lyrics/保存できたりもします</description>
    </item>
    
    <item>
      <title>GKEでGCSバックエンドと併用する時</title>
      <link>https://yaasita.github.io/2021/02/25/gke-neg/</link>
      <pubDate>Thu, 25 Feb 2021 02:26:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/02/25/gke-neg/</guid>
      <description>よくあるこんな構成
staticなHTML/CSSはGCSから、API部分はGKEからみたいな構成
 +---&amp;gt; GCS | ---&amp;gt; GCLB ---+ | +---&amp;gt; k8s(GKE)  これ、GCLB部分をingressにするのが良いんだけど、現状バックエンドサービスにGCSを登録できない
1.19ならできるぽいがなんか上手く行かなかったので
とりあえず、今の機能でやるなら、
NEGを作って、そこをGCLBのバックエンドサービスに登録する
https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg
厳密な事を言うと、nodeportもバックエンドサービスに登録できるが、こっちはノードの増減によりエンドポイントが変わってしまうので不適
公式ドキュメント通りだけどこんな感じで作る
 あとはGCSにWebサイトの設定と、GCLBの設定すればOK</description>
    </item>
    
    <item>
      <title>apacheのmod-auth-openidcについて</title>
      <link>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</link>
      <pubDate>Fri, 01 Jan 2021 22:37:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2021/01/01/mod-auth-openidc/</guid>
      <description>BASIC認証かけるみたいに簡単にGoogle認証を追加できた
公式サイト
https://www.mod-auth-openidc.org/
インストール
apt install libapache2-mod-auth-openid  設定 /etc/apache2/mods-enabled/auth_openidc.conf
OIDCRedirectURI https://hoge.example.jp/oidc/redirect_uri OIDCCryptoPassphrase hogehoge-foobar OIDCProviderMetadataURL https://accounts.google.com/.well-known/openid-configuration OIDCScope &amp;quot;openid email&amp;quot; OIDCClientID xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com OIDCClientSecret XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  リバースプロキシ的に使う例
/adminかつ、プライベートIP以外の場合はGoogle認証で hogehoge@gmail.com のみ許可
&amp;lt;VirtualHost *:443&amp;gt; ServerName hoge.example.jp &amp;lt;Location /&amp;gt; Require all granted &amp;lt;/Location&amp;gt; &amp;lt;Location /oidc/&amp;gt; AuthType openid-connect Require valid-user &amp;lt;/Location&amp;gt; &amp;lt;Location /admin&amp;gt; AuthType openid-connect Require claim email:hogehoge@gmail.com Require ip 192.168.0.0/24 &amp;lt;/Location&amp;gt; ProxyRequests Off ProxyPreserveHost On ProxyPass / http://127.0.0.1:8080/ keepalive=On RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot; RequestHeader unset X-Forwarded-For RequestHeader unset X-Forwarded-Server RequestHeader unset X-Forwarded-Host # SSL設定等が続く .</description>
    </item>
    
    <item>
      <title>postfixのReceived headerを隠す</title>
      <link>https://yaasita.github.io/2020/12/06/postfix-received-header/</link>
      <pubDate>Sun, 06 Dec 2020 01:11:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/12/06/postfix-received-header/</guid>
      <description>この回答通りなんだけど
一応補足とか
自分の環境だと、送信メールサーバーがセカンダリメールサーバーと兼任している
以下のように設定した
/etc/postfix/master.cf
smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes -o smtpd_reject_unlisted_recipient=no -o smtpd_client_restrictions=$mua_client_restrictions -o smtpd_helo_restrictions=$mua_helo_restrictions -o smtpd_sender_restrictions=$mua_sender_restrictions -o smtpd_recipient_restrictions= -o smtpd_relay_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=smtpscleanup smtpscleanup unix n - y - 0 cleanup -o header_checks=regexp:/etc/postfix/header_checks  /etc/postfix/header_checks
/^Received:.*/ IGNORE  最初はsmtp_header_checksをmain.cfに書けば良いかなーと思ったんだけど、
これだと外から入ってきたメール(後にプライマリサーバーにrelayされる)も一律削除されてしまうので都合が悪かった</description>
    </item>
    
    <item>
      <title>AWSのt4gインスタンスを試す</title>
      <link>https://yaasita.github.io/2020/11/05/t4g-instance/</link>
      <pubDate>Thu, 05 Nov 2020 02:58:38 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/11/05/t4g-instance/</guid>
      <description>新しくt4gインスタンスが出たみたいなので試してみた
cpuminer アルゴリズム=lyra2rev2 で測定
   name cpu memory hashrate(kH/s)     自宅PC Core i5-4460 3.20GHz 4コア 16G 384   ノートPC LB-C110B Celeron 1037U 1.80GHz 2コア 8G 79   t4g.micro (CPUクレジットあり) ARM CPU 2コア 1G 233   t4g.micro (CPUクレジットなし) ARM CPU 2コア 1G 24   aws lightsail (t2.nano, CPUクレジットあり) Xeon E5-2676 v3 2.40GHz 1コア 512M 81   aws lightsail (t2.nano, CPUクレジットなし) Xeon E5-2676 v3 2.</description>
    </item>
    
    <item>
      <title>hettyはmitmproxyの代わりになる？</title>
      <link>https://yaasita.github.io/2020/10/04/hetty/</link>
      <pubDate>Sun, 04 Oct 2020 00:50:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/10/04/hetty/</guid>
      <description>mitmproxyみたいにhttpsのリクエストを覗くツール
https://github.com/dstotijn/hetty
使い方は, CAの鍵と証明書を用意して
hetty -cert cacert.pem -key cakey.pem  でOK
8080でlistenするのでhttp proxyとして指定する
管理画面はproxyとて設定したブラウザで以下のURLから見れる
http://hetty.proxy/
感想
 mitmproxyより重い気がする GUIでリクエストを見れるのは便利 mitmdumpとかしないでも簡単に見れるのはとても嬉しい 検索機能は今後追加予定？ リクエストをreplyする機能も追加予定みたい  まとめ
今後に期待
今はmitmweb使う方が良いと思う</description>
    </item>
    
    <item>
      <title>Microsoft IDのOpenID connect</title>
      <link>https://yaasita.github.io/2020/09/28/oidc/</link>
      <pubDate>Mon, 28 Sep 2020 02:55:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/09/28/oidc/</guid>
      <description>Microsoft ID プラットフォームと OpenID Connect プロトコル
これを見ると response_mode = form_post
に対応してるが, これはid_token(と指定した場合はstate)がPOSTで渡ってくるのだが、chrome80で導入された サードパーティCookieの規制により
Cookieが渡ってこない
そのためセッションと紐付けるのに面倒になりそう
まあnonceからセッションを紐付けられる値を入れておけば何とかなりそうではあるが・・・
jwt等をCookieに入れて、サーバー側でセッション用のストレージを持たない場合は厳しい気がする
なので、response_mode = fragment を指定するか、SameSite=None; SecureをCookieの属性に付与するかだけど、fragmentが良いんじゃないかなぁ・・・・
参考リンク  OpenID Connect 全フロー解説  </description>
    </item>
    
    <item>
      <title>maildir形式のファイルをgmailに移す</title>
      <link>https://yaasita.github.io/2020/08/31/maildir-to-gmail/</link>
      <pubDate>Mon, 31 Aug 2020 03:36:18 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/08/31/maildir-to-gmail/</guid>
      <description>IMAPのAPPENDコマンドでmaildir形式のファイルをGmailに送る
#!/usr/bin/env node &amp;quot;use strict&amp;quot;; const simpleParser = require(&amp;quot;mailparser&amp;quot;).simpleParser; const { ImapFlow } = require(&amp;quot;imapflow&amp;quot;); const client = new ImapFlow({ host: &amp;quot;imap.gmail.com&amp;quot;, port: 993, secure: true, auth: { user: &amp;quot;hoge@gmail.com&amp;quot;, pass: &amp;quot;password&amp;quot;, }, }); const fs = require(&amp;quot;fs&amp;quot;); (async () =&amp;gt; { const mail = fs.readFileSync( process.argv[2], &amp;quot;utf8&amp;quot; ); const parsed = await simpleParser(mail); await client.connect(); await client.append(&amp;quot;INBOX&amp;quot;, mail, [&amp;quot;\\Seen&amp;quot;], parsed.date); await client.logout(); })().catch((e) =&amp;gt; { console.log(e); process.exit(1); });  </description>
    </item>
    
    <item>
      <title>chromebookのLinuxが新しくなってた</title>
      <link>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</link>
      <pubDate>Sun, 30 Aug 2020 04:28:55 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/08/30/new-linux-in-chromebook/</guid>
      <description>Linuxを消して、また入れたら良くなってた
 Debianが10になった 日本語が打てる(ただ表示はバグる) 絵文字が見れる ターミナルがタブに対応した  </description>
    </item>
    
    <item>
      <title>authorized_keysを適当に更新しない</title>
      <link>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</link>
      <pubDate>Wed, 08 Jul 2020 15:14:42 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/07/08/ssh-keys-deploy/</guid>
      <description>概要 sshの公開鍵認証で複数人が使うシステムのauthorized_keysを場当たり的に更新してしまうと、誰の鍵が入ってるか分からなくなる
誰の鍵が入ってるか分かるようにした方が良いと思う
スクリプト こんなスクリプトを書いた
使い方はREADME.md参照
https://github.com/yaasita/ssh-keys-manager
その他  使えるならsshの証明書認証も検討した方が良いかも ssh -F でconfig指定できるけど、~/.ssh/configに置いたときと挙動が違うのでスクリプト内にconfig入れる場合は注意  </description>
    </item>
    
    <item>
      <title>Google Domainsを使ってみた</title>
      <link>https://yaasita.github.io/2020/06/03/google-domains/</link>
      <pubDate>Wed, 03 Jun 2020 02:59:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/06/03/google-domains/</guid>
      <description>自分のドメインを
Value Domainから Google Domains へ移管してみた
感想
 .net, .com 等は安い .jp は高い whois 代行は標準サービス 標準の権威DNSサーバーは微妙  GCPのGoogle Cloud DNSが使えるわけではない APIでの更新も難しそう HTTPリダイレクトの機能がついてるのは嬉しい ダイナミックDNSはある DNSSECは簡単にできそう SSHFPレコードを設定できる    まとめ
みんな使うと良いと思います</description>
    </item>
    
    <item>
      <title>DoHを試す</title>
      <link>https://yaasita.github.io/2020/05/10/doh/</link>
      <pubDate>Sun, 10 May 2020 03:22:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/10/doh/</guid>
      <description>DNS over HTTPSを試す
こんな構成で作る
Nginx -&amp;gt; doh-httpproxy -&amp;gt; systemd-resolved  インストール
doh-proxy pip3でインストールすればOK
pip3 install doh-proxy  以下のような設定でserviceを作る
/etc/systemd/system/doh-httpproxy.service
[Unit] Description=doh-httpproxy After=nginx.service [Install] WantedBy=multi-user.target [Service] ExecStart=/usr/local/bin/doh-httpproxy --upstream-resolver=127.0.0.53 --port 8080 --listen-address 127.0.0.1 Nginx側設定例
server { listen 443 ssl http2; server_name doh.example.net; ssl_certificate /etc/letsencrypt/live/doh.example.net/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/doh.example.net/privkey.pem; location /dns-query { proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } }  確認
curl --doh-url https://doh.example.net/dns-query google.co.jp  </description>
    </item>
    
    <item>
      <title>BigQueryのカラムタイプ変更</title>
      <link>https://yaasita.github.io/2020/05/09/bigquery-type-change/</link>
      <pubDate>Sat, 09 May 2020 04:42:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/09/bigquery-type-change/</guid>
      <description>BigQueryのカラム変更はREQUIREDをNULLABLEにする以外は出来ません
テーブル スキーマの手動変更
作り直すしかないんですが、分割テーブルだともう一手間必要ですよという話
例えば以下のように分割テーブルを作るとします
bq mk --dataset test bq mk --table \ --time_partitioning_type DAY \ test.first  データを投入
echo -e &amp;quot;1\thoge&amp;quot; &amp;gt; /tmp/data.tsv echo -e &amp;quot;2\thuga&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv echo -e &amp;quot;3\tabcd&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200501&#39; /tmp/data.tsv id:NUMERIC,description:STRING bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200502&#39; /tmp/data.tsv id:NUMERIC,description:STRING  取り込み時間別に分割されているのが分かります
echo &amp;quot;#standardSQL&amp;quot; &amp;gt; /tmp/query.sql echo &#39;select _PARTITIONTIME as pt, count(*) as count from test.first group by _PARTITIONTIME order by pt;&#39; &amp;gt;&amp;gt; /tmp/query.</description>
    </item>
    
    <item>
      <title>express.jsでpostのrawBodyを取得</title>
      <link>https://yaasita.github.io/2020/04/28/rawpostdata/</link>
      <pubDate>Tue, 28 Apr 2020 01:00:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/04/28/rawpostdata/</guid>
      <description>multipart/form-dataでPOSTされた奴を、処理するCloud functionsを書いてて必要になったので
 呼び出し側はこんな感じでやってる
 </description>
    </item>
    
    <item>
      <title>microk8sとskaffold</title>
      <link>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</link>
      <pubDate>Sun, 29 Mar 2020 03:24:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</guid>
      <description>microk8sとskaffoldをこんな感じで使う

インストール
snap install microk8s --class microk8s.kubectl config view --raw &amp;gt; ~/.kube/config  必要サービスの起動
microk8s.enable dns registry storage skaffold dev --no-prune=false --cache-artifacts=false --default-repo localhost:32000 -f skaffold.yaml  こんな感じにやると、リポジトリ部分を読み替えてくれるので便利
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>GKEでCloud SQL Proxyをsocketで使う</title>
      <link>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</link>
      <pubDate>Fri, 28 Feb 2020 04:08:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</guid>
      <description>GKEでもGAEみたいにCloud SQLに繋げたい場合の話
公式ドキュメントのサンプルだとこんな感じにport接続にしてる
https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/master/cloudsql/mysql_wordpress_deployment.yaml
socket接続の場合はこんな感じ
 参考
k8s サイドカーコンテナについて</description>
    </item>
    
    <item>
      <title>続 chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/17/backslash-with-vim/</link>
      <pubDate>Fri, 17 Jan 2020 17:22:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/17/backslash-with-vim/</guid>
      <description>前回 の続き
以下をvimrcに追記して事なきを得た
inoremapって非ASCII文字でも行けるみたい
inoremap ¥ \ cnoremap ¥ \  </description>
    </item>
    
    <item>
      <title>chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/11/chromebook-backslash/</link>
      <pubDate>Sat, 11 Jan 2020 15:47:07 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/11/chromebook-backslash/</guid>
      <description>今持ってるchromebookだとバックスラッシュ(0x5C)が入らない
半角モードにして￥キーを押すとU+00A5が入力されてしまう
入力には全角モードにして、￥キー押した後に変換して、バックスラッシュを選択する必要がある
もしくは、Linux内なら、fcitx経由で入力すれば半角￥キーでバックスラッシュになった
WindowsとかMacなら一発だけど、これは不便かも・・・プログラミングの時にも困るし・・・

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>Github Pagesになってるリポジトリをチェック</title>
      <link>https://yaasita.github.io/2020/01/07/check-github-pages/</link>
      <pubDate>Tue, 07 Jan 2020 18:55:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/07/check-github-pages/</guid>
      <description>どのリポジトリがGithub Pagesの設定がされているか？
調べたくなったので・・・
Github pagesの設定されてるリポジトリ一覧を簡単に確認できればいいのに・・・
 </description>
    </item>
    
  </channel>
</rss>