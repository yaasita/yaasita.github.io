<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2017/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 02 Dec 2017 04:36:08 +0900</lastBuildDate>
    <atom:link href="/archives/2017/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TeratermからConEmuへ移行した</title>
      <link>https://yaasita.github.io/2017/12/02/teraterm-to-conemu/</link>
      <pubDate>Sat, 02 Dec 2017 04:36:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/12/02/teraterm-to-conemu/</guid>
      <description>長年使ってたTeratermからConEmuへ移行した
SSHクライアントはputtyを使ってる
WSL経由でも良かったんだけど、なんかVimのvisualモードで背景色が変わらなかったり表示が微妙だったので結局putty使った
良かった点  絵文字も表示できる
 タブが便利(TeratermもCollectorで出来るけどこっちの方が使いやすい)
 F1キーをリモート側に送るとかそういう設定がしやすい
  微妙な点  Alt-Vでペーストしてたけどこれが使えない(設定方法が分からない)
  まとめ ConEmu入れた後putty設定したり、微妙に面倒だけど使いやすい</description>
    </item>
    
    <item>
      <title>PS Vita 3.67アップデートでTLS1.2対応</title>
      <link>https://yaasita.github.io/2017/11/29/vita-new-version/</link>
      <pubDate>Wed, 29 Nov 2017 23:20:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/29/vita-new-version/</guid>
      <description>3.65時点だと対応してなかったけど、3.67でTLS1.2対応しました🎉
公式には
 システムソフトウェアにおいて、動作の安定性を改善しました。
 としか書いてないけど</description>
    </item>
    
    <item>
      <title>SSL証明書の有効期限チェック</title>
      <link>https://yaasita.github.io/2017/11/24/ssl-check/</link>
      <pubDate>Fri, 24 Nov 2017 01:54:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/24/ssl-check/</guid>
      <description>なんか必要だったので、シェルとかでも良いけど
 </description>
    </item>
    
    <item>
      <title>Teratermでreject clipbordのエラー</title>
      <link>https://yaasita.github.io/2017/11/16/teraterm-copy/</link>
      <pubDate>Thu, 16 Nov 2017 06:33:07 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/16/teraterm-copy/</guid>
      <description> teraterm + Tmuxでコピーをすると
Reject clipboard write access from remoteのエラーが出る
これはOSC52っていう制御文字を使ってリモートからOSのクリップボードを書き込むことができる機能がブロックされてるよって事
直すには Setup -&amp;gt; Addtional settings -&amp;gt; Control Sequenceタブ
と進んで該当箇所を設定すればOK
その下にNotifyの設定もある

参考リンク  リモートの tmux でコピーした内容のローカルのクリップボードへの反映
   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>s3fsとIPアドレス制限だけのpublic bucket</title>
      <link>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</link>
      <pubDate>Tue, 07 Nov 2017 01:36:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/11/07/s3fs-public-bucket/</guid>
      <description>s3fsを使ってこんな感じのバケットポリシーのs3をマウントするときのやつ
(hogehogeバケットとその中身を特定IPアドレスの人に開放する)
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Id&amp;quot;: &amp;quot;Policy1509977001523&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } }, { &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1509976998204&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::hogehoge/*&amp;quot;, &amp;quot;Condition&amp;quot;: { &amp;quot;IpAddress&amp;quot;: { &amp;quot;aws:SourceIp&amp;quot;: &amp;quot;203.0.113.1&amp;quot; } } } ] }  んでs3fsはこんな感じ
s3fs -o public_bucket=1,rw,allow_other,umask=0022,endpoint=ap-northeast-1,default_acl=public-read hogehoge /mnt  public_bucketがポイント</description>
    </item>
    
    <item>
      <title>正しいパッケージのアップデート方法</title>
      <link>https://yaasita.github.io/2017/10/26/pkg-update/</link>
      <pubDate>Thu, 26 Oct 2017 01:30:38 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/10/26/pkg-update/</guid>
      <description>本番環境と検証環境があり、パッケージのアップデートを行いたい場合
 10月1日 検証環境のパッケージを上げる
 11月1日 検証環境で問題なければ本番も上げる
  この時、それぞれの日に本番環境、検証環境で apt update, apt upgradeをすると本番、検証で差分が生じ検証されていないパッケージもアップデートされる可能性がある
正しくは10月1日に検証環境、本番環境で 同時 に以下のコマンドを実行
apt-get update apt-get upgrade --download-only  検証環境で以下を実行
apt-get upgrade  問題なければ本番環境で以下を実行
apt-get upgrade  ポイントは apt-get update, apt-get upgrade --download-only を検証,本番環境ともに同じタイミングで実行して更新予定のパッケージを揃えておくこと
またubuntuは/etc/apt/apt.conf.d/10periodicの「APT::Periodic::Update-Package-Lists」を0にしておかないと毎日自動でapt-get updateが走るので注意すること
図にするとこんな感じ

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>銀行の通帳を捨てた</title>
      <link>https://yaasita.github.io/2017/10/15/bank-tutyo/</link>
      <pubDate>Sun, 15 Oct 2017 22:55:44 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/10/15/bank-tutyo/</guid>
      <description>記帳に行くのがめんどくさくなったので全部捨ててみた
Web通帳の各行保存期間はこんな感じ
 ゆうちょ銀行
 ゆうちょダイレクトプラス: 15ヶ月分
  三菱東京UFJ銀行(三菱東京ＵＦＪダイレクト)
 Eco通帳: 25ヵ月分
  横浜銀行(はまぎんマイダイレクト)
 マイスマート通帳: 36ヵ月分
   </description>
    </item>
    
    <item>
      <title>WORLD OF FINAL FANTASY(WOFF)攻略まとめ</title>
      <link>https://yaasita.github.io/2017/10/12/woff/</link>
      <pubDate>Thu, 12 Oct 2017 15:29:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/10/12/woff/</guid>
      <description>ワールド オブ ファイナルファンタジーの攻略ページまとめ
 アビリティ
 アビリティ一覧・効果・大技組み合わせ
  クエスト・ストーリー
 よりみちクエスト
 隠しマップの行き方
 ストーリー攻略
 マップ
 クリア後隠しダンジョン
 XG倒したときのパーティ
  アイテム
 マディンの記憶入手方法
 ミラーストーン一覧と入手法
  ミラージュ
 WOFF攻略!ゴブリンプリンセス★、アンデッドセレブ★、クイーンアチョ★入手法
 最強ミラージュランキング！
 図鑑1-10
 図鑑11-20
 図鑑21-22
   </description>
    </item>
    
    <item>
      <title>maildropの管理UIを作った</title>
      <link>https://yaasita.github.io/2017/09/29/maildrop-admin/</link>
      <pubDate>Fri, 29 Sep 2017 02:38:43 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/09/29/maildrop-admin/</guid>
      <description>フロントをVue.jsでこんな感じの構成

動作の様子

maildropの設定ファイル(~/.mailfilter)でも良いんだけどちょっと
日付が入れられないのとエントリーが増えてくるとちょっと管理しきれなくなった
一旦こんな感じのJSONを経由することでマシにした感じ
 &amp;quot;JUNKMAIL&amp;quot;: [ { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*atmarkit.co.jp&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; }, { &amp;quot;header&amp;quot;: &amp;quot;From&amp;quot;, &amp;quot;regex&amp;quot;: &amp;quot;.*facebookmail.com&amp;quot;, &amp;quot;time&amp;quot;: &amp;quot;2017/05/08 01:58&amp;quot; },  サーバサイドの実装
https://github.com/yaasita/maildrop-admin
.mailfilterへの変換処理
  function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img0&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img0&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>iptablesの変更をWebからやる</title>
      <link>https://yaasita.github.io/2017/08/22/imap-iptables/</link>
      <pubDate>Tue, 22 Aug 2017 02:17:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/22/imap-iptables/</guid>
      <description>httpsのほかにもう一個ポートのアクセス制限を面倒見たくなかったのでなんとなくやってみた
httpsでWebUIにアクセスしたらIP許可リストに入れるって処理

PerlのCGIからGo言語で書いたバイナリを呼んでiptablesを更新する的な処理
GoとPerl間はJSONで受け渡す
Goで書いたのはSUIDビット立てたバイナリで叩きたいと思ったから
（なんかうまくいかなくて結局sudoでやったけど)
https://github.com/yaasita/mail-iptables
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>S/MIMEの設定</title>
      <link>https://yaasita.github.io/2017/08/12/smime/</link>
      <pubDate>Sat, 12 Aug 2017 17:25:39 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/12/smime/</guid>
      <description>StartSSL CSR作る
emailaddressにS/MIME設定したいアドレスを入れる
openssl req -newkey rsa:2048 -keyout yourname.key -out yourname.csr  証明書が送られてくるのでこんな感じでまとめて
-----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----  pkcs12に変換してthunderbirdにインポートする
openssl pkcs12 -export -in sakusei.pem -out email.pfx  なんか送られてきた中間証明書がCRLFとLFが混在してるので直した
チェーンはこんな感じになってた
StartCom Certification Authority |_ StartCom Certification Authority ECC |_ StartCom CC2 ICA |_ 自分のメールアドレス  そういやCAAレコードを検証しなかったけどいいのかね？
でここまでやって気づいたんだけどStartComの証明書が失効扱いで全然検証通らなかった
これはGmailも同じなのでStartCom使うのは中止
COMODO 今度COMODOを使うことになったんだけど既にChromeだとKEYGEN要素が使えないらしくFirefoxでアクセスするしかない
(コードもselect[_moz-type=&amp;ldquo;-mozilla-keygen&amp;rdquo;]になってるし)
こっちはフォームから申請して、リンククリックすればすぐに証明書がFirefoxに入るのでそれをエクスポートしてthunderbirdに入れればOK
チェーンはこんな感じ
COMODO RSA Certification Authority |_COMODO RSA Client Authentication and Secure Email CA |_ 自分のメールアドレス  まとめ Let&amp;rsquo;s EncryptがS/MIME対応してほしい</description>
    </item>
    
    <item>
      <title>DNSのCAAレコードについて</title>
      <link>https://yaasita.github.io/2017/08/11/dns-caa-record/</link>
      <pubDate>Fri, 11 Aug 2017 02:03:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/11/dns-caa-record/</guid>
      <description>CAA (Certification Authority Authorization)レコードのチェックが2017年9月8日から必須になるみたい
ちょっと調べてみる
DANEはクライアント用でこっちはCA用のレコードらしい
例えばこんな感じのCAAレコードを書いて Let&amp;rsquo;s Encryptで発行しようとすると
こんなエラーが返される
;; ANSWER SECTION: yaasita.tk. 60 IN CAA 0 issue &amp;quot;comodoca.com&amp;quot; yaasita.tk. 60 IN CAA 0 issuewild &amp;quot;\;&amp;quot; yaasita.tk. 60 IN CAA 0 iodef &amp;quot;mailto:alert@yaasita.net&amp;quot;  この場合、hoge.yaasita.tk. みたなサブドメインもcomodocaでしか発行できなくなる
(設定はサブドメインに継承される)
ただし、上書きは可能なのでCAAを以下のようにすればLet&amp;rsquo;s Encryptだけから発行できるように変わる
hoge IN CAA 0 issue &amp;quot;letsencrypt.org&amp;quot; hoge IN CAA 0 issuewild &amp;quot;;&amp;quot; hoge IN CAA 0 iodef &amp;quot;mailto:alert@yaasita.net&amp;quot;  例えば、google.com のCAAは以下のようになっているので、Google Trust Servicesおよびsymantecからしか発行できない
仮に drive.google.com のwebrootに任意のファイルを置ける脆弱性があったとしても(http-01で)Let&amp;rsquo;s Encryptの証明書を発行することはできないし、WoSignで偽の証明書を発行されることもない
(WoSignがCAA無視してたら意味ないけど)
google.com. 84592 IN CAA 0 issue &amp;quot;pki.</description>
    </item>
    
    <item>
      <title>edit-slack.vimちょっと書き直した</title>
      <link>https://yaasita.github.io/2017/08/10/edit-slack/</link>
      <pubDate>Thu, 10 Aug 2017 02:35:57 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/10/edit-slack/</guid>
      <description>edit-slack.vim をちょっと直した
主な変更点は以下の通り
reactionを表示するようにした

アップロードされたファイルのダウンロードリンクを表示

キーワード検索ができるようにした
例) vim slack://sw/hogehoge vim slack://sw/from:@yamasita vim slack://sw/on:today  取っ散らかってたコードをちょっと直した
https://github.com/yaasita/edit-slack/compare/v0.2.0...v0.8.1
ちょっと見ない間にSlackもなんか変わってて、今までのTest tokenがlegacy tokenって名前になってたり、botアクセス、userアクセスで細かくAPI使用制限がされてるようになってた(前からか？)
 function callback(data){ photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
    <item>
      <title>会社員→自営業でも再就職手当は貰える</title>
      <link>https://yaasita.github.io/2017/08/09/sitsugyou-hoken/</link>
      <pubDate>Wed, 09 Aug 2017 16:16:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/08/09/sitsugyou-hoken/</guid>
      <description>なので、辞めた後にハロワ行って雇用保険受給資格者証もらってから開業届出した後に報告しに行った方が良い
失業状態だと偽って失業保険貰うと不正受給になるので注意</description>
    </item>
    
    <item>
      <title>apacheのログフォーマット</title>
      <link>https://yaasita.github.io/2017/07/22/apache-log/</link>
      <pubDate>Sat, 22 Jul 2017 17:53:24 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/22/apache-log/</guid>
      <description>apacheのログフォーマットはJSONにしておいた方がパースが楽という話
こんな感じにする
LogFormat &amp;quot;\ { \ \&amp;quot;host\&amp;quot;:\&amp;quot;%V\&amp;quot;, \ \&amp;quot;method\&amp;quot;:\&amp;quot;%m\&amp;quot;, \ \&amp;quot;port\&amp;quot;:\&amp;quot;%p\&amp;quot;, \ \&amp;quot;processingTime\&amp;quot;:\&amp;quot;%D\&amp;quot;, \ \&amp;quot;protocol\&amp;quot;:\&amp;quot;%H\&amp;quot;, \ \&amp;quot;query\&amp;quot;:\&amp;quot;%q\&amp;quot;, \ \&amp;quot;referer\&amp;quot;:\&amp;quot;%{Referer}i\&amp;quot;, \ \&amp;quot;remoteIP\&amp;quot;:\&amp;quot;%a\&amp;quot;, \ \&amp;quot;request\&amp;quot;:\&amp;quot;%U\&amp;quot;, \ \&amp;quot;responseByte\&amp;quot;:\&amp;quot;%B\&amp;quot;, \ \&amp;quot;status\&amp;quot;:\&amp;quot;%&amp;gt;s\&amp;quot;, \ \&amp;quot;time\&amp;quot;:\&amp;quot;%t\&amp;quot;, \ \&amp;quot;unixtime\&amp;quot;:\&amp;quot;%{%s}t\&amp;quot;, \ \&amp;quot;userAgent\&amp;quot;:\&amp;quot;%{User-agent}i\&amp;quot;, \ \&amp;quot;user\&amp;quot;:\&amp;quot;%u\&amp;quot; \ }&amp;quot; \ leapache  吐き出し
CustomLog ${APACHE_LOG_DIR}/access-json.log leapache  https://blog.logentries.com/2014/08/json-logging-in-apache-and-nginx-with-logentries/</description>
    </item>
    
    <item>
      <title>IDCFクラウド試してみた</title>
      <link>https://yaasita.github.io/2017/07/16/idcf-cloud/</link>
      <pubDate>Sun, 16 Jul 2017 01:47:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/16/idcf-cloud/</guid>
      <description> conohaから引っ越し
 ソースIP、パブリックIPの概念がちょっと難しい
 OP25Bはされてない
 多分VMwareで動いてる
 conohaよりはファイヤーウォールとか細かく設定できるけど、ポートフォワードの設定とかしなきゃいけないので若干面倒
  conohaとの比較 最安プランで比べてみる
転送量のリミットはあるものの総じてIDCFの方が良いかもしれない
   機能 conoha IDCF     メモリ 512MB 1GB   料金 680円 540円   CPU(bogomips) 4589.37 5600.00   Disk 20GB 15GB   転送量課金 なし 3,240GB/月まで無料   仮想方式 kvm VMware    </description>
    </item>
    
    <item>
      <title>githubからコードスニペットを探す</title>
      <link>https://yaasita.github.io/2017/07/15/github-code-search/</link>
      <pubDate>Sat, 15 Jul 2017 23:53:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/15/github-code-search/</guid>
      <description>githubのAPIでコードスニペット探すと捗る
  </description>
    </item>
    
    <item>
      <title>machine-idを変える時</title>
      <link>https://yaasita.github.io/2017/07/06/dbus-uuidgen/</link>
      <pubDate>Thu, 06 Jul 2017 13:46:49 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/07/06/dbus-uuidgen/</guid>
      <description>systemd-nspawn使ってて
なんか /etc/machine-id　ないよって言われたとき
dbus-uuidgen &amp;gt; root/etc/machine-id  </description>
    </item>
    
    <item>
      <title>AWSで監視してSlackに流す設定</title>
      <link>https://yaasita.github.io/2017/06/22/aws-monitor/</link>
      <pubDate>Thu, 22 Jun 2017 04:17:15 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/22/aws-monitor/</guid>
      <description>EC2 -&amp;gt; CloudWatch -&amp;gt; SNS -&amp;gt; Lambda -&amp;gt; Slackみたいなよくある設定例

Slack Customize Slack =&amp;gt; Custom Integrations から Incoming WebHooks 選んで適当にチャンネル選んで追加
URLをメモっておく
EC2 とりあえずaws cli入れて、この辺の監視スクリプトをcronに登録すればOK
apt-get install awscli # カスタムメトリクス用スクリプト apt-get install unzip libwww-perl libdatetime-perl curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O unzip CloudWatchMonitoringScripts-1.2.1.zip rm CloudWatchMonitoringScripts-1.2.1.zip cd aws-scripts-mon cp awscreds.template awscreds.conf vim awscreds.conf # keyIDとSecretKeyを書いておく  こんな感じのやつをcronに登録
~/aws-scripts-mon/mon-put-instance-data.pl --mem-util --swap-util --disk-path=/ --disk-space-util --from-cron  んで即座に反映されるはず
 カスタムメトリクスをパブリッシュする
  CloudWatch ダッシュボード作ったりアラーム書いたりしておく
通知はSNSのTopicsを指定する(後述)
SNS Topicsを新しく作ってTopicネームくらいは適当に埋めておく後で、Lambda側で指定するのでTopicさえあればOK</description>
    </item>
    
    <item>
      <title>PS vita向けSSL設定</title>
      <link>https://yaasita.github.io/2017/06/13/vita-ssl/</link>
      <pubDate>Tue, 13 Jun 2017 01:57:49 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2017/06/13/vita-ssl/</guid>
      <description>PlayStation Vitaの内蔵ブラウザは
TLSv1.1, TLSv1.2
が使えないので、 TLSv1 を使うこと
システムソフトウェア 3.65 時点</description>
    </item>
    
  </channel>
</rss>
