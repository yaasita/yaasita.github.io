<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on # cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2020/</link>
    <description>Recent content in 2020 on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 09 May 2020 04:42:51 +0900</lastBuildDate>
    
	<atom:link href="https://yaasita.github.io/archives/2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BigQueryのカラムタイプ変更</title>
      <link>https://yaasita.github.io/2020/05/09/bigquery-type-change/</link>
      <pubDate>Sat, 09 May 2020 04:42:51 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/05/09/bigquery-type-change/</guid>
      <description>BigQueryのカラム変更はREQUIREDをNULLABLEにする以外は出来ません
テーブル スキーマの手動変更
作り直すしかないんですが、分割テーブルだともう一手間必要ですよという話
例えば以下のように分割テーブルを作るとします
bq mk --dataset test bq mk --table \ --time_partitioning_type DAY \ test.first  データを投入
echo -e &amp;quot;1\thoge&amp;quot; &amp;gt; /tmp/data.tsv echo -e &amp;quot;2\thuga&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv echo -e &amp;quot;3\tabcd&amp;quot; &amp;gt;&amp;gt; /tmp/data.tsv bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200501&#39; /tmp/data.tsv id:NUMERIC,description:STRING bq load --source_format=CSV --field_delimiter=&amp;quot;\t&amp;quot; \ &#39;test.first$20200502&#39; /tmp/data.tsv id:NUMERIC,description:STRING  取り込み時間別に分割されているのが分かります
echo &amp;quot;#standardSQL&amp;quot; &amp;gt; /tmp/query.sql echo &#39;select _PARTITIONTIME as pt, count(*) as count from test.first group by _PARTITIONTIME order by pt;&#39; &amp;gt;&amp;gt; /tmp/query.</description>
    </item>
    
    <item>
      <title>express.jsでpostのrawBodyを取得</title>
      <link>https://yaasita.github.io/2020/04/28/rawpostdata/</link>
      <pubDate>Tue, 28 Apr 2020 01:00:16 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/04/28/rawpostdata/</guid>
      <description>multipart/form-dataでPOSTされた奴を、処理するCloud functionsを書いてて必要になったので
 呼び出し側はこんな感じでやってる
 </description>
    </item>
    
    <item>
      <title>microk8sとskaffold</title>
      <link>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</link>
      <pubDate>Sun, 29 Mar 2020 03:24:06 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/03/29/microk8s_and_skaffold/</guid>
      <description>microk8sとskaffoldをこんな感じで使う

インストール
snap install microk8s --class microk8s.kubectl config view --raw &amp;gt; ~/.kube/config  必要サービスの起動
microk8s.enable dns registry storage skaffold dev --no-prune=false --cache-artifacts=false --default-repo localhost:32000 -f skaffold.yaml  こんな感じにやると、リポジトリ部分を読み替えてくれるので便利
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>GKEでCloud SQL Proxyをsocketで使う</title>
      <link>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</link>
      <pubDate>Fri, 28 Feb 2020 04:08:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/02/28/k8s-cloudsql-proxy-with-socket/</guid>
      <description>GKEでもGAEみたいにCloud SQLに繋げたい場合の話
公式ドキュメントのサンプルだとこんな感じにport接続にしてる
https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/master/cloudsql/mysql_wordpress_deployment.yaml
socket接続の場合はこんな感じ
 参考
k8s サイドカーコンテナについて</description>
    </item>
    
    <item>
      <title>続 chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/17/backslash-with-vim/</link>
      <pubDate>Fri, 17 Jan 2020 17:22:02 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/17/backslash-with-vim/</guid>
      <description>前回 の続き
以下をvimrcに追記して事なきを得た
inoremapって非ASCII文字でも行けるみたい
inoremap ¥ \ cnoremap ¥ \  </description>
    </item>
    
    <item>
      <title>chromebookでbackslashを入力</title>
      <link>https://yaasita.github.io/2020/01/11/chromebook-backslash/</link>
      <pubDate>Sat, 11 Jan 2020 15:47:07 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/11/chromebook-backslash/</guid>
      <description>今持ってるchromebookだとバックスラッシュ(0x5C)が入らない
半角モードにして￥キーを押すとU+00A5が入力されてしまう
入力には全角モードにして、￥キー押した後に変換して、バックスラッシュを選択する必要がある
もしくは、Linux内なら、fcitx経由で入力すれば半角￥キーでバックスラッシュになった
WindowsとかMacなら一発だけど、これは不便かも・・・プログラミングの時にも困るし・・・

 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>Github Pagesになってるリポジトリをチェック</title>
      <link>https://yaasita.github.io/2020/01/07/check-github-pages/</link>
      <pubDate>Tue, 07 Jan 2020 18:55:03 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/07/check-github-pages/</guid>
      <description>どのリポジトリがGithub Pagesの設定がされているか？
調べたくなったので・・・
Github pagesの設定されてるリポジトリ一覧を簡単に確認できればいいのに・・・
 </description>
    </item>
    
    <item>
      <title>GCPの外部IPアドレスが有料になる件</title>
      <link>https://yaasita.github.io/2020/01/06/gcp-ex-ip/</link>
      <pubDate>Mon, 06 Jan 2020 23:06:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/06/gcp-ex-ip/</guid>
      <description>外部IPが有料になりそうだからどうしようかという話
一部では無料範囲内なら課金されないみたいな書き方もされてるけど、今月の請求には不穏な項目がある
Credit External IPs will not be charged until April 1, 2020.  
んで、外部IPを無しにして、gcloud compute ssh で繋げるのは良いんだけど、外部IPが無いと外と通信できないからapt installもできない。。。。
あと、上記コマンドはsshポートを解放してないと駄目ぽい（正確にはIAPからのアクセスを許可すれば良いだけぽいが）
とりあえず課金されてから考えるか・・・
参考リンク  外部IPを持たないGCEインスタンスでweb開発 GCP/GCE の固定グローバルIPアドレス、2020年より有料化   function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img&#34;).src = photos[0].original_size.url; }   </description>
    </item>
    
    <item>
      <title>chromebookの日本語入力</title>
      <link>https://yaasita.github.io/2020/01/01/chromebook-japanese/</link>
      <pubDate>Wed, 01 Jan 2020 13:27:50 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2020/01/01/chromebook-japanese/</guid>
      <description>明けましておめでとうございます。
chromebookで日本語入力する場合はローカルの場合はfcitx-mozcを使って入力
リモートに接続する場合は、一旦踏み台サーバーを経由して、X転送したqterminalを使っている
ssh humidai-server -XC export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx fcitx qterminal  自分の環境では-Cオプションを付けない場合は800kbpsくらい通信するが、つけると100kbpsになるので外でやる時にはつけた方が良さそう
回線が細いテザリング環境では ttyd を立てて、ポートフォワーディングでつないだ方が良いかも
Ctrl-wがchromeのタブ閉じになってしまうので微妙かなと思ったんだけど、「その他のツール(L)」 =&amp;gt; 「ショートカットを作成」からアプリとして作れば、Ctrl-wも使えた
こっちなら日本語入力も出来るのでこっちの方が良いかもしれない
通信量も1kbps位だし</description>
    </item>
    
  </channel>
</rss>