<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2025 on # cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2025/</link>
    <description>Recent content in 2025 on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 12 Jul 2025 14:10:30 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/archives/2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>aws s3 glacier</title>
      <link>https://yaasita.github.io/2025/07/12/aws-s3-glacier/</link>
      <pubDate>Sat, 12 Jul 2025 14:10:30 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/07/12/aws-s3-glacier/</guid>
      <description>aws s3 glacier で取り出しするときに
こんなコマンドを打つ
これはdeep archiveにあったファイルをstandardクラスのストレージに7日移してダウンロードできるようにするというもの
aws s3api restore-object \ --bucket $s3bucket \ --key $s3key \ --restore-request &#39;{&amp;quot;Days&amp;quot;:7,&amp;quot;GlacierJobParameters&amp;quot;:{&amp;quot;Tier&amp;quot;:&amp;quot;Bulk&amp;quot;}}&#39; Bulkでリクエストすると大体48時間後ぐらいに取り出せるようになる
でこれ7日間はstandardクラスの料金がかかるのでダウンロードしたらすぐにこんなコマンドを打って、残存期間を短くした方がいい
aws s3api restore-object \ --bucket $s3bucket \ --key $s3key \ --restore-request &#39;{&amp;quot;Days&amp;quot;:1,&amp;quot;GlacierJobParameters&amp;quot;:{&amp;quot;Tier&amp;quot;:&amp;quot;Bulk&amp;quot;}}&#39; ちなみに Days: 0 はエラーになる</description>
    </item>
    
    <item>
      <title>s3のマルチパートアップロード料金</title>
      <link>https://yaasita.github.io/2025/06/21/aws-s3-multipart/</link>
      <pubDate>Sat, 21 Jun 2025 15:30:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/06/21/aws-s3-multipart/</guid>
      <description>こんな感じで始めるマルチパートアップロードを開始
aws s3api create-multipart-upload --bucket $BUCKET --key $UPLOAD_KEY --storage-class DEEP_ARCHIVE glacierを指定しても
アップロード途中の料金はs3のスタンダード料金よりはちょっと安いくらいのお金がかかる
バージニア北部(us-east-1)リージョンでこんな感じ
請求書にStagingって書いてあるので気づけるはず
$0.021 per GB-Month of storage used in GlacierStagingStorage マルチパートアップロードの途中がないか定期的に確認したほうがよい
aws s3api list-multipart-uploads --bucket バケット名 </description>
    </item>
    
    <item>
      <title>sysstatのデータをbigqueryに入れる</title>
      <link>https://yaasita.github.io/2025/05/17/sysstat/</link>
      <pubDate>Sat, 17 May 2025 13:23:08 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/05/17/sysstat/</guid>
      <description>こんな感じでレポート出して
sadf -T -j /var/log/sysstat/sa\$(date -d yesterday +%d) -- -ruq -n DEV &amp;gt; /tmp/sadf.json bigquery用のフォーマットに変更
あとは Looker Studio で見るとか</description>
    </item>
    
    <item>
      <title>動画ファイルのダミーデータ</title>
      <link>https://yaasita.github.io/2025/05/16/download-stream-png-dummy/</link>
      <pubDate>Fri, 16 May 2025 16:45:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/05/16/download-stream-png-dummy/</guid>
      <description>m3uから動画をダウンロードすると
PNG image data, 1 x 1, 8-bit/color RGBA, non-interlacedのデータになることがある
こんな感じで先頭8byteを飛ばして
ffmpegで再エンコードするとよい
とりあえずffmpeg通せばヘッダは復活する
ffmpeg -i merged_output.ts -c copy out.mp4 参考リンク
https://github.com/yt-dlp/yt-dlp/issues/4381</description>
    </item>
    
    <item>
      <title>ロックマンX6攻略情報</title>
      <link>https://yaasita.github.io/2025/04/17/rockman6/</link>
      <pubDate>Thu, 17 Apr 2025 03:32:19 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/04/17/rockman6/</guid>
      <description>自分用メモ ナイトメアを上書きする方法
https://penpengames.blog.fc2.com/blog-entry-43.html
途中で右下に出てくるビックリマークは？
R3ボタンでオペレーターからのヒントを聞ける
強化パーツ
https://ameblo.jp/megamanblack/entry-12459899904.html
アイテム一覧
https://rockmanx6.gorillawiki.jp/entry/21
アーマー場所
https://www.youtube.com/watch?v=QtN-EFOMrEA
ライフアップ取り方
https://www.youtube.com/watch?v=qzuumF5boOk&amp;amp;t=34s
サブタンク/EXアイテム
https://www.youtube.com/watch?v=0l2LVclq804</description>
    </item>
    
    <item>
      <title>スマホ変えて楽天モバイルにした</title>
      <link>https://yaasita.github.io/2025/03/03/rakuten-mobile/</link>
      <pubDate>Mon, 03 Mar 2025 01:28:35 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/03/03/rakuten-mobile/</guid>
      <description>スマホ変えました
Sharp AQUOS wish4 の Docomo版にしました
androidは14
Docomo版なので、Docomo用のプリインアプリが沢山あって無効化が面倒
ただ画面がでかくて良いかもしれない
あとMNPで楽天モバイルにしました
イオンモバイルからワンストップMNPでやろうとしたんだけどなんか申請途中でエラー
イオン側は申請受付状態、楽天側は未申請状態になって詰んだと思ったけど
1日くらい待つと、イオンモバイル側にMNP予約番号が表示見されるようになってたのでそれを楽天モバイル側に手動で入力して申請
何とかなった
あとAPN設定しないとつながらない
https://network.mobile.rakuten.co.jp/faq/detail/00001495/
今回からeSIMにしてみたけど便利
ただ、eSIMでも楽天モバイルからの郵便物(楽天モバイルの取説)は届くし受け取り必要でした</description>
    </item>
    
    <item>
      <title>バイオハザードRE4</title>
      <link>https://yaasita.github.io/2025/02/22/biore4/</link>
      <pubDate>Sat, 22 Feb 2025 03:56:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/02/22/biore4/</guid>
      <description>感想
背景やオブジェクトの作り込みが素晴らしい オリジナル版よりなんか怖かった ホラー要素が強化されてるけど、びっくりさせるようなギミックは微妙だった(突然足場抜けるとか、急に敵出てくるとか) QTEが微妙に残ってて気になった ナイフの耐久値は微妙 ナイフによるパリィは楽しいかもしれない ステルスキル(敵に見つからないように背後を取るとナイフ一撃で倒せるやつ)は特に楽しい DLC(エイダ編)も良かった 赤い邪教徒が呪文唱えるとエイムしにくくなったり回りの敵が寄生体飛び出て強化される仕組みは良いと思った(赤い邪教徒を率先して倒す理由になる) パズルは全体的に微妙だった/そもそもパズル必要なのか？特に孤島での電気回路パズルと面倒だった 火を吹く巨大サラザールロボとか出てきてちょっとバカゲー要素ある 背景とかオブジェクトはリアリティあるのに急にそういうの出るギャップすごい 総合的には良作</description>
    </item>
    
    <item>
      <title>DoHを使う</title>
      <link>https://yaasita.github.io/2025/01/02/doh/</link>
      <pubDate>Thu, 02 Jan 2025 13:33:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/01/02/doh/</guid>
      <description>DNS over HTTPSを使ってpi-holeに接続する設定
出先で広告ブロック使いたくなったのでやってみる
こんな構成
apache -&amp;gt; doh-proxy -&amp;gt; pi-hole -&amp;gt; unbound サーバーはこれ
https://github.com/DNSCrypt/doh-server
/etc/systemd/system/doh-proxy.service って名前で保存
[Unit] Description=DoH Proxy After=network.target [Service] ExecStart=/usr/local/bin/doh-proxy -u 127.0.0.1:53 -l 0.0.0.0:3000 User=root Group=root Restart=always RestartSec=5 [Install] WantedBy=multi-user.target TLS部分はapacheがやる
こんな感じでproxy
&amp;lt;VirtualHost *:443&amp;gt; ServerName dns.example.net ProxyRequests Off ProxyPreserveHost On ProxyPass / http://192.168.0.123:3000/ retry=2 ProxyPassReverse / http://192.168.0.123:3000/ SSLEngine on SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.net/privkey.pem &amp;lt;/VirtualHost&amp;gt; テストはこんな感じ
curl --doh-url https://dns.example.net/dns-query https://example.jp dnslookup コマンドでもOK
dnslookup example.jp https://dns.example.net/dns-query chromebookの場合は&amp;quot;確認済みアクセスを有効にする&amp;quot;のチェックを外しておいた方が良い
このチェックの挙動がよく分からないけど、DoHサーバーの名前解決後のIPアドレスがLAN内のプライベートIPなら通るけど、グローバルIPだと通さないみたいな挙動になってた
あと設定直後はちゃんとHTTPのリクエストを発行するにもかかわらず1～2分後にエラーになるみたいな動きもする
まあ広告ブロックしたいだけなら</description>
    </item>
    
    <item>
      <title>cody使ってみる</title>
      <link>https://yaasita.github.io/2025/01/01/cody/</link>
      <pubDate>Wed, 01 Jan 2025 15:59:47 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/01/01/cody/</guid>
      <description>cody が良いという評判を聞いたので使ってみる
コーディングAI課金するならCodyが断トツ良い話
https://zenn.dev/sanami/articles/7c24ce973b7e7c
vimには codeium と github copilot を設定しているので補完AIはもう要らない
CLIを設定してみる
マニュアル
https://sourcegraph.com/docs/cody/clients/install-cli
ここからアクセストークンを発行
https://sourcegraph.com/users/gitlab-etjbc/settings/tokens
環境変数に設定
export SRC_ACCESS_TOKEN=sgp_xxxxxxxxxxxxxxxxxxxxxx インストール
npm install -g @sourcegraph/cody cody auth whoami こんな感じで使える
cody chat -m &#39;Explain React hooks&#39; git diff | cody chat --stdin -m &#39;Write a commit message for this diff&#39; cody chat --context-file src/controller.ts -m &#39;Are there code smells in this file?&#39; ターミナルから使えて良いかもしれない</description>
    </item>
    
  </channel>
</rss>
