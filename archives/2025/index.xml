<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2025 on # cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2025/</link>
    <description>Recent content in 2025 on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 02 Jan 2025 13:33:58 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/archives/2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DoHを使う</title>
      <link>https://yaasita.github.io/2025/01/02/doh/</link>
      <pubDate>Thu, 02 Jan 2025 13:33:58 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/01/02/doh/</guid>
      <description>DNS over HTTPSを使ってpi-holeに接続する設定
出先で広告ブロック使いたくなったのでやってみる
こんな構成
apache -&amp;gt; doh-proxy -&amp;gt; pi-hole -&amp;gt; unbound サーバーはこれ
https://github.com/DNSCrypt/doh-server
/etc/systemd/system/doh-proxy.service って名前で保存
[Unit] Description=DoH Proxy After=network.target [Service] ExecStart=/usr/local/bin/doh-proxy -u 127.0.0.1:53 -l 0.0.0.0:3000 User=root Group=root Restart=always RestartSec=5 [Install] WantedBy=multi-user.target TLS部分はapacheがやる
こんな感じでproxy
&amp;lt;VirtualHost *:443&amp;gt; ServerName dns.example.net ProxyRequests Off ProxyPreserveHost On ProxyPass / http://192.168.0.123:3000/ retry=2 ProxyPassReverse / http://192.168.0.123:3000/ SSLEngine on SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/example.net/privkey.pem &amp;lt;/VirtualHost&amp;gt; テストはこんな感じ
curl --doh-url https://dns.example.net/dns-query https://example.jp dnslookup コマンドでもOK
dnslookup example.jp https://dns.example.net/dns-query chromebookの場合は&amp;quot;確認済みアクセスを有効にする&amp;quot;のチェックを外しておいた方が良い
このチェックの挙動がよく分からないけど、DoHサーバーの名前解決後のIPアドレスがLAN内のプライベートIPなら通るけど、グローバルIPだと通さないみたいな挙動になってた
あと設定直後はちゃんとHTTPのリクエストを発行するにもかかわらず1～2分後にエラーになるみたいな動きもする
まあ広告ブロックしたいだけなら</description>
    </item>
    
    <item>
      <title>cody使ってみる</title>
      <link>https://yaasita.github.io/2025/01/01/cody/</link>
      <pubDate>Wed, 01 Jan 2025 15:59:47 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2025/01/01/cody/</guid>
      <description>cody が良いという評判を聞いたので使ってみる
コーディングAI課金するならCodyが断トツ良い話
https://zenn.dev/sanami/articles/7c24ce973b7e7c
vimには codeium と github copilot を設定しているので補完AIはもう要らない
CLIを設定してみる
マニュアル
https://sourcegraph.com/docs/cody/clients/install-cli
ここからアクセストークンを発行
https://sourcegraph.com/users/gitlab-etjbc/settings/tokens
環境変数に設定
export SRC_ACCESS_TOKEN=sgp_xxxxxxxxxxxxxxxxxxxxxx インストール
npm install -g @sourcegraph/cody cody auth whoami こんな感じで使える
cody chat -m &#39;Explain React hooks&#39; git diff | cody chat --stdin -m &#39;Write a commit message for this diff&#39; cody chat --context-file src/controller.ts -m &#39;Are there code smells in this file?&#39; ターミナルから使えて良いかもしれない</description>
    </item>
    
  </channel>
</rss>
