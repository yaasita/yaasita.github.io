<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title># cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2018/</link>
    <description>Recent content on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 17 Mar 2018 02:57:05 +0900</lastBuildDate>
    <atom:link href="/archives/2018/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>perlのデストラクタ</title>
      <link>https://yaasita.github.io/2018/03/17/perl-destory/</link>
      <pubDate>Sat, 17 Mar 2018 02:57:05 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/03/17/perl-destory/</guid>
      <description>Ctrl-Cで止めたときもデストラクタを呼びたいときがある
そういう時は、シグナルハンドラを作ればOK
最後に変数のスコープから外れてデストラクタが呼ばれる
 </description>
    </item>
    
    <item>
      <title>Apacheでリバースプロキシ</title>
      <link>https://yaasita.github.io/2018/02/04/apache-header/</link>
      <pubDate>Sun, 04 Feb 2018 16:27:56 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/02/04/apache-header/</guid>
      <description>Apacheでリバースプロキシするときこんな感じに書いた方が良いよという話
&amp;lt;VirtualHost *:443&amp;gt; ServerName example.net &amp;lt;Proxy *&amp;gt; Require all granted &amp;lt;/Proxy&amp;gt; ProxyRequests Off ProxyPreserveHost On ProxyPass / http://192.168.0.1:8080/ keepalive=On ProxyPassReverse / http://192.168.0.1:8080/ RequestHeader set X-Forwarded-Proto &amp;quot;https&amp;quot; RequestHeader unset X-Forwarded-For RequestHeader unset X-Forwarded-Server RequestHeader unset X-Forwarded-Host Include /path/to/common.conf &amp;lt;/VirtualHost&amp;gt;  X-Forwarded-Forとかを一旦unsetしないと、
X-Forwarded-Forとかをクライアント側から指定されると、追加されて判別が困難になる
curl -H &amp;quot;X-Forwarded-For: 1.2.3.4&amp;quot;  みたいな感じで指定されると
 x-forwarded-for: &amp;quot;1.2.3.4, 192.168.0.100&amp;quot;  こんな感じに追加されて http://192.168.0.1:8080 側にわたってしまう</description>
    </item>
    
    <item>
      <title>プライベートCA作るまで</title>
      <link>https://yaasita.github.io/2018/01/31/private-ca/</link>
      <pubDate>Wed, 31 Jan 2018 18:04:22 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/31/private-ca/</guid>
      <description>Debian9でやってみた
cd /etc/ssl /usr/lib/ssl/misc/CA.pl -newca /usr/lib/ssl/misc/CA.pl -newreq /usr/lib/ssl/misc/CA.pl -sign # /tmp/ca.pemを入れてもらう openssl x509 -outform PEM -in demoCA/cacert.pem -out /tmp/ca.pem # 変換 openssl x509 -outform PEM -in newcert.pem -out /etc/nginx/ssl/hogehoge.crt # パスフレーズ解除 openssl rsa -in newkey.pem -out /etc/nginx/ssl/hogehoge.key  データベースおかしくなったら
index.txt空っぽすればOK
rm demoCA/index.txt touch demoCA/index.txt  /etc/ssl/openssl.cnf は こんな感じ
証明書の管理は
chromeなら設定 =&amp;gt; 詳細設定 =&amp;gt; SSLの管理からやる
windowsの場合はファイル名を指定して実行 =&amp;gt; certlm.msc と同じこと
あと注意点として、chromeはsubjectAltNameを見るので注意
(EnableCommonNameFallbackForLocalAnchorsってやつを設定するとできるようだけど)</description>
    </item>
    
    <item>
      <title>GoogleHomeでPCつける</title>
      <link>https://yaasita.github.io/2018/01/14/google-home/</link>
      <pubDate>Sun, 14 Jan 2018 03:41:21 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2018/01/14/google-home/</guid>
      <description>Mojoliciousで受けてコマンド叩くだけ
IFTTTはこんな感じにして


Mojolicious側のコントローラはこんな感じで受けた

喋りたくない時もあるので、JavaScriptでも叩けるようにした(適当な場所にHTML置いておいた)
function hogeop(){ postjson({key: &#39;huga&#39;}) } function postjson(j) { fetch(&amp;quot;/google&amp;quot;, { method: &amp;quot;POST&amp;quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify(j) }).then(res =&amp;gt; res.json()).then(res =&amp;gt; { console.log(res) }); }  結論: こうやって家電を操作できるのは楽しい
 function callback(data){ var photos = data.response.posts[0].photos; document.getElementById(&#34;tumblr-img1&#34;).parentNode.href = photos[0].original_size.url; document.getElementById(&#34;tumblr-img1&#34;).src = photos[0].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).parentNode.href = photos[1].original_size.url; document.getElementById(&#34;tumblr-img2&#34;).src = photos[1].original_size.url; }   </description>
    </item>
    
  </channel>
</rss>
