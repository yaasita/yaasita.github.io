<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on # cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2019/</link>
    <description>Recent content in 2019 on # cd ~yaasita</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 24 Dec 2019 17:58:35 +0900</lastBuildDate>
    <atom:link href="https://yaasita.github.io/archives/2019/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>再度hugoアップデート</title>
      <link>https://yaasita.github.io/2019/12/24/hugo-update2/</link>
      <pubDate>Tue, 24 Dec 2019 17:58:35 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/12/24/hugo-update2/</guid>
      <description>前回からまたアップデート&#xA;hugoのバージョンを 0.56.3 =&amp;gt; v0.62.0 まで上げた&#xA;注意点としては, v0.58.0 から .Pagesの挙動が変わっているので&#xA;以下の通り、.Site.RegularPages に変更する必要がある&#xA;Building sites … WARN 2019/12/23 17:34:34 In the next Hugo version (0.58.0) we will change how $home.Pages behaves. If you want to list all regular pages, replace .Pages or .Data.Pages with .Site.RegularPages in your home page template. あとインラインのHTMLがデフォルトで削除されるので使ってたらコレもconfig.tomlへ追記&#xA;[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true hardWraps = true 最近非互換のバージョンアップ多くない？&#xA;アップデートがめんどくさくなってきたな。。。</description>
    </item>
    <item>
      <title>chromebookが最高だった</title>
      <link>https://yaasita.github.io/2019/12/23/chromebook/</link>
      <pubDate>Mon, 23 Dec 2019 05:58:32 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/12/23/chromebook/</guid>
      <description>ASUS の C434TA-AI0084 を買ったのでレビュー&#xA;chromeOS 起動もアプリの動作も全体的に速くてとても良い smartlockが失敗する時がある 解除がちょっと遅い10秒くらい待たされる chromeの複数ユーザー機能が使えない 多重ログイン機能はあるけどちょっと微妙 別ユーザーへスイッチする場合はsmartlockで解除できない 別ユーザー側のAndroidアプリ、Linux環境は使えない(chromeだけ) 後述のLinux環境でchromium入れてそこでアカウント切り替えする手もある 同時にログインできないだけなので、別ユーザを追加してスイッチすることは可能 ディスプレイ タブレットには少し重い 解像度は 2194x1234 ～ 1182x665の範囲で調整可能 起動毎にバックライトの明るさがリセットされてしまう(音量は記憶してるのに。。。) グレア液晶は問題なし綺麗 テザリング Moto E5 とbluetoothでのテザリングが出来なかった とりあえずUSBテザリングは刺すだけで使えたので良しとしてます キーボード Deleteキーが無いけど、Alt + Backspaceで問題なし かな/英語キーと, 半角全角切り替えキーがあるのでMac派でもWindows派でも大丈夫かも キーボードのバックライトは消せない ←Alt + 明るさキーで消せました Androidアプリ ほとんどのアプリは問題なかった 大画面でAndroidアプリ使うのは割と快適(例 tumblr) Android版Excelでとりあえず見るのはOKそう タウンWifiみたいなWifiを制御するアプリは上手く動かないかもしれない(要検証) パズドラは動かない Linux環境 OS Debian9なのでDebian10にアップデートされるのを期待 使い始めるのはすごく簡単、設定から有効ボタンを押すだけ 丸ごとLinux環境バックアップ機能あり バックアップは丸ごとtarで固めて1ファイルにしてくれるのでハンドリングはしやすい USB共有機能あり /opt/google/cros-containers/bin/.. というプロセスが動いてる以外は普通のLinux, systemdも問題なし ファイル共有 右クリックから簡単に共有可能 Linux環境側では/mnt/chromeos に現れる /mnt/chromeos以下はパーミッションやownerが狂わないように制限されてるのでトラブルになることは無いと思う デフォルトでファイルアプリを使ってchromeOS側からLinux側のhomeディレクトリは自由に読み書き可能 なので共有ファイル追加しなくても特段問題なし ネットワーク こんなスクリプト だと chromeOS側から 127.0.0.1:3000 にアクセスできる でも、なぜかDockerで docker run -p 3000:80 nginx とかやって 127.</description>
    </item>
    <item>
      <title>GCP Cloud Functions内からサービスアカウントのtoken取る</title>
      <link>https://yaasita.github.io/2019/12/08/service-account-in-cf/</link>
      <pubDate>Sun, 08 Dec 2019 05:12:12 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/12/08/service-account-in-cf/</guid>
      <description>Cloud Functionsからサービスアカウントのアクセストークンをどうやって取るの？と疑問に思ったので調べた&#xA;Google Compute Engineと同じ取り方でOK&#xA;&amp;quot;use strict&amp;quot;; const fetch = require(&amp;quot;node-fetch&amp;quot;); exports.handler = async (req, res) =&amp;gt; { const url = &amp;quot;http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/&amp;quot; + &amp;quot;[サービスアカウント名]/token&amp;quot;; const result = await fetch(url, { method: &amp;quot;GET&amp;quot;, headers: { &amp;quot;Metadata-Flavor&amp;quot;: &amp;quot;Google&amp;quot; } }); const token = await result.text(); console.log(token); res.status(200).send(&amp;quot;OK&amp;quot;); }; なんでドキュメントにも書いてある今更な事を書くかというと日本語ドキュメントには見出しが無いんですよね。。。。&#xA;まだ翻訳終わってないならまだしも（本当は英文のままで良いからタイトルくらいは残してほしいが) &amp;ldquo;Function Identity&amp;quot;とかクリックするとちゃんと日本語版あるんですよね&#xA;なんかメニューがバグってるのかな・・・&#xA;とりあえず英語版から探すのをオススメします&amp;hellip;&#xA;参考リンク&#xA;関数ID Compute Metadata Server </description>
    </item>
    <item>
      <title>GCPでアクセストークンを取得する</title>
      <link>https://yaasita.github.io/2019/11/14/gcp-access-token/</link>
      <pubDate>Thu, 14 Nov 2019 22:32:41 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/11/14/gcp-access-token/</guid>
      <description>ほとんどのサービスは クライアントライブラリ を使えば&#xA;export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json みたいに環境変数を設定するだけで良いのだが、Cloud Build 等は access tokenを取得して叩く必要がある&#xA;という事でGCPのサービスアカウントからアクセストークンを取得するコード&#xA;スコープ一覧はこちら&#xA;https://developers.google.com/identity/protocols/googlescopes&#xA;アクセストークンのテストは DLP とかがお手軽で良いかな&#xA;参考リンク jose API Document Using OAuth 2.0 for Server to Server Applications </description>
    </item>
    <item>
      <title>osu!taikoのskin</title>
      <link>https://yaasita.github.io/2019/10/27/osu/</link>
      <pubDate>Sun, 27 Oct 2019 03:00:31 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/10/27/osu/</guid>
      <description>osu!taikoのスキン&#xA;これが一番良かった&#xA;概要欄からダウンロードできる</description>
    </item>
    <item>
      <title>AtCoder Beginner Contest 142のD問題</title>
      <link>https://yaasita.github.io/2019/09/30/atcoder-abc142/</link>
      <pubDate>Mon, 30 Sep 2019 05:05:34 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/09/30/atcoder-abc142/</guid>
      <description>問題: D - Disjoint Set of Common Divisors&#xA;方針はユークリッドの互除法で最大公約数を出して、最大公約数を素因数分解&#xA;存在する素数の数+1(今回は1もお互いに素の数として含めるため)でOKぽい&#xA;perlで書いてみる&#xA;解説動画</description>
    </item>
    <item>
      <title>systemd timerはちゃんと動いてる？</title>
      <link>https://yaasita.github.io/2019/09/29/systemd-timer/</link>
      <pubDate>Sun, 29 Sep 2019 16:51:09 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/09/29/systemd-timer/</guid>
      <description>systemdタイマーがちゃんと動いてるか確認したほうが良いよというお話&#xA;systemctl list-timers --allコマンドで一覧が見れるあれです&#xA;debian10だと /etc/cron.daily にあるスクリプトでこんな感じに書かれてたら、systemd timerの方を使ってる&#xA;if [ -d /run/systemd/system ]; then exit 0 fi 前回 と同様にノートパソコンのバッテリー稼働と誤って判断されることに起因する問題&#xA;例えばlogrotateとかみると&#xA;systemctl cat logrotate こんな一文がある&#xA;ConditionACPower=true これはバッテリー駆動の時は動かさないって意味らしいんだけど、どうも判定が狂ってるみたいでずっと実行されなかった&#xA;なので、以下のコマンドでoverride.conf作って判定を無効化した&#xA;systemctl edit logrotate # 書いた内容 [Unit] ConditionACPower= というわけで&#xA;cronだけじゃなくて, systemd-timerもちゃんと見ておかないといけない&#xA;journalctl -n 10 -u logrotate | egrep -i &amp;quot;condition check.*skipped&amp;quot; とりあえず分かった、バッテリー時の判定が入ってるtimer&#xA;apt-daily-upgrade man-db logrotate anacron apt-daily </description>
    </item>
    <item>
      <title>ビリビリ動画とcrunchyrollのIP制限をGCPで検証</title>
      <link>https://yaasita.github.io/2019/09/14/anime-ip-block/</link>
      <pubDate>Sat, 14 Sep 2019 22:21:43 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/09/14/anime-ip-block/</guid>
      <description>bilibili動画とcrunchyrollのIP制限はどんな感じなのか&#xA;GCPの各リージョンからアクセスして試してみる&#xA;rttは自宅から該当サーバーまでのpingしたときの平均値&#xA;なのでISPによって全然違うと思うので参考値ということで&#xA;region bilibili crunchyroll rtt(ms) asia-east1 (台湾) ng ok 60.149 asia-east2 (香港) ng ok 76.986 asia-northeast1 (東京) ng ok 29.624 asia-northeast2 (大阪) ng ok 37.401 asia-south1 (ムンバイ) ng ok 144.055 asia-southeast1 (シンガポール) ng ok 89.755 australia-southeast1 (シドニー) ng ok 122.193 europe-north1 (フィンランド) ng ok 256.714 europe-west1 (ベルギー) ng ok 229.038 europe-west2 (ロンドン) ng ok 220.693 でここまでやってあとは変わらないだろうと思って以下のリージョンは試さなかった&#xA;europe-west3 (フランクフルト) europe-west4 (オランダ) europe-west6 (チューリッヒ) northamerica-northeast1 (モントリオール) southamerica-east1 (サンパウロ) us-central1 (アイオワ) us-east1 (サウスカロライナ) us-east4 (北バージニア) us-west1 (オレゴン) us-west2 (ロサンゼルス) 結論 crunchyrollは適当なリージョンからでも、たとえ（日本リージョンでも)見れる</description>
    </item>
    <item>
      <title>on_ac_powerコマンドについて</title>
      <link>https://yaasita.github.io/2019/08/16/on-ac-power/</link>
      <pubDate>Fri, 16 Aug 2019 04:45:45 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/08/16/on-ac-power/</guid>
      <description>debian10にした関係でLinuxネタが続く&#xA;PCがバッテリーで動いてるかどうか判定するのにon_ac_powerってコマンドがある&#xA;そんで、バッテリー駆動の場合は電力を節約したいので、anacronとかを動かなくする制御がはいってる&#xA;例えば、/etc/cron.daily/mlocate の場合&#xA;if which on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then ON_BATTERY=0 on_ac_power &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || ON_BATTERY=$? if [ &amp;quot;$ON_BATTERY&amp;quot; -eq 1 ]; then exit 0 fi fi こんな感じでon_ac_powerが1を返したらバッテリー駆動と判断しすぐに処理を止めてしまう&#xA;んで LB-C110B っていうひと昔前のノートPCだとこの判定が狂ってしまい常にバッテリー駆動と判定されてしまった&#xA;このままだと永遠にlocateコマンドが使えないので、divertで退避させた&#xA;dpkg-divert --divert /sbin/on_ac_power.disable --rename /sbin/on_ac_power ln -s /bin/true /sbin/on_ac_power おしまい</description>
    </item>
    <item>
      <title>1から100の偶数の和を求めるやつ</title>
      <link>https://yaasita.github.io/2019/08/15/sum-even-number/</link>
      <pubDate>Thu, 15 Aug 2019 04:10:11 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/08/15/sum-even-number/</guid>
      <description>「1から100の偶数の和を求めるワンライナー」まとめ&#xA;perlでやってみる&#xA;perl -E &#39;$s+=$_%2?0:$_ for 1..100;say$s&#39; perl -E &#39;s/.+/$s+=$&amp;amp;%2?0:$&amp;amp;/e for 1..100;say$s&#39; perl -E &#39;$&amp;quot;=&amp;quot;+&amp;quot;;$a=&amp;quot;@{[1..100]}&amp;quot;;$a=~s/\d+/$&amp;amp;%2?0:$&amp;amp;/eg;eval&amp;quot;say $a&amp;quot;&#39; perl -E &#39;$&amp;quot;=&amp;quot;+&amp;quot;;eval&amp;quot;say @{[grep{$_%2==0}1..100]}&amp;quot;;&#39; 4つ思いついた&#xA;結論 simple is best</description>
    </item>
    <item>
      <title>各種サーバの中間証明書の扱い</title>
      <link>https://yaasita.github.io/2019/08/14/ssl-capath/</link>
      <pubDate>Wed, 14 Aug 2019 10:20:33 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/08/14/ssl-capath/</guid>
      <description>中間証明書をどう設定するか問題&#xA;postfix smtpd_tls_cert_file = /etc/letsencrypt/live/example.net/cert.pem smtpd_tls_key_file = /etc/letsencrypt/live/example.net/privkey.pem smtpd_tls_CAfile = /etc/letsencrypt/live/example.net/chain.pem Let&amp;rsquo;s Encryptの場合こんな感じ&#xA;smtpd_tls_CAfileに中間証明書を指定する&#xA;smtpd_tls_cert_fileにfullchain.pemを指定するやり方はNG&#xA;dovecot 10-ssl.conf&#xA;ssl_ca = &amp;lt;/etc/letsencrypt/live/example.net/chain.pem これはダメ&#xA;この設定はクライアント証明書用ですので&#xA;正しくは、こんな感じに、まとめたやつを指定すればOK&#xA;ssl_cert = &amp;lt;/etc/letsencrypt/live/example.net/fullchain.pem apache SSLCACertificateFileという設定はクライアント証明書用なのでここに入れない&#xA;SSLCertificateFile /etc/letsencrypt/live/example.net/fullchain.pem dovecot同様に中間証明書もまとめて指定する&#xA;まとめ この問題はスマホのK-9 Mailでメール読もうとしたときに判明した&#xA;(突然CertPathValidatorExceptionって怒られた)&#xA;thunderbirdでメール読んでた時には発生しなかったのでなんだろなーと思ったんだけどこっちは多めにroot証明書入ってるみたいね&#xA;サーバー設定後はこんな感じで中間証明書まで確認したほうが良いかも&#xA;openssl s_client -connect example.org:465 -showcerts thunderbirdだけで確認すると痛い目を見るよと言うお話でした</description>
    </item>
    <item>
      <title>虫よけスプレー</title>
      <link>https://yaasita.github.io/2019/07/29/musiyoke/</link>
      <pubDate>Mon, 29 Jul 2019 03:42:37 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/07/29/musiyoke/</guid>
      <description>虫除けスプレーで最近買ったこれが良かった&#xA;ベタベタしないので気にならない&#xA;フマキラー SKIN VAPEってやつかな&#xA;商品名はスキンベープミスト　200mlかも&#xA;そういや虫よけ剤に入ってるDEETって薬はなぜ虫が寄り付かないか謎らしい</description>
    </item>
    <item>
      <title>例のS3署名バージョン2について</title>
      <link>https://yaasita.github.io/2019/06/25/s3v2/</link>
      <pubDate>Tue, 25 Jun 2019 00:31:08 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/06/25/s3v2/</guid>
      <description>AWS S3の署名バージョン騒動&#xA;大丈夫ぽいけど一応調べた時につかったスクリプト&#xA;CloudTrailでログを有効化してからお使いください</description>
    </item>
    <item>
      <title>Cloud Runがすごく良い</title>
      <link>https://yaasita.github.io/2019/05/29/cloud-run/</link>
      <pubDate>Wed, 29 May 2019 21:42:23 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/05/29/cloud-run/</guid>
      <description>GCPのCloud Runがめっちゃ便利&#xA;覚えなきゃいけないルールは2つ&#xA;Dockerにする事 環境変数 $PORT のポート番号でlistenしてレスポンスを返す事 これだけ&#xA;コマンドとかはこの辺見ればすぐできると思います&#xA;あと、Chunked Transferみたいな仕組みで進捗を返すみたいなAPIは難しいかもしれない&#xA;以下のようなプログラムでちょっとずつレスポンス返しても、バッファリングされてるみたいで、最後ドバっと返ってきた</description>
    </item>
    <item>
      <title>PKCEをJavaScriptで実装する</title>
      <link>https://yaasita.github.io/2019/04/29/pkce/</link>
      <pubDate>Mon, 29 Apr 2019 01:23:20 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/04/29/pkce/</guid>
      <description>code_verifier から code_challenge の生成方法について調べた&#xA;code_challenge_method=S256の場合は以下のような実装ロジックになる&#xA;node.jsで書いた&#xA;Oauth2のPKCE&#xA;base64エンコードじゃなくてbase64urlエンコードなのが注意点</description>
    </item>
    <item>
      <title>令和の対応に際して</title>
      <link>https://yaasita.github.io/2019/04/25/reiwa/</link>
      <pubDate>Thu, 25 Apr 2019 02:08:40 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/04/25/reiwa/</guid>
      <description>techrachoの記事&#xA;perlも追加でお願いします</description>
    </item>
    <item>
      <title>tarの差分バックアップ</title>
      <link>https://yaasita.github.io/2019/04/01/tar-backup/</link>
      <pubDate>Mon, 01 Apr 2019 16:12:46 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/04/01/tar-backup/</guid>
      <description>前回の続き&#xA;でctime変化しちゃってどうしたか？&#xA;ファイルサイズとファイル名を取っておいて差分を作ることにした&#xA;こんな感じのスクリプトで、ファイル名 + tab + ファイルサイズで保存する&#xA;(厳密にやる場合はsha256とかで)&#xA;そんで現在のファイルリストも取って、差分をとる&#xA;diff -u previous.txt now.txt | egrep &amp;#34;^\+[^\+]&amp;#34; | perl -ple &amp;#39;s/^\+//;s/\t.+//&amp;#39; &amp;gt; tar.txt あとは-Tオプションで差分のファイルだけをtarで固める&#xA;tar -cvaf hoge.tgz -T tar.txt </description>
    </item>
    <item>
      <title>tarの-gオプションについて</title>
      <link>https://yaasita.github.io/2019/03/30/tar-g-option/</link>
      <pubDate>Sat, 30 Mar 2019 02:32:25 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/03/30/tar-g-option/</guid>
      <description>-g, &amp;ndash;listed-incremental&#xA;という増分バックアップに使われるオプションについてどうやって判定してるか？&#xA;それはctimeの変化を見ている&#xA;ctimeの変化で気をつけなければいけないことはハードリンクによるバックアップ&#xA;(rsync &amp;ndash;link-dest等)&#xA;例えば、以下のようなファイルが存在し&#xA;work/ `-- 1.txt 以下のコマンドを発行した場合&#xA;tar -g resume -cvf work.tar work/ 初回なので当然全部がバックアップされる&#xA;このまま以下のコマンドを打てばディレクトリだけのバックアップになる(差分がないため)&#xA;tar -g resume -cvf work.tar work/ しかし、以下のようにハードリンクをするとctimeが変わってしまいバックアップ対象にリストされてしまう&#xA;stat work/1.txt # ctime確認 cp -al work work2 # linksを増やす stat work/1.txt # ctime更新されている tar -g resume -cvf work.tar work/ # 1.txtは対象になる rm -rf work2 # linksを減らす tar -g resume -cvf work.tar work/ # 1.txtは対象になる なので、rsyncの差分バックアップの対象ディレクトリだったり、cp -alでのバックアップを取っている際はこれに注意する&#xA;うまく増分バックアップができなくなる&#xA;続き</description>
    </item>
    <item>
      <title>hugoアップデート</title>
      <link>https://yaasita.github.io/2019/03/12/hugo-update/</link>
      <pubDate>Tue, 12 Mar 2019 23:00:51 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/03/12/hugo-update/</guid>
      <description>久々にhugoをアップデート v0.41 =&amp;gt; v0.54まで上げた&#xA;ワーニング潰し アップデートに伴い&#xA;.Prev と .Nextが非推奨になったぽい マニュアル, コミット&#xA;なのでこれはそれぞれ以下のように修正すればOK(意味が逆なので分かりにくいけど)&#xA;.Prev =&amp;gt; .NextPage .Next =&amp;gt; .PrevPage OGP設定 某会社でこのブログのRSSフィードをSlackに流していると聞いたので設定してみました&#xA;上手く表示できてますか？&#xA;修正箇所&#xA;themes/hugo-theme-geppaku/layouts/partials/header.html&#xA;{{ if .IsHome }} &amp;lt;meta property=&amp;#34;og:title&amp;#34; content=&amp;#34;{{ .Site.Title }}&amp;#34; /&amp;gt; &amp;lt;meta property=&amp;#34;og:type&amp;#34; content=&amp;#34;website&amp;#34; /&amp;gt; &amp;lt;meta property=&amp;#34;og:url&amp;#34; content=&amp;#34;{{ .Site.BaseURL }}&amp;#34; /&amp;gt; {{ else }} &amp;lt;meta property=&amp;#34;og:title&amp;#34; content=&amp;#34;{{ .Title }}&amp;#34; /&amp;gt; &amp;lt;meta property=&amp;#34;og:type&amp;#34; content=&amp;#34;article&amp;#34; /&amp;gt; &amp;lt;meta property=&amp;#34;og:url&amp;#34; content=&amp;#34;{{ .Site.BaseURL }}{{ .Page.Dir }}&amp;#34; /&amp;gt; {{ end }} &amp;lt;meta property=&amp;#34;og:site_name&amp;#34; content=&amp;#34;{{ .</description>
    </item>
    <item>
      <title>Windows10のクリップボード履歴機能</title>
      <link>https://yaasita.github.io/2019/03/10/clipboard/</link>
      <pubDate>Sun, 10 Mar 2019 22:47:52 +0900</pubDate>
      <guid>https://yaasita.github.io/2019/03/10/clipboard/</guid>
      <description>Windows10に標準でクリップボード履歴機能が付いたらしい&#xA;https://www.atmarkit.co.jp/ait/articles/1903/08/news028.html Windows キー + Vで使えるようになる&#xA;cliborの方が使いやすそうな気がするけど、しばらくこっち使ってみる</description>
    </item>
  </channel>
</rss>
