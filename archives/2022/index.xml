<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2022 on # cd ~yaasita</title>
    <link>https://yaasita.github.io/archives/2022/</link>
    <description>Recent content in 2022 on # cd ~yaasita</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 18 Mar 2022 03:38:37 +0900</lastBuildDate><atom:link href="https://yaasita.github.io/archives/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ipv4とipv6 Happy Eyeballs</title>
      <link>https://yaasita.github.io/2022/03/18/ipv4-ipv6-happy-eyeballs.md/</link>
      <pubDate>Fri, 18 Mar 2022 03:38:37 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/03/18/ipv4-ipv6-happy-eyeballs.md/</guid>
      <description>Happy EyeballsはTCPコネクションを先に確立させた方が勝つのでnginxのechoモジュールでsleepとかは意味ない
初回はどちらか一方でも繋がれば遅延は感じないが
一回接続に成功した場合はipv4を使うのかipv6を使うのかキャッシュしている状態なので切り替えに時間がかかる
例えばipv6で繋がっていたサイト側でipv6をドロップさせると
ip6tables -A INPUT -p tcp --dport 443 -j DROP  数秒遅延した後にipv4で接続する</description>
    </item>
    
    <item>
      <title>linuxのipv6一時アドレス2</title>
      <link>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</link>
      <pubDate>Tue, 01 Mar 2022 02:34:41 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/03/01/ipv6-tmpaddr/</guid>
      <description>linuxでipv6一時アドレス使う時に設定するカーネルパラメータ
net.ipv6.conf.xxx.temp_prefered_lft = 86400 net.ipv6.conf.xxx.temp_valid_lft = 604800  これの意味は、上記のようにデフォルトの設定86400(1日), 604800(7日)だった場合
xxxインターフェイスにIPv6-1という一時アドレスが付いていたとする
IPv6-1作成してから24時間後にIPv6-2という新しい一時アドレスを取得する
取得後はIPv6-2のアドレスを使用して通信をするようになる
使わなくなったIPv6-1アドレスも7日間は有効なので受信することは可能
という仕組み
つまり、最大で7アドレスになるということ
1日目: IPv6-1
2日目: IPv6-1, IPv6-2
3日目: IPv6-1, IPv6-2, IPv6-3,
という風に増えていく
前回</description>
    </item>
    
    <item>
      <title>Linuxでipv6の一時アドレス</title>
      <link>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</link>
      <pubDate>Sat, 26 Feb 2022 23:16:10 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/26/ipv6-tempaddr/</guid>
      <description>systemd-networkdの設定にIPv6PrivacyExtensions足せばOK
(対応するカーネルパラメータ net.ipv6.conf.xxx.use_tempaddr は自動的に設定される)
[Network] Address=192.168.0.2/24 Gateway=192.168.0.1 IPv6PrivacyExtensions=yes  temp_valid_lft
と
temp_prefered_lft
については sysctlで設定すること
参考リンク
 https://wiki.archlinux.jp/index.php/IPv6 http://dr.slump.jp/IPv6/rfc3041/ https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt  </description>
    </item>
    
    <item>
      <title>ipv4/ipv6確認サイト</title>
      <link>https://yaasita.github.io/2022/02/23/ipv4-ipv6/</link>
      <pubDate>Wed, 23 Feb 2022 15:25:52 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/23/ipv4-ipv6/</guid>
      <description>自分のIPv4/IPv6アドレスを確認するサイトを作った
ipv4専用
https://ipv4.cloud.yaasita.net/
ipv6専用
https://ipv6.cloud.yaasita.net/
ipv4/ipv6両対応(どちらのIPが優先されるか確認用)
https://ipv46.cloud.yaasita.net/</description>
    </item>
    
    <item>
      <title>SMTP-TLSRPTのチェック</title>
      <link>https://yaasita.github.io/2022/02/12/tls-report-check/</link>
      <pubDate>Sat, 12 Feb 2022 01:24:48 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/02/12/tls-report-check/</guid>
      <description>SMTP-TLSRPTをチェックしてtotal-failure-session-countがゼロより大きいかチェックするスクリプト
(対象はGoogleから貰うレポート)
 こんな感じでメールがあるディレクトリを指定する
./index.js ~/Maildir/cur/  </description>
    </item>
    
    <item>
      <title>RStudioで正規性の確認</title>
      <link>https://yaasita.github.io/2022/01/26/normal_distribution/</link>
      <pubDate>Wed, 26 Jan 2022 02:50:46 +0900</pubDate>
      
      <guid>https://yaasita.github.io/2022/01/26/normal_distribution/</guid>
      <description>シャピロ-ウィルク(Shapiro-Wilk)の正規性の検定をやる流れ
まず以下のようなデータを用意する
ある音ゲーのスコア
これは音ゲーのスコアを表していてタイミングよく押せた場合はPERFECT, 早すぎたり遅すぎたりした場合はFAST, SLOWに計上される
この内ミスの割合が正規分布と見なせるか検定する
まず、CSVを右上のEnvironmentタブ =&amp;gt; Import Datasetから読み込む

データをMISSの割合をデータフレームに追加
library(dplyr) bandori &amp;lt;- bandori %&amp;gt;% mutate(MISS = (FAST + SLOW) / (PERFECT + FAST + SLOW) * 100) ヒストグラムと近似曲線を出す
hist(bandori$MISS, breaks = seq(0, 20, 1)) dens &amp;lt;- density(bandori$MISS) lines(dens, lwd = 3, col = &amp;quot;blue&amp;quot;) 
検定
shapiro.test(bandori$MISS) 検定統計量とp値
data: bandori$MISS W = 0.98162, p-value = 0.724 ここで注意なのはこの検定は帰無仮説が「正規分布している」なので
棄却出来た場合は正規分布ではないと言えるが、
今回のように棄却できない（受容域）の場合は正規分布していてもおかしくない程度なので何とも言えないです
ヒストグラム見る限り正規分布としても良さそうですが
使ったRスクリプト
https://gist.github.com/yaasita/7c431d0493c9703c91d0a013d03349af</description>
    </item>
    
  </channel>
</rss>
